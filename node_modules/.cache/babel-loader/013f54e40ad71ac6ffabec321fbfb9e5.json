{"ast":null,"code":"import { GET_EDUCATION_BY_USER, GET_ALL_COMPETENCY, GET_ACHIEVEMENT_BY_USER, GET_All_ORAGNIZATION, GET_RECOMMENDATION_BY_USER, GET_ACHIEVEMENT_DATA } from '../types';\nconst INITIAL_STATE = {\n  all: [],\n  competencyData: [],\n  achievementData: [],\n  oragnizationData: [],\n  recommendationData: [],\n  onlyAchievement: []\n};\nexport default ((state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case GET_EDUCATION_BY_USER:\n      if (action.payload && action.payload.data.result) {\n        const educationInfo = action.payload.data.result;\n        state.all = educationInfo;\n      }\n\n      return Object.assign({}, state);\n\n    case GET_ALL_COMPETENCY:\n      if (action.payload && action.payload.data.result) {\n        state.competencyData = action.payload.data.result;\n      }\n\n      return Object.assign({}, state);\n\n    case GET_ACHIEVEMENT_BY_USER:\n      if (action.payload && action.payload.data.result) {\n        state.achievementData = action.payload.data.result;\n      }\n\n      return Object.assign({}, state);\n\n    case GET_ACHIEVEMENT_DATA:\n      if (action.payload && action.payload.data.result) {\n        state.onlyAchievement = action.payload.data.result;\n      }\n\n      return Object.assign({}, state);\n\n    case GET_All_ORAGNIZATION:\n      if (action.payload && action.payload.data.result) {\n        state.oragnizationData = action.payload.data.result;\n      }\n\n      return Object.assign({}, state);\n\n    case GET_RECOMMENDATION_BY_USER:\n      if (action.payload && action.payload.data.result) {\n        state.recommendationData = action.payload.data.result;\n      }\n\n      return Object.assign({}, state);\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["/home/ank/Desktop/therapidhiregit/therapidhireui/TheRapidHireUI/src/common/core/redux/reducers/reducerStudent.js"],"names":["GET_EDUCATION_BY_USER","GET_ALL_COMPETENCY","GET_ACHIEVEMENT_BY_USER","GET_All_ORAGNIZATION","GET_RECOMMENDATION_BY_USER","GET_ACHIEVEMENT_DATA","INITIAL_STATE","all","competencyData","achievementData","oragnizationData","recommendationData","onlyAchievement","state","action","type","payload","data","result","educationInfo","Object","assign"],"mappings":"AAAA,SACEA,qBADF,EAEEC,kBAFF,EAGEC,uBAHF,EAIEC,oBAJF,EAKEC,0BALF,EAMEC,oBANF,QAOO,UAPP;AASA,MAAMC,aAAa,GAAG;AACpBC,EAAAA,GAAG,EAAE,EADe;AAEpBC,EAAAA,cAAc,EAAE,EAFI;AAGpBC,EAAAA,eAAe,EAAE,EAHG;AAIpBC,EAAAA,gBAAgB,EAAE,EAJE;AAKpBC,EAAAA,kBAAkB,EAAE,EALA;AAMpBC,EAAAA,eAAe,EAAE;AANG,CAAtB;AASA,gBAAe,CAACC,KAAK,GAAGP,aAAT,EAAwBQ,MAAxB,KAAmC;AAChD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKf,qBAAL;AACE,UAAIc,MAAM,CAACE,OAAP,IAAkBF,MAAM,CAACE,OAAP,CAAeC,IAAf,CAAoBC,MAA1C,EAAkD;AAChD,cAAMC,aAAa,GAAGL,MAAM,CAACE,OAAP,CAAeC,IAAf,CAAoBC,MAA1C;AACAL,QAAAA,KAAK,CAACN,GAAN,GAAYY,aAAZ;AACD;;AACD,aAAOC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBR,KAAlB,CAAP;;AAEF,SAAKZ,kBAAL;AACE,UAAIa,MAAM,CAACE,OAAP,IAAkBF,MAAM,CAACE,OAAP,CAAeC,IAAf,CAAoBC,MAA1C,EAAkD;AAChDL,QAAAA,KAAK,CAACL,cAAN,GAAuBM,MAAM,CAACE,OAAP,CAAeC,IAAf,CAAoBC,MAA3C;AACD;;AACD,aAAOE,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBR,KAAlB,CAAP;;AAEF,SAAKX,uBAAL;AACE,UAAIY,MAAM,CAACE,OAAP,IAAkBF,MAAM,CAACE,OAAP,CAAeC,IAAf,CAAoBC,MAA1C,EAAkD;AAChDL,QAAAA,KAAK,CAACJ,eAAN,GAAwBK,MAAM,CAACE,OAAP,CAAeC,IAAf,CAAoBC,MAA5C;AACD;;AACD,aAAOE,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBR,KAAlB,CAAP;;AAEF,SAAKR,oBAAL;AACE,UAAIS,MAAM,CAACE,OAAP,IAAkBF,MAAM,CAACE,OAAP,CAAeC,IAAf,CAAoBC,MAA1C,EAAkD;AAChDL,QAAAA,KAAK,CAACD,eAAN,GAAwBE,MAAM,CAACE,OAAP,CAAeC,IAAf,CAAoBC,MAA5C;AACD;;AACD,aAAOE,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBR,KAAlB,CAAP;;AAEF,SAAKV,oBAAL;AACE,UAAIW,MAAM,CAACE,OAAP,IAAkBF,MAAM,CAACE,OAAP,CAAeC,IAAf,CAAoBC,MAA1C,EAAkD;AAChDL,QAAAA,KAAK,CAACH,gBAAN,GAAyBI,MAAM,CAACE,OAAP,CAAeC,IAAf,CAAoBC,MAA7C;AACD;;AACD,aAAOE,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBR,KAAlB,CAAP;;AAEF,SAAKT,0BAAL;AACE,UAAIU,MAAM,CAACE,OAAP,IAAkBF,MAAM,CAACE,OAAP,CAAeC,IAAf,CAAoBC,MAA1C,EAAkD;AAChDL,QAAAA,KAAK,CAACF,kBAAN,GAA2BG,MAAM,CAACE,OAAP,CAAeC,IAAf,CAAoBC,MAA/C;AACD;;AACD,aAAOE,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBR,KAAlB,CAAP;;AAEF;AACE,aAAOA,KAAP;AAvCJ;AAyCD,CA1CD","sourcesContent":["import {\r\n  GET_EDUCATION_BY_USER,\r\n  GET_ALL_COMPETENCY,\r\n  GET_ACHIEVEMENT_BY_USER,\r\n  GET_All_ORAGNIZATION,\r\n  GET_RECOMMENDATION_BY_USER,\r\n  GET_ACHIEVEMENT_DATA\r\n} from '../types';\r\n\r\nconst INITIAL_STATE = {\r\n  all: [],\r\n  competencyData: [],\r\n  achievementData: [],\r\n  oragnizationData: [],\r\n  recommendationData: [],\r\n  onlyAchievement: []\r\n};\r\n\r\nexport default (state = INITIAL_STATE, action) => {\r\n  switch (action.type) {\r\n    case GET_EDUCATION_BY_USER:\r\n      if (action.payload && action.payload.data.result) {\r\n        const educationInfo = action.payload.data.result;\r\n        state.all = educationInfo;\r\n      }\r\n      return Object.assign({}, state);\r\n\r\n    case GET_ALL_COMPETENCY:\r\n      if (action.payload && action.payload.data.result) {\r\n        state.competencyData = action.payload.data.result;\r\n      }\r\n      return Object.assign({}, state);\r\n\r\n    case GET_ACHIEVEMENT_BY_USER:\r\n      if (action.payload && action.payload.data.result) {\r\n        state.achievementData = action.payload.data.result;\r\n      }\r\n      return Object.assign({}, state);\r\n\r\n    case GET_ACHIEVEMENT_DATA:\r\n      if (action.payload && action.payload.data.result) {\r\n        state.onlyAchievement = action.payload.data.result;\r\n      }\r\n      return Object.assign({}, state);\r\n\r\n    case GET_All_ORAGNIZATION:\r\n      if (action.payload && action.payload.data.result) {\r\n        state.oragnizationData = action.payload.data.result;\r\n      }\r\n      return Object.assign({}, state);\r\n\r\n    case GET_RECOMMENDATION_BY_USER:\r\n      if (action.payload && action.payload.data.result) {\r\n        state.recommendationData = action.payload.data.result;\r\n      }\r\n      return Object.assign({}, state);\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}