{"ast":null,"code":"import _defineProperty from\"/home/ank/Desktop/therapidhiregit/therapidhireui/TheRapidHireUI/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _classCallCheck from\"/home/ank/Desktop/therapidhiregit/therapidhireui/TheRapidHireUI/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/ank/Desktop/therapidhiregit/therapidhireui/TheRapidHireUI/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/home/ank/Desktop/therapidhiregit/therapidhireui/TheRapidHireUI/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/home/ank/Desktop/therapidhiregit/therapidhireui/TheRapidHireUI/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _assertThisInitialized from\"/home/ank/Desktop/therapidhiregit/therapidhireui/TheRapidHireUI/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";import _inherits from\"/home/ank/Desktop/therapidhiregit/therapidhireui/TheRapidHireUI/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import React,{Component}from'react';import{Button,FormGroup,InputGroup,FormControl,Modal,ButtonToolbar,OverlayTrigger,Tooltip}from'react-bootstrap';import validation from'react-validation-mixin';import strategy from'react-validatorjs-strategy';import classnames from'classnames';import{connect}from'react-redux';import{bindActionCreators}from'redux';import theRapidHireApiService from'../core/api/apiService';import{renderMessage,encrypt,decrypt,setLocalStorage}from'../commonFunctions';import CONSTANTS from'../core/config/appConfig';import{actionChangePasswordStatus}from'../../common/core/redux/actions';var validationMessages=CONSTANTS.validationMessages;var regExpressions=CONSTANTS.regExpressions;var changePassword=/*#__PURE__*/function(_Component){_inherits(changePassword,_Component);function changePassword(props){var _this;_classCallCheck(this,changePassword);_this=_possibleConstructorReturn(this,_getPrototypeOf(changePassword).call(this,props));_this.closeCPModal=function(){_this.setState({cpModal:false});_this.props.closeCPComponent();setLocalStorage('isPasswordPopupClose',true);};_this.submitData=function(event){if(event.key==='Enter'){event.preventDefault();_this.handleButtonState();}};_this.getValidatorData=function(){return _this.state;};_this.getClasses=function(field){return classnames({error:!_this.props.isValid(field)});};_this.handleChange=function(event){_this.setState(_defineProperty({},event.target.name,event.target.value));};_this.handleResetForm=function(){_this.setState(_this.initialState);};_this.state={isLoading:false,oldPassword:'',newPassword:'',confirmNewPassword:'',cpModal:true};_this.initialState=_this.state;_this.handleButtonState=_this.handleButtonState.bind(_assertThisInitialized(_this));_this.handleSubmit=_this.handleSubmit.bind(_assertThisInitialized(_this));_this.getValidatorData=_this.getValidatorData.bind(_assertThisInitialized(_this));_this.getClasses=_this.getClasses.bind(_assertThisInitialized(_this));_this.validatorTypes=strategy.createSchema({oldPassword:'required',newPassword:['required','regex:'+regExpressions.passwordPattern],confirmNewPassword:'required|same:newPassword'},{'required.oldPassword':validationMessages.password.oldPassword,'required.newPassword':validationMessages.password.newPassword,'regex.newPassword':validationMessages.password.passwordPattern,'required.confirmNewPassword':validationMessages.password.confirmNewPassword,'same.confirmNewPassword':validationMessages.password.same});return _this;}_createClass(changePassword,[{key:\"componentDidMount\",value:function componentDidMount(){console.log(this.props);if(this.props.location&&this.props.location.state&&this.props.location.state.pass){var password=decrypt(this.props.location.state.pass);console.log(password);if(password){this.setState({oldPassword:password});}}}},{key:\"handleButtonState\",value:function handleButtonState(){var self=this;self.props.validate(function(error){if(!error){self.setState({isLoading:true});self.handleSubmit();}});}},{key:\"handleSubmit\",value:function handleSubmit(){var self=this;var oldPassword=encrypt(this.state.oldPassword.trim());var newPassword=encrypt(this.state.newPassword.trim());var data={oldPassword:oldPassword,newPassword:newPassword};theRapidHireApiService('changePassword',data).then(function(response){if(response.data.status==='Success'){self.props.closeCPComponent();self.props.actionChangePasswordStatus();self.handleResetForm();self.setState({cpModal:false});}else{self.handleResetForm();}}).catch(function(err){self.handleResetForm();console.log(err);});}},{key:\"render\",value:function render(){var _this$state=this.state,isLoading=_this$state.isLoading,show=_this$state.show,target=_this$state.target;return React.createElement(Modal,{className:\"change-p-popUp\",show:this.state.cpModal,onHide:this.closeCPModal,backdrop:\"static\",keyboard:false},React.createElement(Modal.Body,null,React.createElement(\"div\",{className:\"centeredBox\"},React.createElement(\"form\",{className:\"forgotPasswordForm p-5 p-relative\"},React.createElement(ButtonToolbar,null,React.createElement(OverlayTrigger,{key:\"bottom\",placement:\"bottom\",overlay:React.createElement(Tooltip,{id:\"bottom\"},validationMessages.passwordPattern)},React.createElement(\"span\",{className:\"icon-info once-info\",variant:\"secondary\"}))),React.createElement(\"div\",{className:\"formIcon\"},React.createElement(\"span\",{className:\"icon-change_password\"},React.createElement(\"span\",{className:\"path1\"}),React.createElement(\"span\",{className:\"path2\"}))),React.createElement(FormGroup,null,React.createElement(\"legend\",{className:\"text-center\"},\"Change Password\")),React.createElement(FormGroup,{className:this.getClasses('oldPassword')},React.createElement(InputGroup,null,React.createElement(InputGroup.Addon,null,React.createElement(\"span\",{className:\"icon-password\"})),React.createElement(FormControl,{type:\"password\",placeholder:\"Current password\",name:\"oldPassword\",value:this.state.oldPassword,onChange:this.handleChange,maxLength:\"20\",onKeyPress:this.submitData})),renderMessage(this.props.getValidationMessages('oldPassword'))),React.createElement(FormGroup,{className:this.getClasses('newPassword')},React.createElement(InputGroup,null,React.createElement(InputGroup.Addon,null,React.createElement(\"span\",{className:\"icon-password\"})),React.createElement(FormControl,{type:\"password\",placeholder:\"New password\",name:\"newPassword\",value:this.state.newPassword,onChange:this.handleChange,maxLength:\"20\",onKeyPress:this.submitData})),renderMessage(this.props.getValidationMessages('newPassword'))),React.createElement(FormGroup,{className:this.getClasses('confirmNewPassword')},React.createElement(InputGroup,null,React.createElement(InputGroup.Addon,null,React.createElement(\"span\",{className:\"icon-password\"})),React.createElement(FormControl,{type:\"password\",placeholder:\"Confirm new password\",name:\"confirmNewPassword\",value:this.state.confirmNewPassword,onChange:this.handleChange,maxLength:\"20\",onKeyPress:this.submitData})),renderMessage(this.props.getValidationMessages('confirmNewPassword'))),React.createElement(FormGroup,{className:\"centeredBox\"},React.createElement(Button,{bsStyle:\"primary\",className:\"no-bold no-round btn btn-primary \",disabled:isLoading,onClick:!isLoading?this.handleButtonState:null},isLoading?'In Progress...':'Save'),' ',\"\\xA0\\xA0\",React.createElement(Button,{bsStyle:\"default\"// disabled={\n//   this.props.isPasswordChanged === false ? true : false\n// }\n,className:\"no-bold no-round btn btn-primary\",onClick:this.closeCPModal},\"Cancel\"))))));}}]);return changePassword;}(Component);changePassword=validation(strategy)(changePassword);var mapDispatchToProps=function mapDispatchToProps(dispatch){return bindActionCreators({actionChangePasswordStatus:actionChangePasswordStatus},dispatch);};export default connect(null,mapDispatchToProps)(changePassword);","map":{"version":3,"sources":["/home/ank/Desktop/therapidhiregit/therapidhireui/TheRapidHireUI/src/common/changePassword/changePassword.js"],"names":["React","Component","Button","FormGroup","InputGroup","FormControl","Modal","ButtonToolbar","OverlayTrigger","Tooltip","validation","strategy","classnames","connect","bindActionCreators","theRapidHireApiService","renderMessage","encrypt","decrypt","setLocalStorage","CONSTANTS","actionChangePasswordStatus","validationMessages","regExpressions","changePassword","props","closeCPModal","setState","cpModal","closeCPComponent","submitData","event","key","preventDefault","handleButtonState","getValidatorData","state","getClasses","field","error","isValid","handleChange","target","name","value","handleResetForm","initialState","isLoading","oldPassword","newPassword","confirmNewPassword","bind","handleSubmit","validatorTypes","createSchema","passwordPattern","password","same","console","log","location","pass","self","validate","trim","data","then","response","status","catch","err","show","getValidationMessages","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport {\r\n  Button,\r\n  FormGroup,\r\n  InputGroup,\r\n  FormControl,\r\n  Modal,\r\n  ButtonToolbar,\r\n  OverlayTrigger,\r\n  Tooltip\r\n} from 'react-bootstrap';\r\nimport validation from 'react-validation-mixin';\r\nimport strategy from 'react-validatorjs-strategy';\r\nimport classnames from 'classnames';\r\nimport { connect } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\nimport theRapidHireApiService from '../core/api/apiService';\r\nimport {\r\n  renderMessage,\r\n  encrypt,\r\n  decrypt,\r\n  setLocalStorage\r\n} from '../commonFunctions';\r\nimport CONSTANTS from '../core/config/appConfig';\r\nimport { actionChangePasswordStatus } from '../../common/core/redux/actions';\r\nlet validationMessages = CONSTANTS.validationMessages;\r\nlet regExpressions = CONSTANTS.regExpressions;\r\n\r\nclass changePassword extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      isLoading: false,\r\n      oldPassword: '',\r\n      newPassword: '',\r\n      confirmNewPassword: '',\r\n      cpModal: true\r\n    };\r\n\r\n    this.initialState = this.state;\r\n\r\n    this.handleButtonState = this.handleButtonState.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n    this.getValidatorData = this.getValidatorData.bind(this);\r\n    this.getClasses = this.getClasses.bind(this);\r\n\r\n    this.validatorTypes = strategy.createSchema(\r\n      {\r\n        oldPassword: 'required',\r\n        newPassword: ['required', 'regex:' + regExpressions.passwordPattern],\r\n        confirmNewPassword: 'required|same:newPassword'\r\n      },\r\n      {\r\n        'required.oldPassword': validationMessages.password.oldPassword,\r\n        'required.newPassword': validationMessages.password.newPassword,\r\n        'regex.newPassword': validationMessages.password.passwordPattern,\r\n        'required.confirmNewPassword':\r\n          validationMessages.password.confirmNewPassword,\r\n        'same.confirmNewPassword': validationMessages.password.same\r\n      }\r\n    );\r\n  }\r\n\r\n  componentDidMount() {\r\n    console.log(this.props);\r\n    if (\r\n      this.props.location &&\r\n      this.props.location.state &&\r\n      this.props.location.state.pass\r\n    ) {\r\n      let password = decrypt(this.props.location.state.pass);\r\n      console.log(password);\r\n      if (password) {\r\n        this.setState({\r\n          oldPassword: password\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  closeCPModal = () => {\r\n    this.setState({ cpModal: false });\r\n    this.props.closeCPComponent();\r\n    setLocalStorage('isPasswordPopupClose', true);\r\n  };\r\n\r\n  submitData = event => {\r\n    if (event.key === 'Enter') {\r\n      event.preventDefault();\r\n      this.handleButtonState();\r\n    }\r\n  };\r\n\r\n  getValidatorData = () => {\r\n    return this.state;\r\n  };\r\n\r\n  getClasses = field => {\r\n    return classnames({\r\n      error: !this.props.isValid(field)\r\n    });\r\n  };\r\n\r\n  handleChange = event => {\r\n    this.setState({ [event.target.name]: event.target.value });\r\n  };\r\n\r\n  handleResetForm = () => {\r\n    this.setState(this.initialState);\r\n  };\r\n\r\n  handleButtonState() {\r\n    let self = this;\r\n    self.props.validate(function(error) {\r\n      if (!error) {\r\n        self.setState({ isLoading: true });\r\n        self.handleSubmit();\r\n      }\r\n    });\r\n  }\r\n\r\n  handleSubmit() {\r\n    let self = this;\r\n    let oldPassword = encrypt(this.state.oldPassword.trim());\r\n    let newPassword = encrypt(this.state.newPassword.trim());\r\n\r\n    let data = {\r\n      oldPassword,\r\n      newPassword\r\n    };\r\n\r\n    theRapidHireApiService('changePassword', data)\r\n      .then(response => {\r\n        if (response.data.status === 'Success') {\r\n          self.props.closeCPComponent();\r\n          self.props.actionChangePasswordStatus();\r\n          self.handleResetForm();\r\n          self.setState({ cpModal: false });\r\n        } else {\r\n          self.handleResetForm();\r\n        }\r\n      })\r\n      .catch(err => {\r\n        self.handleResetForm();\r\n        console.log(err);\r\n      });\r\n  }\r\n\r\n  render() {\r\n    const { isLoading, show, target } = this.state;\r\n\r\n    return (\r\n      <Modal\r\n        className=\"change-p-popUp\"\r\n        show={this.state.cpModal}\r\n        onHide={this.closeCPModal}\r\n        backdrop=\"static\"\r\n        keyboard={false}\r\n      >\r\n        <Modal.Body>\r\n          <div className=\"centeredBox\">\r\n            <form className=\"forgotPasswordForm p-5 p-relative\">\r\n              {/* <span className=\"icon-info once-info\"> */}\r\n              <ButtonToolbar>\r\n                <OverlayTrigger\r\n                  key=\"bottom\"\r\n                  placement=\"bottom\"\r\n                  overlay={\r\n                    <Tooltip id=\"bottom\">\r\n                      {validationMessages.passwordPattern}\r\n                    </Tooltip>\r\n                  }\r\n                >\r\n                  <span className=\"icon-info once-info\" variant=\"secondary\" />\r\n                </OverlayTrigger>\r\n              </ButtonToolbar>\r\n\r\n              <div className=\"formIcon\">\r\n                <span className=\"icon-change_password\">\r\n                  <span className=\"path1\" />\r\n                  <span className=\"path2\" />\r\n                </span>\r\n              </div>\r\n              <FormGroup>\r\n                <legend className=\"text-center\">Change Password</legend>\r\n              </FormGroup>\r\n              <FormGroup className={this.getClasses('oldPassword')}>\r\n                <InputGroup>\r\n                  <InputGroup.Addon>\r\n                    <span className=\"icon-password\" />\r\n                  </InputGroup.Addon>\r\n                  <FormControl\r\n                    type=\"password\"\r\n                    placeholder=\"Current password\"\r\n                    name=\"oldPassword\"\r\n                    value={this.state.oldPassword}\r\n                    onChange={this.handleChange}\r\n                    maxLength=\"20\"\r\n                    onKeyPress={this.submitData}\r\n                  />\r\n                </InputGroup>\r\n                {renderMessage(this.props.getValidationMessages('oldPassword'))}\r\n              </FormGroup>\r\n\r\n              <FormGroup className={this.getClasses('newPassword')}>\r\n                <InputGroup>\r\n                  <InputGroup.Addon>\r\n                    <span className=\"icon-password\" />\r\n                  </InputGroup.Addon>\r\n                  <FormControl\r\n                    type=\"password\"\r\n                    placeholder=\"New password\"\r\n                    name=\"newPassword\"\r\n                    value={this.state.newPassword}\r\n                    onChange={this.handleChange}\r\n                    maxLength=\"20\"\r\n                    onKeyPress={this.submitData}\r\n                  />\r\n                </InputGroup>\r\n                {renderMessage(this.props.getValidationMessages('newPassword'))}\r\n              </FormGroup>\r\n\r\n              <FormGroup className={this.getClasses('confirmNewPassword')}>\r\n                <InputGroup>\r\n                  <InputGroup.Addon>\r\n                    <span className=\"icon-password\" />\r\n                  </InputGroup.Addon>\r\n                  <FormControl\r\n                    type=\"password\"\r\n                    placeholder=\"Confirm new password\"\r\n                    name=\"confirmNewPassword\"\r\n                    value={this.state.confirmNewPassword}\r\n                    onChange={this.handleChange}\r\n                    maxLength=\"20\"\r\n                    onKeyPress={this.submitData}\r\n                  />\r\n                </InputGroup>\r\n                {renderMessage(\r\n                  this.props.getValidationMessages('confirmNewPassword')\r\n                )}\r\n              </FormGroup>\r\n              <FormGroup className=\"centeredBox\">\r\n                <Button\r\n                  bsStyle=\"primary\"\r\n                  className=\"no-bold no-round btn btn-primary \"\r\n                  disabled={isLoading}\r\n                  onClick={!isLoading ? this.handleButtonState : null}\r\n                >\r\n                  {isLoading ? 'In Progress...' : 'Save'}\r\n                </Button>{' '}\r\n                &nbsp;&nbsp;\r\n                <Button\r\n                  bsStyle=\"default\"\r\n                  // disabled={\r\n                  //   this.props.isPasswordChanged === false ? true : false\r\n                  // }\r\n                  className=\"no-bold no-round btn btn-primary\"\r\n                  onClick={this.closeCPModal}\r\n                >\r\n                  Cancel\r\n                </Button>\r\n              </FormGroup>\r\n            </form>\r\n          </div>\r\n        </Modal.Body>\r\n      </Modal>\r\n    );\r\n  }\r\n}\r\n\r\nchangePassword = validation(strategy)(changePassword);\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return bindActionCreators(\r\n    {\r\n      actionChangePasswordStatus\r\n    },\r\n    dispatch\r\n  );\r\n};\r\n\r\nexport default connect(\r\n  null,\r\n  mapDispatchToProps\r\n)(changePassword);\r\n"]},"metadata":{},"sourceType":"module"}