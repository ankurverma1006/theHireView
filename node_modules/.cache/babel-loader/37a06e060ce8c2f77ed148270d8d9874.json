{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ankur\\\\Desktop\\\\therapidhire\\\\therapidhireui\\\\TheRapidHireUI\\\\src\\\\common\\\\changePassword\\\\changePassword.js\";\nimport React, { Component } from 'react';\nimport { Button, FormGroup, InputGroup, FormControl, Modal, ButtonToolbar, OverlayTrigger, Tooltip } from 'react-bootstrap';\nimport validation from 'react-validation-mixin';\nimport strategy from 'react-validatorjs-strategy';\nimport classnames from 'classnames';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport theRapidHireApiService from '../core/api/apiService';\nimport { renderMessage, encrypt, decrypt, setLocalStorage } from '../commonFunctions';\nimport CONSTANTS from '../core/config/appConfig';\nimport { actionChangePasswordStatus } from '../../common/core/redux/actions';\nlet validationMessages = CONSTANTS.validationMessages;\nlet regExpressions = CONSTANTS.regExpressions;\n\nclass changePassword extends Component {\n  constructor(props) {\n    super(props);\n\n    this.closeCPModal = () => {\n      this.setState({\n        cpModal: false\n      });\n      this.props.closeCPComponent();\n      setLocalStorage('isPasswordPopupClose', true);\n    };\n\n    this.submitData = event => {\n      if (event.key === 'Enter') {\n        event.preventDefault();\n        this.handleButtonState();\n      }\n    };\n\n    this.getValidatorData = () => {\n      return this.state;\n    };\n\n    this.getClasses = field => {\n      return classnames({\n        error: !this.props.isValid(field)\n      });\n    };\n\n    this.handleChange = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n\n    this.handleResetForm = () => {\n      this.setState(this.initialState);\n    };\n\n    this.state = {\n      isLoading: false,\n      oldPassword: '',\n      newPassword: '',\n      confirmNewPassword: '',\n      cpModal: true\n    };\n    this.initialState = this.state;\n    this.handleButtonState = this.handleButtonState.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.getValidatorData = this.getValidatorData.bind(this);\n    this.getClasses = this.getClasses.bind(this);\n    this.validatorTypes = strategy.createSchema({\n      oldPassword: 'required',\n      newPassword: ['required', 'regex:' + regExpressions.passwordPattern],\n      confirmNewPassword: 'required|same:newPassword'\n    }, {\n      'required.oldPassword': validationMessages.password.oldPassword,\n      'required.newPassword': validationMessages.password.newPassword,\n      'regex.newPassword': validationMessages.password.passwordPattern,\n      'required.confirmNewPassword': validationMessages.password.confirmNewPassword,\n      'same.confirmNewPassword': validationMessages.password.same\n    });\n  }\n\n  componentDidMount() {\n    console.log(this.props);\n\n    if (this.props.location && this.props.location.state && this.props.location.state.pass) {\n      let password = decrypt(this.props.location.state.pass);\n      console.log(password);\n\n      if (password) {\n        this.setState({\n          oldPassword: password\n        });\n      }\n    }\n  }\n\n  handleButtonState() {\n    let self = this;\n    self.props.validate(function (error) {\n      if (!error) {\n        self.setState({\n          isLoading: true\n        });\n        self.handleSubmit();\n      }\n    });\n  }\n\n  handleSubmit() {\n    let self = this;\n    let oldPassword = encrypt(this.state.oldPassword.trim());\n    let newPassword = encrypt(this.state.newPassword.trim());\n    let data = {\n      oldPassword,\n      newPassword\n    };\n    theRapidHireApiService('changePassword', data).then(response => {\n      if (response.data.status === 'Success') {\n        self.props.closeCPComponent();\n        self.props.actionChangePasswordStatus();\n        self.handleResetForm();\n        self.setState({\n          cpModal: false\n        });\n      } else {\n        self.handleResetForm();\n      }\n    }).catch(err => {\n      self.handleResetForm();\n      console.log(err);\n    });\n  }\n\n  render() {\n    const _this$state = this.state,\n          isLoading = _this$state.isLoading,\n          show = _this$state.show,\n          target = _this$state.target;\n    return React.createElement(Modal, {\n      className: \"change-p-popUp\",\n      show: this.state.cpModal,\n      onHide: this.closeCPModal,\n      backdrop: \"static\",\n      keyboard: false,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }, React.createElement(Modal.Body, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"centeredBox\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      className: \"forgotPasswordForm p-5 p-relative\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    }, React.createElement(ButtonToolbar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    }, React.createElement(OverlayTrigger, {\n      key: \"bottom\",\n      placement: \"bottom\",\n      overlay: React.createElement(Tooltip, {\n        id: \"bottom\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170\n        },\n        __self: this\n      }, validationMessages.passwordPattern),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"icon-info once-info\",\n      variant: \"secondary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      className: \"formIcon\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"icon-change_password\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"path1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      className: \"path2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }))), React.createElement(FormGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185\n      },\n      __self: this\n    }, React.createElement(\"legend\", {\n      className: \"text-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186\n      },\n      __self: this\n    }, \"Change Password\")), React.createElement(FormGroup, {\n      className: this.getClasses('oldPassword'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    }, React.createElement(InputGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189\n      },\n      __self: this\n    }, React.createElement(InputGroup.Addon, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"icon-password\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191\n      },\n      __self: this\n    })), React.createElement(FormControl, {\n      type: \"password\",\n      placeholder: \"Current password\",\n      name: \"oldPassword\",\n      value: this.state.oldPassword,\n      onChange: this.handleChange,\n      maxLength: \"20\",\n      onKeyPress: this.submitData,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193\n      },\n      __self: this\n    })), renderMessage(this.props.getValidationMessages('oldPassword'))), React.createElement(FormGroup, {\n      className: this.getClasses('newPassword'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206\n      },\n      __self: this\n    }, React.createElement(InputGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207\n      },\n      __self: this\n    }, React.createElement(InputGroup.Addon, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"icon-password\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209\n      },\n      __self: this\n    })), React.createElement(FormControl, {\n      type: \"password\",\n      placeholder: \"New password\",\n      name: \"newPassword\",\n      value: this.state.newPassword,\n      onChange: this.handleChange,\n      maxLength: \"20\",\n      onKeyPress: this.submitData,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211\n      },\n      __self: this\n    })), renderMessage(this.props.getValidationMessages('newPassword'))), React.createElement(FormGroup, {\n      className: this.getClasses('confirmNewPassword'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224\n      },\n      __self: this\n    }, React.createElement(InputGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225\n      },\n      __self: this\n    }, React.createElement(InputGroup.Addon, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"icon-password\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227\n      },\n      __self: this\n    })), React.createElement(FormControl, {\n      type: \"password\",\n      placeholder: \"Confirm new password\",\n      name: \"confirmNewPassword\",\n      value: this.state.confirmNewPassword,\n      onChange: this.handleChange,\n      maxLength: \"20\",\n      onKeyPress: this.submitData,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229\n      },\n      __self: this\n    })), renderMessage(this.props.getValidationMessages('confirmNewPassword'))), React.createElement(FormGroup, {\n      className: \"centeredBox\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243\n      },\n      __self: this\n    }, React.createElement(Button, {\n      bsStyle: \"primary\",\n      className: \"no-bold no-round btn btn-primary \",\n      disabled: isLoading,\n      onClick: !isLoading ? this.handleButtonState : null,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244\n      },\n      __self: this\n    }, isLoading ? 'In Progress...' : 'Save'), ' ', \"\\xA0\\xA0\", React.createElement(Button, {\n      bsStyle: \"default\" // disabled={\n      //   this.props.isPasswordChanged === false ? true : false\n      // }\n      ,\n      className: \"no-bold no-round btn btn-primary\",\n      onClick: this.closeCPModal,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253\n      },\n      __self: this\n    }, \"Cancel\"))))));\n  }\n\n}\n\nchangePassword = validation(strategy)(changePassword);\n\nconst mapDispatchToProps = dispatch => {\n  return bindActionCreators({\n    actionChangePasswordStatus\n  }, dispatch);\n};\n\nexport default connect(null, mapDispatchToProps)(changePassword);","map":{"version":3,"sources":["C:\\Users\\Ankur\\Desktop\\therapidhire\\therapidhireui\\TheRapidHireUI\\src\\common\\changePassword\\changePassword.js"],"names":["React","Component","Button","FormGroup","InputGroup","FormControl","Modal","ButtonToolbar","OverlayTrigger","Tooltip","validation","strategy","classnames","connect","bindActionCreators","theRapidHireApiService","renderMessage","encrypt","decrypt","setLocalStorage","CONSTANTS","actionChangePasswordStatus","validationMessages","regExpressions","changePassword","constructor","props","closeCPModal","setState","cpModal","closeCPComponent","submitData","event","key","preventDefault","handleButtonState","getValidatorData","state","getClasses","field","error","isValid","handleChange","target","name","value","handleResetForm","initialState","isLoading","oldPassword","newPassword","confirmNewPassword","bind","handleSubmit","validatorTypes","createSchema","passwordPattern","password","same","componentDidMount","console","log","location","pass","self","validate","trim","data","then","response","status","catch","err","render","show","getValidationMessages","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport {\r\n  Button,\r\n  FormGroup,\r\n  InputGroup,\r\n  FormControl,\r\n  Modal,\r\n  ButtonToolbar,\r\n  OverlayTrigger,\r\n  Tooltip\r\n} from 'react-bootstrap';\r\nimport validation from 'react-validation-mixin';\r\nimport strategy from 'react-validatorjs-strategy';\r\nimport classnames from 'classnames';\r\nimport { connect } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\nimport theRapidHireApiService from '../core/api/apiService';\r\nimport {\r\n  renderMessage,\r\n  encrypt,\r\n  decrypt,\r\n  setLocalStorage\r\n} from '../commonFunctions';\r\nimport CONSTANTS from '../core/config/appConfig';\r\nimport { actionChangePasswordStatus } from '../../common/core/redux/actions';\r\nlet validationMessages = CONSTANTS.validationMessages;\r\nlet regExpressions = CONSTANTS.regExpressions;\r\n\r\nclass changePassword extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      isLoading: false,\r\n      oldPassword: '',\r\n      newPassword: '',\r\n      confirmNewPassword: '',\r\n      cpModal: true\r\n    };\r\n\r\n    this.initialState = this.state;\r\n\r\n    this.handleButtonState = this.handleButtonState.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n    this.getValidatorData = this.getValidatorData.bind(this);\r\n    this.getClasses = this.getClasses.bind(this);\r\n\r\n    this.validatorTypes = strategy.createSchema(\r\n      {\r\n        oldPassword: 'required',\r\n        newPassword: ['required', 'regex:' + regExpressions.passwordPattern],\r\n        confirmNewPassword: 'required|same:newPassword'\r\n      },\r\n      {\r\n        'required.oldPassword': validationMessages.password.oldPassword,\r\n        'required.newPassword': validationMessages.password.newPassword,\r\n        'regex.newPassword': validationMessages.password.passwordPattern,\r\n        'required.confirmNewPassword':\r\n          validationMessages.password.confirmNewPassword,\r\n        'same.confirmNewPassword': validationMessages.password.same\r\n      }\r\n    );\r\n  }\r\n\r\n  componentDidMount() {\r\n    console.log(this.props);\r\n    if (\r\n      this.props.location &&\r\n      this.props.location.state &&\r\n      this.props.location.state.pass\r\n    ) {\r\n      let password = decrypt(this.props.location.state.pass);\r\n      console.log(password);\r\n      if (password) {\r\n        this.setState({\r\n          oldPassword: password\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  closeCPModal = () => {\r\n    this.setState({ cpModal: false });\r\n    this.props.closeCPComponent();\r\n    setLocalStorage('isPasswordPopupClose', true);\r\n  };\r\n\r\n  submitData = event => {\r\n    if (event.key === 'Enter') {\r\n      event.preventDefault();\r\n      this.handleButtonState();\r\n    }\r\n  };\r\n\r\n  getValidatorData = () => {\r\n    return this.state;\r\n  };\r\n\r\n  getClasses = field => {\r\n    return classnames({\r\n      error: !this.props.isValid(field)\r\n    });\r\n  };\r\n\r\n  handleChange = event => {\r\n    this.setState({ [event.target.name]: event.target.value });\r\n  };\r\n\r\n  handleResetForm = () => {\r\n    this.setState(this.initialState);\r\n  };\r\n\r\n  handleButtonState() {\r\n    let self = this;\r\n    self.props.validate(function(error) {\r\n      if (!error) {\r\n        self.setState({ isLoading: true });\r\n        self.handleSubmit();\r\n      }\r\n    });\r\n  }\r\n\r\n  handleSubmit() {\r\n    let self = this;\r\n    let oldPassword = encrypt(this.state.oldPassword.trim());\r\n    let newPassword = encrypt(this.state.newPassword.trim());\r\n\r\n    let data = {\r\n      oldPassword,\r\n      newPassword\r\n    };\r\n\r\n    theRapidHireApiService('changePassword', data)\r\n      .then(response => {\r\n        if (response.data.status === 'Success') {\r\n          self.props.closeCPComponent();\r\n          self.props.actionChangePasswordStatus();\r\n          self.handleResetForm();\r\n          self.setState({ cpModal: false });\r\n        } else {\r\n          self.handleResetForm();\r\n        }\r\n      })\r\n      .catch(err => {\r\n        self.handleResetForm();\r\n        console.log(err);\r\n      });\r\n  }\r\n\r\n  render() {\r\n    const { isLoading, show, target } = this.state;\r\n\r\n    return (\r\n      <Modal\r\n        className=\"change-p-popUp\"\r\n        show={this.state.cpModal}\r\n        onHide={this.closeCPModal}\r\n        backdrop=\"static\"\r\n        keyboard={false}\r\n      >\r\n        <Modal.Body>\r\n          <div className=\"centeredBox\">\r\n            <form className=\"forgotPasswordForm p-5 p-relative\">\r\n              {/* <span className=\"icon-info once-info\"> */}\r\n              <ButtonToolbar>\r\n                <OverlayTrigger\r\n                  key=\"bottom\"\r\n                  placement=\"bottom\"\r\n                  overlay={\r\n                    <Tooltip id=\"bottom\">\r\n                      {validationMessages.passwordPattern}\r\n                    </Tooltip>\r\n                  }\r\n                >\r\n                  <span className=\"icon-info once-info\" variant=\"secondary\" />\r\n                </OverlayTrigger>\r\n              </ButtonToolbar>\r\n\r\n              <div className=\"formIcon\">\r\n                <span className=\"icon-change_password\">\r\n                  <span className=\"path1\" />\r\n                  <span className=\"path2\" />\r\n                </span>\r\n              </div>\r\n              <FormGroup>\r\n                <legend className=\"text-center\">Change Password</legend>\r\n              </FormGroup>\r\n              <FormGroup className={this.getClasses('oldPassword')}>\r\n                <InputGroup>\r\n                  <InputGroup.Addon>\r\n                    <span className=\"icon-password\" />\r\n                  </InputGroup.Addon>\r\n                  <FormControl\r\n                    type=\"password\"\r\n                    placeholder=\"Current password\"\r\n                    name=\"oldPassword\"\r\n                    value={this.state.oldPassword}\r\n                    onChange={this.handleChange}\r\n                    maxLength=\"20\"\r\n                    onKeyPress={this.submitData}\r\n                  />\r\n                </InputGroup>\r\n                {renderMessage(this.props.getValidationMessages('oldPassword'))}\r\n              </FormGroup>\r\n\r\n              <FormGroup className={this.getClasses('newPassword')}>\r\n                <InputGroup>\r\n                  <InputGroup.Addon>\r\n                    <span className=\"icon-password\" />\r\n                  </InputGroup.Addon>\r\n                  <FormControl\r\n                    type=\"password\"\r\n                    placeholder=\"New password\"\r\n                    name=\"newPassword\"\r\n                    value={this.state.newPassword}\r\n                    onChange={this.handleChange}\r\n                    maxLength=\"20\"\r\n                    onKeyPress={this.submitData}\r\n                  />\r\n                </InputGroup>\r\n                {renderMessage(this.props.getValidationMessages('newPassword'))}\r\n              </FormGroup>\r\n\r\n              <FormGroup className={this.getClasses('confirmNewPassword')}>\r\n                <InputGroup>\r\n                  <InputGroup.Addon>\r\n                    <span className=\"icon-password\" />\r\n                  </InputGroup.Addon>\r\n                  <FormControl\r\n                    type=\"password\"\r\n                    placeholder=\"Confirm new password\"\r\n                    name=\"confirmNewPassword\"\r\n                    value={this.state.confirmNewPassword}\r\n                    onChange={this.handleChange}\r\n                    maxLength=\"20\"\r\n                    onKeyPress={this.submitData}\r\n                  />\r\n                </InputGroup>\r\n                {renderMessage(\r\n                  this.props.getValidationMessages('confirmNewPassword')\r\n                )}\r\n              </FormGroup>\r\n              <FormGroup className=\"centeredBox\">\r\n                <Button\r\n                  bsStyle=\"primary\"\r\n                  className=\"no-bold no-round btn btn-primary \"\r\n                  disabled={isLoading}\r\n                  onClick={!isLoading ? this.handleButtonState : null}\r\n                >\r\n                  {isLoading ? 'In Progress...' : 'Save'}\r\n                </Button>{' '}\r\n                &nbsp;&nbsp;\r\n                <Button\r\n                  bsStyle=\"default\"\r\n                  // disabled={\r\n                  //   this.props.isPasswordChanged === false ? true : false\r\n                  // }\r\n                  className=\"no-bold no-round btn btn-primary\"\r\n                  onClick={this.closeCPModal}\r\n                >\r\n                  Cancel\r\n                </Button>\r\n              </FormGroup>\r\n            </form>\r\n          </div>\r\n        </Modal.Body>\r\n      </Modal>\r\n    );\r\n  }\r\n}\r\n\r\nchangePassword = validation(strategy)(changePassword);\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return bindActionCreators(\r\n    {\r\n      actionChangePasswordStatus\r\n    },\r\n    dispatch\r\n  );\r\n};\r\n\r\nexport default connect(\r\n  null,\r\n  mapDispatchToProps\r\n)(changePassword);\r\n"]},"metadata":{},"sourceType":"module"}