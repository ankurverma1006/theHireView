{"ast":null,"code":"import MediaDevice from './MediaDevice';\nimport Emitter from './Emitter';\nimport socket from './socket';\nwindow.moz = !!navigator.mozGetUserMedia;\nvar chromeVersion = !!navigator.mozGetUserMedia ? 0 : parseInt(navigator.userAgent.match(/Chrom(e|ium)\\/([0-9]+)\\./)[2]);\nlet moz = window.moz;\nvar iceServers = [];\n\nif (moz) {\n  iceServers.push({\n    url: 'stun:23.21.150.121'\n  });\n  iceServers.push({\n    url: 'stun:stun.services.mozilla.com'\n  });\n}\n\nif (!moz) {\n  iceServers.push({\n    url: 'stun:stun.l.google.com:19302'\n  });\n  iceServers.push({\n    url: 'stun:stun.anyfirewall.com:3478'\n  });\n}\n\nif (!moz && chromeVersion < 28) {\n  iceServers.push({\n    url: 'turn:homeo@turn.bistri.com:80',\n    credential: 'homeo'\n  });\n}\n\nif (!moz && chromeVersion >= 28) {\n  iceServers.push({\n    url: 'turn:turn.bistri.com:80',\n    credential: 'homeo',\n    username: 'homeo'\n  });\n  iceServers.push({\n    url: 'turn:turn.anyfirewall.com:443?transport=tcp',\n    credential: 'webrtc',\n    username: 'webrtc'\n  });\n}\n\nconst PC_CONFIG = {\n  iceServers: iceServers\n}; // [{ urls: ['stun:stun.l.google.com:19302'] }] };\n\nclass PeerConnection extends Emitter {\n  /**\r\n   * Create a PeerConnection.\r\n   * @param {String} friendID - ID of the friend you want to call.\r\n   */\n  constructor(friendID) {\n    super();\n    this.pc = new RTCPeerConnection(PC_CONFIG);\n    console.log('constructor ', this.friendID);\n\n    this.pc.onicecandidate = event => socket.emit('call', {\n      to: this.friendID,\n      candidate: event.candidate\n    });\n\n    this.pc.onaddstream = event => this.emit('peerStream', event.stream);\n\n    this.mediaDevice = new MediaDevice();\n    this.friendID = friendID;\n  }\n  /**\r\n   * Starting the call\r\n   * @param {Boolean} isCaller\r\n   * @param {Object} config - configuration for the call {audio: boolean, video: boolean}\r\n   */\n\n\n  start(isCaller, config) {\n    console.log('start  call');\n    this.mediaDevice.on('stream', stream => {\n      this.pc.addStream(stream);\n      this.emit('localStream', stream);\n      if (isCaller) socket.emit('request', {\n        to: this.friendID\n      });else this.createOffer();\n    }).start(config);\n    return this;\n  }\n  /**\r\n   * Stop the call\r\n   * @param {Boolean} isStarter\r\n   */\n\n\n  stop(isStarter) {\n    if (isStarter) socket.emit('end', {\n      to: this.friendID\n    });\n    this.mediaDevice.stop();\n    this.pc.close();\n    this.pc = null;\n    this.off();\n    return this;\n  }\n\n  createOffer() {\n    this.pc.createOffer().then(this.getDescription.bind(this)).catch(err => console.log(err));\n    return this;\n  }\n\n  createAnswer() {\n    this.pc.createAnswer().then(this.getDescription.bind(this)).catch(err => console.log(err));\n    return this;\n  }\n\n  getDescription(desc) {\n    console.log('desc - - ', desc);\n    this.pc.setLocalDescription(desc);\n    socket.emit('call', {\n      to: this.friendID,\n      sdp: desc\n    });\n    return this;\n  }\n  /**\r\n   * @param {Object} sdp - Session description\r\n   */\n\n\n  setRemoteDescription(sdp) {\n    const rtcSdp = new RTCSessionDescription(sdp);\n    this.pc.setRemoteDescription(rtcSdp);\n    return this;\n  }\n  /**\r\n   * @param {Object} candidate - ICE Candidate\r\n   */\n\n\n  addIceCandidate(candidate) {\n    if (candidate) {\n      const iceCandidate = new RTCIceCandidate(candidate);\n      this.pc.addIceCandidate(iceCandidate);\n    }\n\n    return this;\n  }\n\n}\n\nexport default PeerConnection;","map":{"version":3,"sources":["C:\\Users\\Ankur\\Desktop\\therapidhire\\therapidhireui\\TheRapidHireUI\\src\\videoChat\\js\\PeerConnection.js"],"names":["MediaDevice","Emitter","socket","window","moz","navigator","mozGetUserMedia","chromeVersion","parseInt","userAgent","match","iceServers","push","url","credential","username","PC_CONFIG","PeerConnection","constructor","friendID","pc","RTCPeerConnection","console","log","onicecandidate","event","emit","to","candidate","onaddstream","stream","mediaDevice","start","isCaller","config","on","addStream","createOffer","stop","isStarter","close","off","then","getDescription","bind","catch","err","createAnswer","desc","setLocalDescription","sdp","setRemoteDescription","rtcSdp","RTCSessionDescription","addIceCandidate","iceCandidate","RTCIceCandidate"],"mappings":"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","sourcesContent":["import MediaDevice from './MediaDevice';\r\nimport Emitter from './Emitter';\r\nimport socket from './socket';\r\n\r\nwindow.moz = !!navigator.mozGetUserMedia;\r\nvar chromeVersion = !!navigator.mozGetUserMedia\r\n  ? 0\r\n  : parseInt(navigator.userAgent.match(/Chrom(e|ium)\\/([0-9]+)\\./)[2]);\r\nlet moz = window.moz;\r\nvar iceServers = [];\r\n\r\nif (moz) {\r\n  iceServers.push({\r\n    url: 'stun:23.21.150.121'\r\n  });\r\n\r\n  iceServers.push({\r\n    url: 'stun:stun.services.mozilla.com'\r\n  });\r\n}\r\n\r\nif (!moz) {\r\n  iceServers.push({\r\n    url: 'stun:stun.l.google.com:19302'\r\n  });\r\n\r\n  iceServers.push({\r\n    url: 'stun:stun.anyfirewall.com:3478'\r\n  });\r\n}\r\n\r\nif (!moz && chromeVersion < 28) {\r\n  iceServers.push({\r\n    url: 'turn:homeo@turn.bistri.com:80',\r\n    credential: 'homeo'\r\n  });\r\n}\r\n\r\nif (!moz && chromeVersion >= 28) {\r\n  iceServers.push({\r\n    url: 'turn:turn.bistri.com:80',\r\n    credential: 'homeo',\r\n    username: 'homeo'\r\n  });\r\n\r\n  iceServers.push({\r\n    url: 'turn:turn.anyfirewall.com:443?transport=tcp',\r\n    credential: 'webrtc',\r\n    username: 'webrtc'\r\n  });\r\n}\r\n\r\nconst PC_CONFIG = { iceServers: iceServers }; // [{ urls: ['stun:stun.l.google.com:19302'] }] };\r\n\r\nclass PeerConnection extends Emitter {\r\n  /**\r\n   * Create a PeerConnection.\r\n   * @param {String} friendID - ID of the friend you want to call.\r\n   */\r\n  constructor(friendID) {\r\n    super();\r\n    this.pc = new RTCPeerConnection(PC_CONFIG);\r\n\r\n    console.log('constructor ', this.friendID);\r\n\r\n    this.pc.onicecandidate = event =>\r\n      socket.emit('call', {\r\n        to: this.friendID,\r\n        candidate: event.candidate\r\n      });\r\n    this.pc.onaddstream = event => this.emit('peerStream', event.stream);\r\n\r\n    this.mediaDevice = new MediaDevice();\r\n    this.friendID = friendID;\r\n  }\r\n\r\n  /**\r\n   * Starting the call\r\n   * @param {Boolean} isCaller\r\n   * @param {Object} config - configuration for the call {audio: boolean, video: boolean}\r\n   */\r\n  start(isCaller, config) {\r\n    console.log('start  call');\r\n    this.mediaDevice\r\n      .on('stream', stream => {\r\n        this.pc.addStream(stream);\r\n        this.emit('localStream', stream);\r\n        if (isCaller) socket.emit('request', { to: this.friendID });\r\n        else this.createOffer();\r\n      })\r\n      .start(config);\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Stop the call\r\n   * @param {Boolean} isStarter\r\n   */\r\n  stop(isStarter) {\r\n    if (isStarter) socket.emit('end', { to: this.friendID });\r\n    this.mediaDevice.stop();\r\n    this.pc.close();\r\n    this.pc = null;\r\n    this.off();\r\n    return this;\r\n  }\r\n\r\n  createOffer() {\r\n    this.pc\r\n      .createOffer()\r\n      .then(this.getDescription.bind(this))\r\n      .catch(err => console.log(err));\r\n    return this;\r\n  }\r\n\r\n  createAnswer() {\r\n    this.pc\r\n      .createAnswer()\r\n      .then(this.getDescription.bind(this))\r\n      .catch(err => console.log(err));\r\n    return this;\r\n  }\r\n\r\n  getDescription(desc) {\r\n    console.log('desc - - ', desc);\r\n    this.pc.setLocalDescription(desc);\r\n    socket.emit('call', { to: this.friendID, sdp: desc });\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @param {Object} sdp - Session description\r\n   */\r\n  setRemoteDescription(sdp) {\r\n    const rtcSdp = new RTCSessionDescription(sdp);\r\n    this.pc.setRemoteDescription(rtcSdp);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @param {Object} candidate - ICE Candidate\r\n   */\r\n  addIceCandidate(candidate) {\r\n    if (candidate) {\r\n      const iceCandidate = new RTCIceCandidate(candidate);\r\n      this.pc.addIceCandidate(iceCandidate);\r\n    }\r\n    return this;\r\n  }\r\n}\r\n\r\nexport default PeerConnection;\r\n"]},"metadata":{},"sourceType":"module"}