{"ast":null,"code":"var _jsxFileName = \"/home/ank/Desktop/therapidhiregit/therapidhireui/TheRapidHireUI/src/common/cropper/imageCropper.js\";\nimport React, { Component } from 'react';\nimport Cropper from 'react-cropper';\nimport 'cropperjs/dist/cropper.css';\nimport { Button, Modal } from 'react-bootstrap';\nimport Select from 'react-select';\nimport CONSTANTS from '../../common/core/config/appConfig';\nimport _ from 'lodash';\nconst options = [{\n  value: CONSTANTS.mediaAlbum,\n  label: React.createElement(\"div\", {\n    className: \"adselectIcon\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12\n    },\n    __self: this\n  }, \"General \", React.createElement(\"span\", {\n    className: \"icon-image_tag\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13\n    },\n    __self: this\n  }))\n}, {\n  value: CONSTANTS.certificateAlbum,\n  label: React.createElement(\"div\", {\n    className: \"adselectIcon\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  }, \"Certificate \", React.createElement(\"span\", {\n    className: \"icon-certificate\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }))\n}, {\n  value: CONSTANTS.badgeAlbum,\n  label: React.createElement(\"div\", {\n    className: \"adselectIcon\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, \"Badge \", React.createElement(\"span\", {\n    className: \"icon-badges\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }))\n}, {\n  value: CONSTANTS.trophieAlbum,\n  label: React.createElement(\"div\", {\n    className: \"adselectIcon\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, \"Trophy \", React.createElement(\"span\", {\n    className: \"icon-trophy\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }))\n} // {\n//   value: 'Videos',\n//   label: (\n//     <div className=\"adselectIcon\">\n//       Videos <span className=\"icon-video_tag\" />\n//     </div>\n//   )\n// }\n];\n\nclass ImageCropper extends Component {\n  constructor(props) {\n    super(props);\n\n    this.closeCropModal = () => {\n      this.setState({\n        cropModal: false,\n        imageSource: ''\n      });\n    };\n\n    this.handleImageChange = event => {\n      const file = event.target.files[0];\n      const fileName = file.name;\n      const fileType = file.type;\n\n      if (file) {\n        let reader = new FileReader();\n        reader.readAsDataURL(event.target.files[0]);\n\n        reader.onload = event => {\n          this.setState({\n            imageSource: event.target.result,\n            imageName: fileName,\n            imageType: fileType\n          });\n        };\n      }\n    };\n\n    this.handleChange = selectedOption => {\n      if (selectedOption) {\n        let aspectRatio = 16 / 9;\n        let tagValue = selectedOption.value;\n\n        if (tagValue === CONSTANTS.mediaAlbum) {\n          aspectRatio = 16 / 9;\n        } else {\n          aspectRatio = 1 / 1;\n        }\n\n        this.setState({\n          selectedOption,\n          tagValue,\n          aspectRatio\n        });\n      }\n    };\n\n    this.state = {\n      cropModal: true,\n      cropBoxWidth: '',\n      cropBoxHeight: '',\n      imageSource: '',\n      imageName: '',\n      imageType: '',\n      modalSize: 'medium',\n      aspectRatio: '',\n      selectedOption: {\n        value: 'media',\n        label: React.createElement(\"div\", {\n          className: \"adselectIcon\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 66\n          },\n          __self: this\n        }, \"General \", React.createElement(\"span\", {\n          className: \"icon-image_tag\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 67\n          },\n          __self: this\n        }))\n      },\n      tagValue: ''\n    };\n  }\n\n  componentDidMount() {\n    let imageSource = this.props.imageSource;\n    let cropBoxWidth = this.props.cropBoxWidth;\n    let cropBoxHeight = this.props.cropBoxHeight;\n    let imageType = this.props.imageType;\n    let imageName = this.props.imageName;\n    let modalSize = this.props.modalSize;\n    let aspectRatio = this.props.aspectRatio;\n\n    if (imageSource !== '') {\n      this.setState({\n        imageSource,\n        imageName,\n        imageType,\n        cropBoxWidth,\n        cropBoxHeight,\n        modalSize,\n        aspectRatio\n      });\n    }\n\n    if (this.props.labelName) {\n      this.handleChange(this.state.selectedOption);\n    }\n  }\n\n  cropImage(action) {\n    let cropImageResult = this.refs.cropper && this.refs.cropper.getCroppedCanvas({\n      fillColor: '#fff',\n      imageSmoothingEnabled: false,\n      imageSmoothingQuality: 'high'\n    }).toDataURL(this.state.imageType);\n\n    if (cropImageResult !== '') {\n      let croppedImage = this.dataURLtoFile(cropImageResult, this.state.imageName);\n\n      if (this.props.labelName === 'ADD_MEDIA') {\n        this.props.uploadImageToAzure(croppedImage, this.state.tagValue);\n      } else {\n        this.props.uploadImageToAzure(croppedImage);\n      }\n\n      this.setState({\n        cropModal: false\n      });\n    } else {\n      this.props.uploadImageToAzure('');\n    }\n  }\n\n  dataURLtoFile(dataurl, filename) {\n    var arr = dataurl ? dataurl.split(',') : dataurl,\n        mime = arr[0].match(/:(.*?);/)[1],\n        bstr = atob(arr[1]),\n        n = bstr.length,\n        u8arr = new Uint8Array(n);\n\n    while (n--) {\n      u8arr[n] = bstr.charCodeAt(n);\n    }\n\n    var blob = new Blob([u8arr], {\n      type: this.state.imageType\n    });\n    blob.name = filename;\n    return blob; // return new File([u8arr], filename, { type: mime });\n  }\n\n  render() {\n    const selectedOption = this.state.selectedOption;\n    return React.createElement(Modal, {\n      bsSize: this.state.modalSize,\n      show: this.state.cropModal,\n      onHide: this.closeCropModal,\n      backdrop: \"static\",\n      keyboard: false,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }, React.createElement(Modal.Header, {\n      closeButton: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187\n      },\n      __self: this\n    }, React.createElement(Modal.Title, {\n      className: this.props.labelName === 'ADD_MEDIA' ? 'addMediaTxt' : 'subtitle text-center',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    }, this.props.labelName === 'ADD_MEDIA' ? 'ADD MEDIA' : 'Crop Photo')), React.createElement(Modal.Body, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198\n      },\n      __self: this\n    }, React.createElement(Cropper, {\n      className: \"img-responsive1\",\n      ref: \"cropper\",\n      minCropBoxWidth: this.state.cropBoxWidth,\n      minCropBoxHeight: this.state.cropBoxHeight,\n      src: this.state.imageSource,\n      style: {\n        height: 400,\n        width: '100%',\n        opacity: 1\n      },\n      aspectRatio: this.state.aspectRatio,\n      guides: true,\n      viewMode: 1,\n      background: false,\n      zoomable: true,\n      cropBoxMovable: false,\n      cropBoxResizable: false,\n      highlight: false,\n      dragMode: \"move\",\n      movable: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199\n      },\n      __self: this\n    })), React.createElement(Modal.Footer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"flex justify-content-between align-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"left\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220\n      },\n      __self: this\n    }, this.props.labelName === 'ADD_MEDIA' ? React.createElement(\"div\", {\n      className: \"custom-select selectAddAch\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"icon-down_arrow selectIcon\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223\n      },\n      __self: this\n    }), React.createElement(Select, {\n      className: \"form-control adfigCaption\",\n      placeholder: \"Select Media Type\",\n      value: selectedOption,\n      onChange: this.handleChange,\n      options: options,\n      clearable: false,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226\n      },\n      __self: this\n    })) : null), React.createElement(\"div\", {\n      className: \"right flex align-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"custom-upload mr-1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"file\",\n      accept: \"image/*\",\n      value: \"\",\n      onChange: this.handleImageChange.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239\n      },\n      __self: this\n    }), React.createElement(Button, {\n      bstyle: \"default\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246\n      },\n      __self: this\n    }, \"Change Photo\")), this.props.labelName ? React.createElement(Button, {\n      bsStyle: \"primary\",\n      onClick: _.debounce(event => this.cropImage(), 1000),\n      disabled: selectedOption ? false : true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249\n      },\n      __self: this\n    }, \"Apply\") : React.createElement(Button, {\n      bsStyle: \"primary\",\n      onClick: _.debounce(event => this.cropImage(), 1000),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258\n      },\n      __self: this\n    }, \"Apply\")))));\n  }\n\n}\n\nexport default ImageCropper;","map":{"version":3,"sources":["/home/ank/Desktop/therapidhiregit/therapidhireui/TheRapidHireUI/src/common/cropper/imageCropper.js"],"names":["React","Component","Cropper","Button","Modal","Select","CONSTANTS","_","options","value","mediaAlbum","label","certificateAlbum","badgeAlbum","trophieAlbum","ImageCropper","constructor","props","closeCropModal","setState","cropModal","imageSource","handleImageChange","event","file","target","files","fileName","name","fileType","type","reader","FileReader","readAsDataURL","onload","result","imageName","imageType","handleChange","selectedOption","aspectRatio","tagValue","state","cropBoxWidth","cropBoxHeight","modalSize","componentDidMount","labelName","cropImage","action","cropImageResult","refs","cropper","getCroppedCanvas","fillColor","imageSmoothingEnabled","imageSmoothingQuality","toDataURL","croppedImage","dataURLtoFile","uploadImageToAzure","dataurl","filename","arr","split","mime","match","bstr","atob","n","length","u8arr","Uint8Array","charCodeAt","blob","Blob","render","height","width","opacity","bind","debounce"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport Cropper from 'react-cropper';\r\nimport 'cropperjs/dist/cropper.css';\r\nimport { Button, Modal } from 'react-bootstrap';\r\nimport Select from 'react-select';\r\nimport CONSTANTS from '../../common/core/config/appConfig';\r\nimport _ from 'lodash';\r\nconst options = [\r\n  {\r\n    value: CONSTANTS.mediaAlbum,\r\n    label: (\r\n      <div className=\"adselectIcon\">\r\n        General <span className=\"icon-image_tag\" />\r\n      </div>\r\n    )\r\n  },\r\n  {\r\n    value: CONSTANTS.certificateAlbum,\r\n    label: (\r\n      <div className=\"adselectIcon\">\r\n        Certificate <span className=\"icon-certificate\" />\r\n      </div>\r\n    )\r\n  },\r\n  {\r\n    value: CONSTANTS.badgeAlbum,\r\n    label: (\r\n      <div className=\"adselectIcon\">\r\n        Badge <span className=\"icon-badges\" />\r\n      </div>\r\n    )\r\n  },\r\n  {\r\n    value: CONSTANTS.trophieAlbum,\r\n    label: (\r\n      <div className=\"adselectIcon\">\r\n        Trophy <span className=\"icon-trophy\" />\r\n      </div>\r\n    )\r\n  }\r\n\r\n  // {\r\n  //   value: 'Videos',\r\n  //   label: (\r\n  //     <div className=\"adselectIcon\">\r\n  //       Videos <span className=\"icon-video_tag\" />\r\n  //     </div>\r\n  //   )\r\n  // }\r\n];\r\nclass ImageCropper extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      cropModal: true,\r\n      cropBoxWidth: '',\r\n      cropBoxHeight: '',\r\n      imageSource: '',\r\n      imageName: '',\r\n      imageType: '',\r\n      modalSize: 'medium',\r\n      aspectRatio: '',\r\n      selectedOption: {\r\n        value: 'media',\r\n        label: (\r\n          <div className=\"adselectIcon\">\r\n            General <span className=\"icon-image_tag\" />\r\n          </div>\r\n        )\r\n      },\r\n      tagValue: ''\r\n    };\r\n  }\r\n\r\n  closeCropModal = () => {\r\n    this.setState({ cropModal: false, imageSource: '' });\r\n  };\r\n\r\n  componentDidMount() {\r\n    let imageSource = this.props.imageSource;\r\n    let cropBoxWidth = this.props.cropBoxWidth;\r\n    let cropBoxHeight = this.props.cropBoxHeight;\r\n    let imageType = this.props.imageType;\r\n    let imageName = this.props.imageName;\r\n    let modalSize = this.props.modalSize;\r\n    let aspectRatio = this.props.aspectRatio;\r\n\r\n    if (imageSource !== '') {\r\n      this.setState({\r\n        imageSource,\r\n        imageName,\r\n        imageType,\r\n        cropBoxWidth,\r\n        cropBoxHeight,\r\n        modalSize,\r\n        aspectRatio\r\n      });\r\n    }\r\n    if (this.props.labelName) {\r\n      this.handleChange(this.state.selectedOption);\r\n    }\r\n  }\r\n\r\n  handleImageChange = event => {\r\n    const file = event.target.files[0];\r\n    const fileName = file.name;\r\n    const fileType = file.type;\r\n    if (file) {\r\n      let reader = new FileReader();\r\n      reader.readAsDataURL(event.target.files[0]);\r\n      reader.onload = event => {\r\n        this.setState({\r\n          imageSource: event.target.result,\r\n          imageName: fileName,\r\n          imageType: fileType\r\n        });\r\n      };\r\n    }\r\n  };\r\n\r\n  cropImage(action) {\r\n    let cropImageResult = this.refs.cropper && this.refs.cropper\r\n      .getCroppedCanvas({\r\n        fillColor: '#fff',\r\n        imageSmoothingEnabled: false,\r\n        imageSmoothingQuality: 'high'\r\n      })\r\n      .toDataURL(this.state.imageType);\r\n\r\n    if (cropImageResult !== '') {\r\n      let croppedImage = this.dataURLtoFile(\r\n        cropImageResult,\r\n        this.state.imageName\r\n      );\r\n      if (this.props.labelName === 'ADD_MEDIA') {\r\n        this.props.uploadImageToAzure(croppedImage, this.state.tagValue);\r\n      } else {\r\n        this.props.uploadImageToAzure(croppedImage);\r\n      }\r\n\r\n      this.setState({\r\n        cropModal: false\r\n      });\r\n    } else {\r\n      this.props.uploadImageToAzure('');\r\n    }\r\n  }\r\n\r\n  dataURLtoFile(dataurl, filename) {\r\n    var arr = dataurl ? dataurl.split(',') : dataurl,\r\n      mime = arr[0].match(/:(.*?);/)[1],\r\n      bstr = atob(arr[1]),\r\n      n = bstr.length,\r\n      u8arr = new Uint8Array(n);\r\n    while (n--) {\r\n      u8arr[n] = bstr.charCodeAt(n);\r\n    }\r\n    var blob = new Blob([u8arr], { type: this.state.imageType });\r\n    blob.name = filename;\r\n    return blob;\r\n    // return new File([u8arr], filename, { type: mime });\r\n  }\r\n\r\n  handleChange = selectedOption => {\r\n    if (selectedOption) {\r\n      let aspectRatio = 16 / 9;\r\n      let tagValue = selectedOption.value;\r\n      if (tagValue === CONSTANTS.mediaAlbum) {\r\n        aspectRatio = 16 / 9;\r\n      } else {\r\n        aspectRatio = 1 / 1;\r\n      }\r\n      this.setState({ selectedOption, tagValue, aspectRatio });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { selectedOption } = this.state;\r\n    return (\r\n      <Modal\r\n        bsSize={this.state.modalSize}\r\n        show={this.state.cropModal}\r\n        onHide={this.closeCropModal}\r\n        backdrop=\"static\"\r\n        keyboard={false}\r\n      >\r\n        <Modal.Header closeButton>\r\n          <Modal.Title\r\n            className={\r\n              this.props.labelName === 'ADD_MEDIA'\r\n                ? 'addMediaTxt'\r\n                : 'subtitle text-center'\r\n            }\r\n          >\r\n            {this.props.labelName === 'ADD_MEDIA' ? 'ADD MEDIA' : 'Crop Photo'}\r\n          </Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <Cropper\r\n            className=\"img-responsive1\"\r\n            ref=\"cropper\"\r\n            minCropBoxWidth={this.state.cropBoxWidth}\r\n            minCropBoxHeight={this.state.cropBoxHeight}\r\n            src={this.state.imageSource}\r\n            style={{ height: 400, width: '100%',opacity: 1 }}\r\n            aspectRatio={this.state.aspectRatio}\r\n            guides={true}\r\n            viewMode={1}\r\n            background={false}\r\n            zoomable={true}\r\n            cropBoxMovable={false}\r\n            cropBoxResizable={false}\r\n            highlight={false}\r\n            dragMode=\"move\"\r\n            movable={true}\r\n          />\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <div className=\"flex justify-content-between align-center\">\r\n            <div className=\"left\">\r\n              {this.props.labelName === 'ADD_MEDIA' ? (\r\n                <div className=\"custom-select selectAddAch\">\r\n                  <span className=\"icon-down_arrow selectIcon\" />\r\n                  {/* selectAddAch */}\r\n                  {/* adfigCaption  */}\r\n                  <Select\r\n                    className=\"form-control adfigCaption\"\r\n                    placeholder=\"Select Media Type\"\r\n                    value={selectedOption}\r\n                    onChange={this.handleChange}\r\n                    options={options}\r\n                    clearable={false}\r\n                  />\r\n                </div>\r\n              ) : null}\r\n            </div>\r\n            <div className=\"right flex align-center\">\r\n              <div className=\"custom-upload mr-1\">\r\n                <input\r\n                  type=\"file\"\r\n                  accept=\"image/*\"\r\n                  value=\"\"\r\n                  onChange={this.handleImageChange.bind(this)}\r\n                />\r\n\r\n                <Button bstyle=\"default\">Change Photo</Button>\r\n              </div>\r\n              {this.props.labelName ? (\r\n                <Button\r\n                  bsStyle=\"primary\"\r\n                  onClick=\r\n                  {_.debounce((event) => this.cropImage(), 1000)} \r\n                   disabled={selectedOption ? false : true}\r\n                >\r\n                  Apply\r\n                </Button>\r\n              ) : (\r\n                <Button bsStyle=\"primary\" onClick= {_.debounce((event) => this.cropImage(), 1000)} >\r\n                  Apply\r\n                </Button>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ImageCropper;\r\n"]},"metadata":{},"sourceType":"module"}