{"ast":null,"code":"// handle user media capture\nexport function captureUserMedia(callback){var params={audio:false,video:true};navigator.getUserMedia(params,callback,function(error){alert(JSON.stringify(error));});};// handle S3 upload\nfunction getSignedUrl(file){var queryString='?objectName='+file.id+'&contentType='+encodeURIComponent(file.type);return fetch('/s3/sign'+queryString).then(function(response){return response.json();}).catch(function(err){console.log('error: ',err);});}function createCORSRequest(method,url){var xhr=new XMLHttpRequest();if(xhr.withCredentials!=null){xhr.open(method,url,true);}else if(typeof XDomainRequest!==\"undefined\"){//  xhr = new XDomainRequest();\nxhr.open(method,url);}else{xhr=null;}return xhr;};export function S3Upload(fileInfo){//parameters: { type, data, id }\nreturn new Promise(function(resolve,reject){getSignedUrl(fileInfo).then(function(s3Info){// upload to S3\nvar xhr=createCORSRequest('PUT',s3Info.signedUrl);xhr.onload=function(){if(xhr.status===200){console.log(xhr.status);resolve(true);}else{console.log(xhr.status);reject(xhr.status);}};xhr.setRequestHeader('Content-Type',fileInfo.type);xhr.setRequestHeader('x-amz-acl','public-read');return xhr.send(fileInfo.data);});});}","map":{"version":3,"sources":["/home/ank/Desktop/therapidhiregit/therapidhireui/TheRapidHireUI/src/video/AppUtils.js"],"names":["captureUserMedia","callback","params","audio","video","navigator","getUserMedia","error","alert","JSON","stringify","getSignedUrl","file","queryString","id","encodeURIComponent","type","fetch","then","response","json","catch","err","console","log","createCORSRequest","method","url","xhr","XMLHttpRequest","withCredentials","open","XDomainRequest","S3Upload","fileInfo","Promise","resolve","reject","s3Info","signedUrl","onload","status","setRequestHeader","send","data"],"mappings":"AAAA;AACA,MAAO,SAASA,CAAAA,gBAAT,CAA0BC,QAA1B,CAAoC,CACzC,GAAIC,CAAAA,MAAM,CAAG,CAAEC,KAAK,CAAE,KAAT,CAAgBC,KAAK,CAAE,IAAvB,CAAb,CAEAC,SAAS,CAACC,YAAV,CAAuBJ,MAAvB,CAA+BD,QAA/B,CAAyC,SAACM,KAAD,CAAW,CAClDC,KAAK,CAACC,IAAI,CAACC,SAAL,CAAeH,KAAf,CAAD,CAAL,CACD,CAFD,EAGD,EAED;AACA,QAASI,CAAAA,YAAT,CAAsBC,IAAtB,CAA4B,CAC1B,GAAIC,CAAAA,WAAW,CAAG,eAAiBD,IAAI,CAACE,EAAtB,CAA2B,eAA3B,CAA6CC,kBAAkB,CAACH,IAAI,CAACI,IAAN,CAAjF,CACA,MAAOC,CAAAA,KAAK,CAAC,WAAaJ,WAAd,CAAL,CACNK,IADM,CACD,SAACC,QAAD,CAAc,CAClB,MAAOA,CAAAA,QAAQ,CAACC,IAAT,EAAP,CACD,CAHM,EAINC,KAJM,CAIA,SAACC,GAAD,CAAS,CACdC,OAAO,CAACC,GAAR,CAAY,SAAZ,CAAuBF,GAAvB,EACD,CANM,CAAP,CAOD,CAED,QAASG,CAAAA,iBAAT,CAA2BC,MAA3B,CAAmCC,GAAnC,CAAwC,CACtC,GAAIC,CAAAA,GAAG,CAAG,GAAIC,CAAAA,cAAJ,EAAV,CAEA,GAAID,GAAG,CAACE,eAAJ,EAAuB,IAA3B,CAAiC,CAC/BF,GAAG,CAACG,IAAJ,CAASL,MAAT,CAAiBC,GAAjB,CAAsB,IAAtB,EACD,CAFD,IAEO,IAAI,MAAOK,CAAAA,cAAP,GAA0B,WAA9B,CAA2C,CAClD;AACEJ,GAAG,CAACG,IAAJ,CAASL,MAAT,CAAiBC,GAAjB,EACD,CAHM,IAGA,CACLC,GAAG,CAAG,IAAN,CACD,CAED,MAAOA,CAAAA,GAAP,CACD,EAED,MAAO,SAASK,CAAAA,QAAT,CAAkBC,QAAlB,CAA4B,CAAE;AACnC,MAAO,IAAIC,CAAAA,OAAJ,CAAY,SAACC,OAAD,CAAUC,MAAV,CAAqB,CACtC1B,YAAY,CAACuB,QAAD,CAAZ,CACChB,IADD,CACM,SAACoB,MAAD,CAAY,CAChB;AACA,GAAIV,CAAAA,GAAG,CAAGH,iBAAiB,CAAC,KAAD,CAAQa,MAAM,CAACC,SAAf,CAA3B,CAEAX,GAAG,CAACY,MAAJ,CAAa,UAAW,CACtB,GAAIZ,GAAG,CAACa,MAAJ,GAAe,GAAnB,CAAwB,CACtBlB,OAAO,CAACC,GAAR,CAAYI,GAAG,CAACa,MAAhB,EACAL,OAAO,CAAC,IAAD,CAAP,CACD,CAHD,IAGO,CACLb,OAAO,CAACC,GAAR,CAAYI,GAAG,CAACa,MAAhB,EAEAJ,MAAM,CAACT,GAAG,CAACa,MAAL,CAAN,CACD,CACF,CATD,CAWAb,GAAG,CAACc,gBAAJ,CAAqB,cAArB,CAAqCR,QAAQ,CAAClB,IAA9C,EACAY,GAAG,CAACc,gBAAJ,CAAqB,WAArB,CAAkC,aAAlC,EAEA,MAAOd,CAAAA,GAAG,CAACe,IAAJ,CAAST,QAAQ,CAACU,IAAlB,CAAP,CACD,CApBD,EAqBD,CAtBM,CAAP,CAuBD","sourcesContent":["// handle user media capture\nexport function captureUserMedia(callback) {\n  var params = { audio: false, video: true };\n\n  navigator.getUserMedia(params, callback, (error) => {\n    alert(JSON.stringify(error));\n  });\n};\n\n// handle S3 upload\nfunction getSignedUrl(file) {\n  let queryString = '?objectName=' + file.id + '&contentType=' + encodeURIComponent(file.type);\n  return fetch('/s3/sign' + queryString)\n  .then((response) => {\n    return response.json();\n  })\n  .catch((err) => {\n    console.log('error: ', err)\n  })\n}\n\nfunction createCORSRequest(method, url) {\n  var xhr = new XMLHttpRequest();\n\n  if (xhr.withCredentials != null) {\n    xhr.open(method, url, true);\n  } else if (typeof XDomainRequest !== \"undefined\") {\n  //  xhr = new XDomainRequest();\n    xhr.open(method, url);\n  } else {\n    xhr = null;\n  }\n\n  return xhr;\n};\n\nexport function S3Upload(fileInfo) { //parameters: { type, data, id }\n  return new Promise((resolve, reject) => {\n    getSignedUrl(fileInfo)\n    .then((s3Info) => {\n      // upload to S3\n      var xhr = createCORSRequest('PUT', s3Info.signedUrl);\n\n      xhr.onload = function() {\n        if (xhr.status === 200) {\n          console.log(xhr.status)\n          resolve(true);\n        } else {\n          console.log(xhr.status)\n          \n          reject(xhr.status);\n        }\n      };\n\n      xhr.setRequestHeader('Content-Type', fileInfo.type);\n      xhr.setRequestHeader('x-amz-acl', 'public-read');\n\n      return xhr.send(fileInfo.data);\n    })\n  })\n}\n\n"]},"metadata":{},"sourceType":"module"}