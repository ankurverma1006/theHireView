{"ast":null,"code":"import _objectWithoutProperties from \"C:\\\\Users\\\\Ankur\\\\Desktop\\\\therapidhire\\\\therapidhireui\\\\TheRapidHireUI\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"C:\\\\Users\\\\Ankur\\\\Desktop\\\\therapidhire\\\\therapidhireui\\\\TheRapidHireUI\\\\src\\\\common\\\\commonFunctions.js\";\nimport React from 'react';\nimport { toast } from 'react-toastify';\nimport Transition from 'react-transition-group/Transition';\nimport 'react-toastify/dist/ReactToastify.css'; //import crypto from 'crypto';\n\nimport CONSTANTS from './core/config/appConfig';\nimport Cryptr from 'cryptr';\nimport moment from 'moment';\nconst ENCRYPTION_KEY = 'sd5b75nb7577#^%$%*&G#CGF*&%@#%*&';\n\nvar cryptlib = require('cryptlib'),\n    iv = 'F@$%^*GD$*(*#!12',\n    //16 bytes = 128 bit\nkey = cryptlib.getHashSha256(ENCRYPTION_KEY, 32); //32 bytes = 256 bits\n\n\nlet azureURL = \"\".concat(CONSTANTS.azureBlobURI, \"/\").concat(CONSTANTS.azureContainer);\nlet azureThumbURL = \"\".concat(CONSTANTS.azureBlobURI, \"/\").concat(CONSTANTS.azureThumbContainer);\nconst cryptr = new Cryptr(CONSTANTS.CRYPTER_KEY);\nlet toastId = ''; //used to encryption of localstorage data\n\nexport const encryptedData = data => {\n  return cryptr.encrypt(data);\n}; //used to decrypt localstorage data\n\nexport const decryptedData = data => {\n  return cryptr.decrypt(data);\n}; // used to set localstorage item\n\nexport const setLocalStorage = (key, value) => {\n  value = JSON.stringify(value);\n  const encodedData = encryptedData(value);\n  localStorage.setItem(key, encodedData);\n}; // used to get localstorage item\n\nexport const getLocalStorage = key => {\n  if (key) {\n    let data = localStorage.getItem(key);\n\n    if (data) {\n      console.log(data);\n      data = JSON.parse(decryptedData(data));\n      return data;\n    }\n  }\n\n  return null;\n}; // used to remove localstorage item\n\nexport const removeLocalStorage = key => {\n  localStorage.removeItem(key);\n}; // used to clear localstorage\n\nexport const clearLocalStorage = () => {\n  localStorage.clear();\n}; // toastr messages for error\n\nexport const showErrorToast = (errorMessage, event) => {\n  if (!toast.isActive(toastId)) {\n    toastId = toast.error(errorMessage, {\n      position: toast.POSITION.TOP_RIGHT,\n      hideProgressBar: true,\n      closeOnClick: true,\n      pauseOnHover: true\n    });\n  }\n}; // toastr messages for success\n\nexport const showSuccessToast = message => {\n  if (!toast.isActive(toastId)) {\n    toastId = toast.success(message, {\n      position: toast.POSITION.TOP_RIGHT,\n      hideProgressBar: true,\n      closeOnClick: true,\n      pauseOnHover: true\n    });\n  }\n}; // toastr messages for warning\n\nexport const showWarningToast = message => {\n  if (!toast.isActive(toastId)) {\n    toastId = toast.warn(message, {\n      position: toast.POSITION.TOP_RIGHT,\n      hideProgressBar: true,\n      closeOnClick: true,\n      pauseOnHover: true\n    });\n  }\n}; // used zoomin and zoomout of toastr messages\n\nexport const ZoomInAndOut = (_ref) => {\n  let children = _ref.children,\n      position = _ref.position,\n      props = _objectWithoutProperties(_ref, [\"children\", \"position\"]);\n\n  return React.createElement(Transition, Object.assign({}, props, {\n    timeout: 200,\n    onEnter: node => node.classList.add('zoomIn', 'animate'),\n    onExit: node => {\n      node.classList.remove('zoomIn', 'animate');\n      node.classList.add('zoomOut', 'animate');\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }), children);\n}; // used to render validation message\n\nexport const renderMessage = message => {\n  return React.createElement(\"span\", {\n    className: \"error\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117\n    },\n    __self: this\n  }, message);\n};\nexport const encrypt = text => {\n  let cryptText = cryptlib.encrypt(text, key, iv);\n  return cryptText.replace(/\\//g, '_spike_');\n}; //  let buff = new Buffer(text);\n//  return buff.toString('base64');\n//return cryptlib.encrypt(text, key, iv);\n//return text;\n//};\n\nexport const decrypt = text => {\n  let decrptText = text.replace(/_spike_/g, '/');\n  return cryptlib.decrypt(decrptText, key, iv); // let buff = new Buffer(text, 'base64');\n  //return buff.toString('ascii');\n  // return cryptlib.decrypt(text, key, iv);\n  //return text;\n}; // export const encrypt = text => {\n//   let buff = new Buffer(text);\n//   let base64data = buff.toString('base64');\n//   return base64data;\n// };\n// export const decrypt = text => {\n//   let buff = new Buffer(text, 'base64');\n//   text = buff.toString('ascii');\n//   return text;\n// };\n// used to get apiurl for different servers\n\nexport function getAPIURL() {\n  let returnUrl = {\n    APIURL: '',\n    azureContainer: '',\n    azureThumbContainer: '',\n    httpServer: '',\n    APIPort: ''\n  };\n\n  switch (window.location.hostname) {\n    case '133.76.253.131':\n      returnUrl.APIURL = '103.76.253.131';\n      returnUrl.azureContainer = 'theRapidHire-media-development';\n      returnUrl.azureThumbContainer = 'theRapidHire-media-development-thumbnails';\n      returnUrl.httpServer = 'http://';\n      returnUrl.APIPort = '3002';\n      break;\n\n    default:\n      returnUrl.APIURL = 'localhost'; //'192.168.2.4';\n\n      returnUrl.azureContainer = 'theRapidHire-media-development';\n      returnUrl.azureThumbContainer = 'theRapidHire-media-development-thumbnails';\n      returnUrl.httpServer = 'http://';\n      returnUrl.APIPort = '3002';\n      break;\n  }\n\n  return returnUrl;\n} // used to convert timestamp to date\n\nexport const timeStampToDate = timestamp => {\n  timestamp = timestamp.toString();\n  timestamp = timestamp.slice(0, -3);\n  timestamp = parseInt(timestamp, 10);\n  let momentDate = moment.unix(timestamp);\n  return momentDate;\n};\nexport const uploadToAzure = (type, userId, file, sasToken, callback) => {\n  if (file !== '') {\n    let AzureStorage = window.AzureStorage;\n    let folderName = type === 1 ? CONSTANTS.profileAlbum : CONSTANTS.coverAlbum;\n    let fileName = generateTimestamp(file.name);\n    let uploadPath = \"sv_\".concat(userId, \"/\").concat(folderName, \"/\").concat(fileName);\n    const blobService = AzureStorage.Blob.createBlobServiceWithSas(CONSTANTS.azureBlobURI, sasToken);\n    blobService.createBlockBlobFromBrowserFile(CONSTANTS.azureContainer, uploadPath, file, (error, result) => {\n      if (callback) callback(error, result, uploadPath, fileName);\n\n      if (error) {\n        console.log('error ', error);\n      }\n    });\n  }\n};\nexport const isValidURL = URL => {\n  var regexp = /(ftp|http|https):\\/\\/(\\w+:{0,1}\\w*@)?(\\S+)(:[0-9]+)?(\\/|\\/([\\w#!:.?+=&%@!\\-\\/]))?/;\n  return regexp.test(URL);\n};\nexport const limitCharacter = (text, count) => {\n  if (text && count) {\n    return text.slice(0, count) + (text.length > count ? '...' : '');\n  } else {\n    return false;\n  }\n};\nexport const SampleNextArrow = props => {\n  const arrow = props.arrow,\n        onClick = props.onClick;\n  return React.createElement(\"span\", {\n    className: \"icon-right_carousel custom-next  next\".concat(arrow),\n    onClick: onClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 232\n    },\n    __self: this\n  });\n};\nexport const SamplePrevArrow = props => {\n  const arrow = props.arrow,\n        onClick = props.onClick;\n  return React.createElement(\"span\", {\n    className: \"icon-left_carousel custom-prev prev \".concat(arrow),\n    onClick: onClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242\n    },\n    __self: this\n  });\n};\n\nconst generateRandomString = () => {\n  var text = '';\n  var possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n\n  for (var i = 0; i < 5; i++) text += possible.charAt(Math.floor(Math.random() * possible.length));\n\n  return text;\n};\n\nexport const generateTimestamp = fileName => {\n  let extension = fileName.split('.').pop();\n  let newFileName = moment().valueOf() + generateRandomString() + '.' + extension;\n  return newFileName;\n};\n\nconst fileExists = image_url => {\n  var http = new XMLHttpRequest();\n  http.open('HEAD', image_url, false);\n  http.send();\n  return http.status != 404;\n};\n\nexport const getThumbImage = (imageType, imagePath) => {\n  if (imagePath) {\n    // let newArray = imagePath.split('/');\n    // if (newArray.length > 0) {\n    //   if (getAPIURL().APIURL !== '103.76.253.131') {\n    //     if (imageType === 'small') {\n    //       let imageName = imagePath.replace(\n    //         newArray[2],\n    //         CONSTANTS.smallThumb + newArray[2]\n    //       );\n    //       imageName = `${azureThumbURL}/${imageName}`;\n    //       if (fileExists(imageName)) {\n    //         return imageName;\n    //       } else {\n    //         let imageName = `${azureURL}/${imagePath}`;\n    //         return imageName;\n    //       }\n    //     }\n    //     if (imageType === 'medium') {\n    //       let imageName = imagePath.replace(\n    //         newArray[2],\n    //         CONSTANTS.mediumThumb + newArray[2]\n    //       );\n    //       imageName = `${azureThumbURL}/${imageName}`;\n    //       if (fileExists(imageName)) {\n    //         return imageName;\n    //       } else {\n    //         let imageName = `${azureURL}/${imagePath}`;\n    //         return imageName;\n    //       }\n    //     }\n    //   }\n    if (imageType === 'original' || imageType === 'medium' || imageType === 'small') {\n      let imageName = \"\".concat(azureURL, \"/\").concat(imagePath);\n      return imageName;\n    }\n  } //}\n\n};\nexport const getIPAddress = onNewIP => {\n  //compatibility for firefox and chrome\n  var myPeerConnection = window.RTCPeerConnection || window.mozRTCPeerConnection || window.webkitRTCPeerConnection;\n\n  var pc = new myPeerConnection({\n    iceServers: []\n  }),\n      noop = function () {},\n      localIPs = {},\n      ipRegex = /([0-9]{1,3}(\\.[0-9]{1,3}){3}|[a-f0-9]{1,4}(:[a-f0-9]{1,4}){7})/g,\n      key;\n\n  function iterateIP(ip) {\n    if (!localIPs[ip]) onNewIP(ip);\n    localIPs[ip] = true;\n  } //create a bogus data channel\n\n\n  pc.createDataChannel(''); // create offer and set local description\n\n  pc.createOffer().then(function (sdp) {\n    sdp.sdp.split('\\n').forEach(function (line) {\n      if (line.indexOf('candidate') < 0) return;\n      line.match(ipRegex).forEach(iterateIP);\n    });\n    pc.setLocalDescription(sdp, noop, noop);\n  }).catch(function (reason) {// An error occurred, so handle the failure to connect\n  }); //listen for candidate events\n\n  pc.onicecandidate = function (ice) {\n    if (!ice || !ice.candidate || !ice.candidate.candidate || !ice.candidate.candidate.match(ipRegex)) return;\n    ice.candidate.candidate.match(ipRegex).forEach(iterateIP);\n  };\n}; // function callbackToPromise(method, ...args) {\n//   return new Promise(function(resolve, reject) {\n//       return method(...args, function(err, result) {\n//           return err ? reject(err) : resolve(result);\n//       });\n//   });\n// }","map":{"version":3,"sources":["C:\\Users\\Ankur\\Desktop\\therapidhire\\therapidhireui\\TheRapidHireUI\\src\\common\\commonFunctions.js"],"names":["React","toast","Transition","CONSTANTS","Cryptr","moment","ENCRYPTION_KEY","cryptlib","require","iv","key","getHashSha256","azureURL","azureBlobURI","azureContainer","azureThumbURL","azureThumbContainer","cryptr","CRYPTER_KEY","toastId","encryptedData","data","encrypt","decryptedData","decrypt","setLocalStorage","value","JSON","stringify","encodedData","localStorage","setItem","getLocalStorage","getItem","console","log","parse","removeLocalStorage","removeItem","clearLocalStorage","clear","showErrorToast","errorMessage","event","isActive","error","position","POSITION","TOP_RIGHT","hideProgressBar","closeOnClick","pauseOnHover","showSuccessToast","message","success","showWarningToast","warn","ZoomInAndOut","children","props","node","classList","add","remove","renderMessage","text","cryptText","replace","decrptText","getAPIURL","returnUrl","APIURL","httpServer","APIPort","window","location","hostname","timeStampToDate","timestamp","toString","slice","parseInt","momentDate","unix","uploadToAzure","type","userId","file","sasToken","callback","AzureStorage","folderName","profileAlbum","coverAlbum","fileName","generateTimestamp","name","uploadPath","blobService","Blob","createBlobServiceWithSas","createBlockBlobFromBrowserFile","result","isValidURL","URL","regexp","test","limitCharacter","count","length","SampleNextArrow","arrow","onClick","SamplePrevArrow","generateRandomString","possible","i","charAt","Math","floor","random","extension","split","pop","newFileName","valueOf","fileExists","image_url","http","XMLHttpRequest","open","send","status","getThumbImage","imageType","imagePath","imageName","getIPAddress","onNewIP","myPeerConnection","RTCPeerConnection","mozRTCPeerConnection","webkitRTCPeerConnection","pc","iceServers","noop","localIPs","ipRegex","iterateIP","ip","createDataChannel","createOffer","then","sdp","forEach","line","indexOf","match","setLocalDescription","catch","reason","onicecandidate","ice","candidate"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { toast } from 'react-toastify';\r\nimport Transition from 'react-transition-group/Transition';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n//import crypto from 'crypto';\r\nimport CONSTANTS from './core/config/appConfig';\r\nimport Cryptr from 'cryptr';\r\nimport moment from 'moment';\r\nconst ENCRYPTION_KEY = 'sd5b75nb7577#^%$%*&G#CGF*&%@#%*&';\r\n\r\nvar cryptlib = require('cryptlib'),\r\n  iv = 'F@$%^*GD$*(*#!12', //16 bytes = 128 bit\r\n  key = cryptlib.getHashSha256(ENCRYPTION_KEY, 32); //32 bytes = 256 bits\r\n\r\nlet azureURL = `${CONSTANTS.azureBlobURI}/${CONSTANTS.azureContainer}`;\r\nlet azureThumbURL = `${CONSTANTS.azureBlobURI}/${\r\n  CONSTANTS.azureThumbContainer\r\n}`;\r\n\r\nconst cryptr = new Cryptr(CONSTANTS.CRYPTER_KEY);\r\nlet toastId = '';\r\n\r\n//used to encryption of localstorage data\r\nexport const encryptedData = data => {\r\n  return cryptr.encrypt(data);\r\n};\r\n\r\n//used to decrypt localstorage data\r\nexport const decryptedData = data => {\r\n  return cryptr.decrypt(data);\r\n};\r\n\r\n// used to set localstorage item\r\nexport const setLocalStorage = (key, value) => {\r\n  value = JSON.stringify(value);\r\n  const encodedData = encryptedData(value);\r\n  localStorage.setItem(key, encodedData);\r\n};\r\n\r\n// used to get localstorage item\r\nexport const getLocalStorage = key => {\r\n  if (key) {\r\n    let data = localStorage.getItem(key);\r\n    if (data) {\r\n          console.log(data);\r\n          data = JSON.parse(decryptedData(data));\r\n      return data;\r\n    }\r\n  }\r\n\r\n  return null;\r\n};\r\n\r\n// used to remove localstorage item\r\nexport const removeLocalStorage = key => {\r\n  localStorage.removeItem(key);\r\n};\r\n\r\n// used to clear localstorage\r\nexport const clearLocalStorage = () => {\r\n  localStorage.clear();\r\n};\r\n\r\n// toastr messages for error\r\nexport const showErrorToast = (errorMessage, event) => {\r\n  if (!toast.isActive(toastId)) {\r\n    toastId = toast.error(errorMessage, {\r\n      position: toast.POSITION.TOP_RIGHT,\r\n      hideProgressBar: true,\r\n      closeOnClick: true,\r\n      pauseOnHover: true\r\n    });\r\n  }\r\n};\r\n\r\n// toastr messages for success\r\nexport const showSuccessToast = message => {\r\n  if (!toast.isActive(toastId)) {\r\n    toastId = toast.success(message, {\r\n      position: toast.POSITION.TOP_RIGHT,\r\n      hideProgressBar: true,\r\n      closeOnClick: true,\r\n      pauseOnHover: true\r\n    });\r\n  }\r\n};\r\n\r\n// toastr messages for warning\r\nexport const showWarningToast = message => {\r\n  if (!toast.isActive(toastId)) {\r\n    toastId = toast.warn(message, {\r\n      position: toast.POSITION.TOP_RIGHT,\r\n      hideProgressBar: true,\r\n      closeOnClick: true,\r\n      pauseOnHover: true\r\n    });\r\n  }\r\n};\r\n\r\n// used zoomin and zoomout of toastr messages\r\nexport const ZoomInAndOut = ({ children, position, ...props }) => (\r\n  <Transition\r\n    {...props}\r\n    timeout={200}\r\n    onEnter={node => node.classList.add('zoomIn', 'animate')}\r\n    onExit={node => {\r\n      node.classList.remove('zoomIn', 'animate');\r\n      node.classList.add('zoomOut', 'animate');\r\n    }}\r\n  >\r\n    {children}\r\n  </Transition>\r\n);\r\n\r\n// used to render validation message\r\nexport const renderMessage = message => {\r\n  return <span className=\"error\">{message}</span>;\r\n};\r\n\r\nexport const encrypt = text => {\r\n  let cryptText = cryptlib.encrypt(text, key, iv);\r\n  return cryptText.replace(/\\//g, '_spike_');\r\n};\r\n//  let buff = new Buffer(text);\r\n//  return buff.toString('base64');\r\n//return cryptlib.encrypt(text, key, iv);\r\n//return text;\r\n//};\r\n\r\nexport const decrypt = text => {\r\n  let decrptText = text.replace(/_spike_/g, '/');\r\n  return cryptlib.decrypt(decrptText, key, iv);\r\n  // let buff = new Buffer(text, 'base64');\r\n  //return buff.toString('ascii');\r\n  // return cryptlib.decrypt(text, key, iv);\r\n  //return text;\r\n};\r\n\r\n// export const encrypt = text => {\r\n//   let buff = new Buffer(text);\r\n//   let base64data = buff.toString('base64');\r\n//   return base64data;\r\n// };\r\n\r\n// export const decrypt = text => {\r\n//   let buff = new Buffer(text, 'base64');\r\n//   text = buff.toString('ascii');\r\n//   return text;\r\n// };\r\n\r\n// used to get apiurl for different servers\r\nexport function getAPIURL() {\r\n  let returnUrl = {\r\n    APIURL: '',\r\n    azureContainer: '',\r\n    azureThumbContainer: '',\r\n    httpServer: '',\r\n    APIPort: ''\r\n  };\r\n  switch (window.location.hostname) {  \r\n\r\n    case '133.76.253.131':\r\n      returnUrl.APIURL = '103.76.253.131';\r\n      returnUrl.azureContainer = 'theRapidHire-media-development';\r\n      returnUrl.azureThumbContainer = 'theRapidHire-media-development-thumbnails';\r\n      returnUrl.httpServer = 'http://';\r\n      returnUrl.APIPort = '3002';\r\n      break;\r\n\r\n    default:\r\n      returnUrl.APIURL = 'localhost';//'192.168.2.4';\r\n      returnUrl.azureContainer = 'theRapidHire-media-development';\r\n      returnUrl.azureThumbContainer = 'theRapidHire-media-development-thumbnails';\r\n      returnUrl.httpServer = 'http://';\r\n      returnUrl.APIPort = '3002';\r\n      break;\r\n  }\r\n  return returnUrl;\r\n}\r\n\r\n// used to convert timestamp to date\r\nexport const timeStampToDate = timestamp => {\r\n  timestamp = timestamp.toString();\r\n  timestamp = timestamp.slice(0, -3);\r\n  timestamp = parseInt(timestamp, 10);\r\n  let momentDate = moment.unix(timestamp);\r\n  return momentDate;\r\n};\r\n\r\nexport const uploadToAzure = (type, userId, file, sasToken, callback) => {\r\n  if (file !== '') {\r\n    let AzureStorage = window.AzureStorage;\r\n    let folderName = type === 1 ? CONSTANTS.profileAlbum : CONSTANTS.coverAlbum;\r\n    let fileName = generateTimestamp(file.name);\r\n    let uploadPath = `sv_${userId}/${folderName}/${fileName}`;\r\n\r\n    const blobService = AzureStorage.Blob.createBlobServiceWithSas(\r\n      CONSTANTS.azureBlobURI,\r\n      sasToken\r\n    );\r\n\r\n    blobService.createBlockBlobFromBrowserFile(\r\n      CONSTANTS.azureContainer,\r\n      uploadPath,\r\n      file,\r\n      (error, result) => {\r\n        if (callback) callback(error, result, uploadPath, fileName);\r\n        if (error) {\r\n          console.log('error ', error);\r\n        }\r\n      }\r\n    );\r\n  }\r\n};\r\n\r\nexport const isValidURL = URL => {\r\n  var regexp = /(ftp|http|https):\\/\\/(\\w+:{0,1}\\w*@)?(\\S+)(:[0-9]+)?(\\/|\\/([\\w#!:.?+=&%@!\\-\\/]))?/;\r\n  return regexp.test(URL);\r\n};\r\n\r\nexport const limitCharacter = (text, count) => {\r\n  if (text && count) {\r\n    return text.slice(0, count) + (text.length > count ? '...' : '');\r\n  } else {\r\n    return false;\r\n  }\r\n};\r\n\r\nexport const SampleNextArrow = props => {\r\n  const { arrow, onClick } = props;\r\n  return (\r\n    <span\r\n      className={`icon-right_carousel custom-next  next${arrow}`}\r\n      onClick={onClick}\r\n    />\r\n  );\r\n};\r\n\r\nexport const SamplePrevArrow = props => {\r\n  const { arrow, onClick } = props;\r\n  return (\r\n    <span\r\n      className={`icon-left_carousel custom-prev prev ${arrow}`}\r\n      onClick={onClick}\r\n    />\r\n  );\r\n};\r\n\r\nconst generateRandomString = () => {\r\n  var text = '';\r\n  var possible =\r\n    'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n\r\n  for (var i = 0; i < 5; i++)\r\n    text += possible.charAt(Math.floor(Math.random() * possible.length));\r\n\r\n  return text;\r\n};\r\n\r\nexport const generateTimestamp = fileName => {\r\n  let extension = fileName.split('.').pop();\r\n  let newFileName =\r\n    moment().valueOf() + generateRandomString() + '.' + extension;\r\n  return newFileName;\r\n};\r\n\r\nconst fileExists = image_url => {\r\n  var http = new XMLHttpRequest();\r\n  http.open('HEAD', image_url, false);\r\n  http.send();\r\n  return http.status != 404;\r\n};\r\n\r\nexport const getThumbImage = (imageType, imagePath) => {\r\n  if (imagePath) {\r\n    // let newArray = imagePath.split('/');\r\n    // if (newArray.length > 0) {\r\n    //   if (getAPIURL().APIURL !== '103.76.253.131') {\r\n    //     if (imageType === 'small') {\r\n    //       let imageName = imagePath.replace(\r\n    //         newArray[2],\r\n    //         CONSTANTS.smallThumb + newArray[2]\r\n    //       );\r\n    //       imageName = `${azureThumbURL}/${imageName}`;\r\n    //       if (fileExists(imageName)) {\r\n    //         return imageName;\r\n    //       } else {\r\n    //         let imageName = `${azureURL}/${imagePath}`;\r\n    //         return imageName;\r\n    //       }\r\n    //     }\r\n\r\n    //     if (imageType === 'medium') {\r\n    //       let imageName = imagePath.replace(\r\n    //         newArray[2],\r\n    //         CONSTANTS.mediumThumb + newArray[2]\r\n    //       );\r\n    //       imageName = `${azureThumbURL}/${imageName}`;\r\n    //       if (fileExists(imageName)) {\r\n    //         return imageName;\r\n    //       } else {\r\n    //         let imageName = `${azureURL}/${imagePath}`;\r\n    //         return imageName;\r\n    //       }\r\n    //     }\r\n    //   }\r\n\r\n    if (\r\n      imageType === 'original' ||\r\n      imageType === 'medium' ||\r\n      imageType === 'small'\r\n    ) {\r\n      let imageName = `${azureURL}/${imagePath}`;\r\n      return imageName;\r\n    }\r\n  }\r\n  //}\r\n};\r\n\r\nexport const getIPAddress = onNewIP => {\r\n  //compatibility for firefox and chrome\r\n  var myPeerConnection =\r\n    window.RTCPeerConnection ||\r\n    window.mozRTCPeerConnection ||\r\n    window.webkitRTCPeerConnection;\r\n  var pc = new myPeerConnection({\r\n      iceServers: []\r\n    }),\r\n    noop = function() {},\r\n    localIPs = {},\r\n    ipRegex = /([0-9]{1,3}(\\.[0-9]{1,3}){3}|[a-f0-9]{1,4}(:[a-f0-9]{1,4}){7})/g,\r\n    key;\r\n\r\n  function iterateIP(ip) {\r\n    if (!localIPs[ip]) onNewIP(ip);\r\n    localIPs[ip] = true;\r\n  }\r\n\r\n  //create a bogus data channel\r\n  pc.createDataChannel('');\r\n\r\n  // create offer and set local description\r\n  pc.createOffer()\r\n    .then(function(sdp) {\r\n      sdp.sdp.split('\\n').forEach(function(line) {\r\n        if (line.indexOf('candidate') < 0) return;\r\n        line.match(ipRegex).forEach(iterateIP);\r\n      });\r\n\r\n      pc.setLocalDescription(sdp, noop, noop);\r\n    })\r\n    .catch(function(reason) {\r\n      // An error occurred, so handle the failure to connect\r\n    });\r\n\r\n  //listen for candidate events\r\n  pc.onicecandidate = function(ice) {\r\n    if (\r\n      !ice ||\r\n      !ice.candidate ||\r\n      !ice.candidate.candidate ||\r\n      !ice.candidate.candidate.match(ipRegex)\r\n    )\r\n      return;\r\n    ice.candidate.candidate.match(ipRegex).forEach(iterateIP);\r\n  };\r\n};\r\n\r\n// function callbackToPromise(method, ...args) {\r\n//   return new Promise(function(resolve, reject) {\r\n//       return method(...args, function(err, result) {\r\n//           return err ? reject(err) : resolve(result);\r\n//       });\r\n//   });\r\n// }\r\n"]},"metadata":{},"sourceType":"module"}