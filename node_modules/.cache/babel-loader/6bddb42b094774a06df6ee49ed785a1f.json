{"ast":null,"code":"var _jsxFileName = \"/home/ank/Desktop/therapidhiregit/therapidhireui/TheRapidHireUI/src/admin/hruser/addMoreStudent.js\";\nimport React, { Component } from 'react';\nimport validation from 'react-validation-mixin';\nimport strategy from 'react-validatorjs-strategy';\nimport classnames from 'classnames';\nimport theRapidHireApiService from '../../common/core/api/apiService';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { actionGetStudentList } from '../../common/core/redux/actions';\nimport { actionSetStudentAsUser } from '../../common/core/redux/actions';\nimport { ToastContainer } from 'react-toastify';\nimport Select from 'react-select';\nimport { Button, Modal, Form, FormGroup, Col, ControlLabel, FormControl } from 'react-bootstrap';\nimport { renderMessage, setLocalStorage, showSuccessToast, showErrorToast, ZoomInAndOut } from '../../common/commonFunctions';\nimport CONSTANTS from '../../common/core/config/appConfig';\nlet validationMessages = CONSTANTS.validationMessages;\nlet regExpressions = CONSTANTS.regExpressions;\n\nclass AddMoreStudent extends Component {\n  constructor(props, context) {\n    super(props, context);\n\n    this.handleCompanyChange = newValue => {\n      if (newValue.value == 1) {\n        // this.validatorTypes.rules['companyName'] = 'required|companyName';\n        // this.validatorTypes.messages['required.companyName'] =\n        //                                         'Please enter companyName';\n        this.setState({\n          otherCompanyName: true\n        });\n      } else {// this.validatorTypes.rules['companyName'] = '';\n        // this.validatorTypes.messages['required.companyName'] =\n        //                                         'Please enter companyName';\n      }\n\n      this.setState({\n        company: newValue\n      });\n    };\n\n    this.getValidatorData = () => {\n      return this.state;\n    };\n\n    this.getClasses = field => {\n      return classnames({\n        error: !this.props.isValid(field)\n      });\n    };\n\n    this.validateData = () => {\n      let self = this;\n      this.props.validate(function (error) {\n        console.log('error', error);\n\n        if (!error) {\n          self.setState({\n            isLoading: true\n          });\n          self.handleSubmit();\n        }\n      });\n    };\n\n    this.handleChange = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n\n    this.submitData = event => {\n      if (event.key === 'Enter') {\n        event.preventDefault();\n        this.validateData();\n      }\n    };\n\n    this.existMail = event => {\n      let students = this.state.user.students;\n      let studentMailList = this.state.studentMailList;\n      let self = this;\n      if (event.target.value === '') return false;\n    };\n\n    this.state = {\n      firstName: '',\n      lastName: '',\n      isLoading: false,\n      studentMailList: [{\n        email: ''\n      }],\n      streetAddress1: '',\n      streetAddress2: '',\n      city: '',\n      state: '',\n      country: '',\n      zipcode: '',\n      companyDetail: []\n    };\n    this.handleSubmit = this.handleSubmit.bind(this); //  this.handleAddMail = this.handleAddMail.bind(this);\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.getValidatorData = this.getValidatorData.bind(this);\n    this.getClasses = this.getClasses.bind(this);\n    this.addStudentModelFun = this.addStudentModelFun.bind(this);\n    this.validatorTypes = strategy.createSchema({\n      firstName: ['required', 'regex:' + regExpressions.alphaOnly],\n      lastName: ['regex:' + regExpressions.alphaOnly],\n      email: 'required|email'\n    }, {\n      'required.firstName': validationMessages.firstName.required,\n      'regex.firstName': validationMessages.firstName.alphaOnly,\n      'regex.lastName': validationMessages.lastName.alphaOnly,\n      'required.email': validationMessages.email.required,\n      'email.email': validationMessages.email.invalid\n    });\n  }\n\n  componentDidMount() {\n    if (this.props.parent) {\n      this.props.parent['token'] = this.props.user['token'];\n    }\n\n    if (this.props.user) {\n      let user = this.props.parent ? this.props.parent : this.props.user;\n      this.setState({\n        user: user,\n        parentFirstName: user.firstName,\n        parentLastName: user.lastName\n      });\n\n      if (this.props.user) {\n        this.setState({\n          addStudentModel: this.props.addStudentModel\n        });\n      }\n    }\n\n    this.getCompanyList();\n  }\n\n  getCompanyList() {\n    theRapidHireApiService('getCompanyList').then(response => {\n      if (response.data.status === 'Success') {\n        let companyDetail = this.state.companyDetail;\n        response.data.result.forEach(function (data) {\n          companyDetail.push({\n            label: data.companyName,\n            value: data.companyId\n          });\n        });\n        this.setState({\n          companyDetail: companyDetail\n        });\n      }\n    }).catch(err => {\n      console.log(err);\n    });\n  }\n\n  handleSubmit() {\n    let self = this;\n    let createdBy = this.state.user.userId;\n    let roleId = 3;\n    let firstName = this.state.firstName;\n    let lastName = this.state.lastName;\n    let isActive = this.state.user.isActive;\n    let email = this.state.email;\n    let companyName = this.state.company && this.state.company.value !== 1 ? this.state.company.label : this.state.companyName;\n    let companyId = this.state.company && this.state.company.value !== 1 ? this.state.company.value : null;\n    console.log('state ', this.state);\n    let data = {\n      userId: '',\n      firstName,\n      lastName,\n      email,\n      roleId,\n      companyId,\n      companyName,\n      createdBy\n    };\n    theRapidHireApiService('signupHR', data).then(response1 => {\n      self.setState({\n        isLoading: false\n      });\n    }).catch(err => {\n      console.log(err);\n    });\n  }\n\n  addStudentModelFun() {\n    this.setState({\n      addStudentModel: this.state.addStudentModel\n    });\n    this.props.closeAddStudentModel();\n  }\n\n  render() {\n    let self = this;\n    const isLoading = this.state.isLoading;\n    const cssClasses = {\n      root: 'input-group mb-1',\n      input: 'form-control'\n    };\n    const inputProps = {\n      value: this.state.streetAddress1,\n      onChange: this.onChange,\n      placeholder: 'Street Address1',\n      type: 'text'\n    };\n    const defaultStyles = {\n      root: {\n        position: 'relative',\n        paddingBottom: '0px'\n      },\n      input: {\n        display: 'inline-block',\n        width: '100%',\n        padding: '10px'\n      },\n      autocompleteContainer: {\n        position: 'absolute',\n        top: '100%',\n        backgroundColor: 'white',\n        border: '1px solid #555555',\n        width: '100%'\n      },\n      autocompleteItem: {\n        backgroundColor: '#ffffff',\n        padding: '10px',\n        color: '#555555',\n        cursor: 'pointer'\n      },\n      autocompleteItemActive: {\n        backgroundColor: '#fafafa'\n      }\n    };\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261\n      },\n      __self: this\n    }, React.createElement(ToastContainer, {\n      autoClose: 5000,\n      className: \"custom-toaster-main-cls\",\n      toastClassName: \"custom-toaster-bg\",\n      transition: ZoomInAndOut,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 262\n      },\n      __self: this\n    }), React.createElement(Modal //   bsSize=\"medium\"\n    , {\n      show: this.state.addStudentModel,\n      onHide: this.addStudentModelFun,\n      backdrop: \"static\",\n      keyboard: false,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 268\n      },\n      __self: this\n    }, React.createElement(Modal.Header, {\n      closeButton: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 275\n      },\n      __self: this\n    }, React.createElement(Modal.Title, {\n      className: \"subtitle text-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 276\n      },\n      __self: this\n    }, \"Add New Candidate\")), React.createElement(Modal.Body, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 280\n      },\n      __self: this\n    }, React.createElement(Form, {\n      horizontal: true,\n      className: \"lightBgForm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 281\n      },\n      __self: this\n    }, React.createElement(Col, {\n      sm: 12,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 282\n      },\n      __self: this\n    }, React.createElement(FormGroup, {\n      className: \"centeredRightLabel \".concat(this.getClasses('company')),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 284\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      className: \"form-label\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 285\n      },\n      __self: this\n    }, \"Add Company\"), React.createElement(\"div\", {\n      className: \"custom-select\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 287\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"icon-down_arrow selectIcon\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 288\n      },\n      __self: this\n    }), React.createElement(Select, {\n      className: \"form-control\",\n      name: \"company\",\n      value: this.state.company,\n      onChange: this.handleCompanyChange,\n      options: this.state.companyDetail,\n      placeholder: \"Select company\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 289\n      },\n      __self: this\n    })), renderMessage(this.props.getValidationMessages('company'))), this.state.otherCompanyName === true ? React.createElement(FormGroup, {\n      className: \"centeredRightLabel \".concat(this.getClasses('companyName')),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 304\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      className: \"form-label\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 305\n      },\n      __self: this\n    }, \"Company Name\"), React.createElement(FormControl, {\n      type: \"text\",\n      placeholder: \"Company Name\",\n      name: \"companyName\",\n      value: this.state.companyName,\n      onChange: this.handleChange,\n      autoComplete: \"off\",\n      maxLength: \"35\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 307\n      },\n      __self: this\n    }), renderMessage(this.props.getValidationMessages('companyName'))) : null, React.createElement(FormGroup, {\n      className: \"centeredRightLabel \".concat(this.getClasses('firstName')),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 320\n      },\n      __self: this\n    }, React.createElement(Col, {\n      sm: 4,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 325\n      },\n      __self: this\n    }, \"First Name\"), React.createElement(Col, {\n      sm: 8,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 326\n      },\n      __self: this\n    }, React.createElement(FormControl, {\n      type: \"text\",\n      name: \"firstName\",\n      placeholder: \"First Name\",\n      value: this.state.firstName //     onBlur={self.checkStudentName.bind(self, index)}\n      ,\n      onChange: self.handleChange.bind(self),\n      autoComplete: \"off\",\n      maxLength: \"35\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 327\n      },\n      __self: this\n    }), renderMessage(this.props.getValidationMessages('firstName')))), React.createElement(FormGroup, {\n      className: \"centeredRightLabel \".concat(this.getClasses('lastName')),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 343\n      },\n      __self: this\n    }, React.createElement(Col, {\n      sm: 4,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 348\n      },\n      __self: this\n    }, \"Last Name\"), React.createElement(Col, {\n      sm: 8,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 349\n      },\n      __self: this\n    }, React.createElement(FormControl, {\n      type: \"text\",\n      name: \"lastName\",\n      placeholder: \"Last Name\",\n      value: this.state.lastName //     onBlur={self.checkStudentName.bind(self, index)}\n      ,\n      onChange: self.handleChange.bind(self),\n      autoComplete: \"off\",\n      maxLength: \"35\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 350\n      },\n      __self: this\n    }), renderMessage(this.props.getValidationMessages('lastName')))), React.createElement(FormGroup, {\n      className: \"centeredRightLabel \".concat(this.getClasses('email')),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 365\n      },\n      __self: this\n    }, React.createElement(Col, {\n      sm: 4,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 368\n      },\n      __self: this\n    }, \"Email\"), React.createElement(Col, {\n      sm: 8,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 369\n      },\n      __self: this\n    }, React.createElement(FormControl, {\n      type: \"email\",\n      name: \"email\",\n      placeholder: \"Email \",\n      value: this.state.email,\n      onBlur: self.existMail.bind(self),\n      onChange: self.handleChange.bind(self),\n      autoComplete: \"off\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 370\n      },\n      __self: this\n    }), renderMessage(this.props.getValidationMessages('email'))))))), React.createElement(Modal.Footer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 385\n      },\n      __self: this\n    }, React.createElement(Button, {\n      bsStyle: \"primary no-bold no-round mr-1\",\n      className: \"no-bold no-round\",\n      disabled: isLoading,\n      onClick: !isLoading ? this.validateData : null,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 386\n      },\n      __self: this\n    }, isLoading ? 'Loading...' : 'Save'), React.createElement(Button, {\n      bsStyle: \"default no-bold no-round\",\n      className: \"no-bold no-round\",\n      onClick: this.addStudentModelFun,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 394\n      },\n      __self: this\n    }, \"Close\"))));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    user: state.User.userData,\n    parent: state.User.parentData\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return bindActionCreators({\n    actionGetStudentList,\n    actionSetStudentAsUser\n  }, dispatch);\n};\n\nAddMoreStudent = validation(strategy)(AddMoreStudent);\nexport default connect(mapStateToProps, mapDispatchToProps)(AddMoreStudent);","map":{"version":3,"sources":["/home/ank/Desktop/therapidhiregit/therapidhireui/TheRapidHireUI/src/admin/hruser/addMoreStudent.js"],"names":["React","Component","validation","strategy","classnames","theRapidHireApiService","connect","bindActionCreators","actionGetStudentList","actionSetStudentAsUser","ToastContainer","Select","Button","Modal","Form","FormGroup","Col","ControlLabel","FormControl","renderMessage","setLocalStorage","showSuccessToast","showErrorToast","ZoomInAndOut","CONSTANTS","validationMessages","regExpressions","AddMoreStudent","constructor","props","context","handleCompanyChange","newValue","value","setState","otherCompanyName","company","getValidatorData","state","getClasses","field","error","isValid","validateData","self","validate","console","log","isLoading","handleSubmit","handleChange","event","target","name","submitData","key","preventDefault","existMail","students","user","studentMailList","firstName","lastName","email","streetAddress1","streetAddress2","city","country","zipcode","companyDetail","bind","addStudentModelFun","validatorTypes","createSchema","alphaOnly","required","invalid","componentDidMount","parent","parentFirstName","parentLastName","addStudentModel","getCompanyList","then","response","data","status","result","forEach","push","label","companyName","companyId","catch","err","createdBy","userId","roleId","isActive","response1","closeAddStudentModel","render","cssClasses","root","input","inputProps","onChange","placeholder","type","defaultStyles","position","paddingBottom","display","width","padding","autocompleteContainer","top","backgroundColor","border","autocompleteItem","color","cursor","autocompleteItemActive","getValidationMessages","mapStateToProps","User","userData","parentData","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport validation from 'react-validation-mixin';\r\nimport strategy from 'react-validatorjs-strategy';\r\nimport classnames from 'classnames';\r\nimport theRapidHireApiService from '../../common/core/api/apiService';\r\nimport { connect } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\nimport { actionGetStudentList } from '../../common/core/redux/actions';\r\nimport { actionSetStudentAsUser } from '../../common/core/redux/actions';\r\nimport { ToastContainer } from 'react-toastify';\r\nimport Select from 'react-select';\r\nimport {\r\n  Button,\r\n  Modal,\r\n  Form,\r\n  FormGroup,\r\n  Col,\r\n  ControlLabel,\r\n  FormControl\r\n} from 'react-bootstrap';\r\n\r\nimport {\r\n  renderMessage,\r\n  setLocalStorage,\r\n  showSuccessToast,\r\n  showErrorToast,\r\n  ZoomInAndOut\r\n} from '../../common/commonFunctions';\r\nimport CONSTANTS from '../../common/core/config/appConfig';\r\n\r\nlet validationMessages = CONSTANTS.validationMessages;\r\nlet regExpressions = CONSTANTS.regExpressions;\r\n\r\nclass AddMoreStudent extends Component {\r\n  constructor(props, context) {\r\n    super(props, context);\r\n    this.state = {\r\n      firstName: '',\r\n      lastName: '',\r\n      isLoading: false,\r\n      studentMailList: [{ email: '' }],\r\n      streetAddress1: '',\r\n      streetAddress2: '',\r\n      city: '',\r\n      state: '',\r\n      country: '',\r\n      zipcode: '',\r\n      companyDetail:[]\r\n    };\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  //  this.handleAddMail = this.handleAddMail.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n    this.getValidatorData = this.getValidatorData.bind(this);\r\n    this.getClasses = this.getClasses.bind(this);\r\n    this.addStudentModelFun = this.addStudentModelFun.bind(this);\r\n    this.validatorTypes = strategy.createSchema(\r\n      {\r\n        firstName: ['required', 'regex:' + regExpressions.alphaOnly],\r\n        lastName: ['regex:' + regExpressions.alphaOnly],\r\n        email: 'required|email'\r\n      },\r\n      {\r\n        'required.firstName': validationMessages.firstName.required,\r\n        'regex.firstName': validationMessages.firstName.alphaOnly,\r\n        'regex.lastName': validationMessages.lastName.alphaOnly,\r\n        'required.email': validationMessages.email.required,\r\n        'email.email': validationMessages.email.invalid\r\n      }\r\n    );\r\n  }\r\n\r\n  componentDidMount() {\r\n    if (this.props.parent) {\r\n      this.props.parent['token'] = this.props.user['token'];\r\n    }\r\n    if (this.props.user) {\r\n      let user = this.props.parent ? this.props.parent : this.props.user;\r\n      this.setState({\r\n        user: user,\r\n        parentFirstName: user.firstName,\r\n        parentLastName: user.lastName\r\n      });\r\n      if (this.props.user) {\r\n        this.setState({\r\n          addStudentModel: this.props.addStudentModel\r\n        });\r\n      }\r\n    }\r\n    this.getCompanyList();\r\n  }\r\n\r\n  getCompanyList(){\r\n    theRapidHireApiService('getCompanyList')\r\n    .then(response => {     \r\n      if (response.data.status === 'Success') {\r\n         let companyDetail= this.state.companyDetail;\r\n         response.data.result.forEach(function(data){         \r\n         \r\n            companyDetail.push({label: data.companyName,value:data.companyId })\r\n        })     \r\n         this.setState({companyDetail: companyDetail});\r\n      }\r\n    })\r\n    .catch(err => {\r\n      console.log(err);\r\n    });\r\n  }\r\n\r\n  handleCompanyChange = newValue => {\r\n    if(newValue.value == 1){\r\n       \r\n        // this.validatorTypes.rules['companyName'] = 'required|companyName';\r\n        // this.validatorTypes.messages['required.companyName'] =\r\n        //                                         'Please enter companyName';\r\n        this.setState({otherCompanyName: true});\r\n    }else{\r\n        // this.validatorTypes.rules['companyName'] = '';\r\n        // this.validatorTypes.messages['required.companyName'] =\r\n        //                                         'Please enter companyName';\r\n    }\r\n        this.setState({\r\n        company: newValue\r\n        });\r\n    \r\n  };\r\n\r\n  getValidatorData = () => {\r\n    return this.state;\r\n  };\r\n\r\n  getClasses = field => {\r\n    return classnames({\r\n      error: !this.props.isValid(field)\r\n    });\r\n  };\r\n\r\n  validateData = () => {\r\n    let self = this;\r\n    this.props.validate(function(error) {\r\n      console.log('error', error);\r\n      if (!error) {\r\n        self.setState({ isLoading: true });\r\n        self.handleSubmit();\r\n      }\r\n    });\r\n  };\r\n \r\n  handleChange = event => {\r\n    this.setState({ [event.target.name]: event.target.value });\r\n  };\r\n\r\n  submitData = event => {\r\n    if (event.key === 'Enter') {\r\n      event.preventDefault();\r\n      this.validateData();\r\n    }\r\n  };\r\n\r\n  //   checkStudentName = (index, event) => {\r\n  //     let studentMailList = this.state.studentMailList;\r\n  //     let self = this;\r\n  //     if (event.target.value === '') return false;\r\n\r\n  //     var filter = /^[A-Za-z\\s]+$/;\r\n  //     if (!filter.test(event.target.value)) {\r\n  //       studentMailList[index]['firstName'] = '';\r\n  //       this.setState({ studentMailList: studentMailList });\r\n  //       showErrorToast('Invalid Student Name.');\r\n  //     }\r\n  //   };\r\n\r\n  existMail = event => {\r\n    let students = this.state.user.students;\r\n    let studentMailList = this.state.studentMailList;\r\n    let self = this;  \r\n\r\n    if (event.target.value === '') return false;\r\n\r\n\r\n  };\r\n\r\n  handleSubmit() {\r\n    let self = this;\r\n    let createdBy = this.state.user.userId;\r\n    let roleId = 3;\r\n    let firstName = this.state.firstName;\r\n    let lastName = this.state.lastName;\r\n    let isActive = this.state.user.isActive;\r\n    let email= this.state.email;    \r\n    let companyName = this.state.company && this.state.company.value !== 1? this.state.company.label: this.state.companyName;\r\n    let companyId= this.state.company && this.state.company.value !== 1 ? this.state.company.value: null\r\n    console.log('state ', this.state);\r\n    let data = {\r\n      userId:'',\r\n      firstName,\r\n      lastName,\r\n      email,\r\n      roleId,   \r\n      companyId,\r\n      companyName,\r\n      createdBy      \r\n    };\r\n\r\n    theRapidHireApiService('signupHR', data)\r\n      .then(response1 => {        \r\n            self.setState({ isLoading: false });   \r\n                        \r\n      })\r\n      .catch(err => {\r\n        console.log(err);\r\n      });\r\n  }\r\n\r\n  addStudentModelFun() {\r\n    this.setState({ addStudentModel: this.state.addStudentModel });\r\n    this.props.closeAddStudentModel();\r\n  }\r\n\r\n  render() {\r\n    let self = this;\r\n    const { isLoading } = this.state;\r\n    const cssClasses = {\r\n      root: 'input-group mb-1',\r\n      input: 'form-control'\r\n    };\r\n    const inputProps = {\r\n      value: this.state.streetAddress1,\r\n      onChange: this.onChange,\r\n      placeholder: 'Street Address1',\r\n      type: 'text'\r\n    };\r\n    const defaultStyles = {\r\n      root: {\r\n        position: 'relative',\r\n        paddingBottom: '0px'\r\n      },\r\n      input: {\r\n        display: 'inline-block',\r\n        width: '100%',\r\n        padding: '10px'\r\n      },\r\n      autocompleteContainer: {\r\n        position: 'absolute',\r\n        top: '100%',\r\n        backgroundColor: 'white',\r\n        border: '1px solid #555555',\r\n        width: '100%'\r\n      },\r\n      autocompleteItem: {\r\n        backgroundColor: '#ffffff',\r\n        padding: '10px',\r\n        color: '#555555',\r\n        cursor: 'pointer'\r\n      },\r\n      autocompleteItemActive: {\r\n        backgroundColor: '#fafafa'\r\n      }\r\n    };\r\n\r\n    return (\r\n      <div>\r\n         <ToastContainer\r\n          autoClose={5000}\r\n          className=\"custom-toaster-main-cls\"\r\n          toastClassName=\"custom-toaster-bg\"\r\n          transition={ZoomInAndOut}\r\n        />\r\n        <Modal\r\n          //   bsSize=\"medium\"\r\n          show={this.state.addStudentModel}\r\n          onHide={this.addStudentModelFun}\r\n          backdrop=\"static\"\r\n          keyboard={false}\r\n        >\r\n          <Modal.Header closeButton>\r\n            <Modal.Title className=\"subtitle text-center\">\r\n              Add New Candidate\r\n            </Modal.Title>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n            <Form horizontal className=\"lightBgForm\">\r\n              <Col sm={12}>\r\n\r\n                <FormGroup className={`centeredRightLabel ${this.getClasses('company')}`}>\r\n              <label className=\"form-label\">Add Company</label>\r\n              \r\n                    <div className=\"custom-select\">\r\n                      <span className=\"icon-down_arrow selectIcon\" />\r\n                      <Select\r\n                        className=\"form-control\"                        \r\n                        name=\"company\"\r\n                        value={this.state.company}\r\n                        onChange={this.handleCompanyChange}\r\n                        options={this.state.companyDetail}\r\n                        placeholder=\"Select company\"\r\n                      />\r\n                    </div>                   \r\n                   \r\n                    {renderMessage(this.props.getValidationMessages('company'))}\r\n                </FormGroup>\r\n\r\n                {this.state.otherCompanyName === true ?\r\n\r\n                <FormGroup className={`centeredRightLabel ${this.getClasses('companyName')}`}>\r\n                    <label className=\"form-label\">Company Name</label>\r\n                  \r\n                    <FormControl\r\n                        type=\"text\"\r\n                        placeholder=\"Company Name\"\r\n                        name=\"companyName\"\r\n                        value={this.state.companyName}\r\n                        onChange={this.handleChange}\r\n                        autoComplete=\"off\"\r\n                        maxLength=\"35\"\r\n                    />\r\n                  \r\n                    {renderMessage(this.props.getValidationMessages('companyName'))}\r\n                </FormGroup> : null}\r\n\r\n                <FormGroup\r\n                  className={`centeredRightLabel ${this.getClasses(\r\n                    'firstName'\r\n                  )}`}\r\n                >\r\n                  <Col sm={4}>First Name</Col>\r\n                  <Col sm={8}>\r\n                    <FormControl\r\n                      type=\"text\"\r\n                      name=\"firstName\"\r\n                      placeholder=\"First Name\"\r\n                      value={this.state.firstName}\r\n                      //     onBlur={self.checkStudentName.bind(self, index)}\r\n                      onChange={self.handleChange.bind(self)}\r\n                      autoComplete=\"off\"\r\n                      maxLength=\"35\"\r\n                    />\r\n\r\n                    {renderMessage(\r\n                      this.props.getValidationMessages('firstName')\r\n                    )}\r\n                  </Col>\r\n                </FormGroup>\r\n                <FormGroup\r\n                  className={`centeredRightLabel ${this.getClasses(\r\n                    'lastName'\r\n                  )}`}\r\n                >\r\n                  <Col sm={4}>Last Name</Col>\r\n                  <Col sm={8}>\r\n                    <FormControl\r\n                      type=\"text\"\r\n                      name=\"lastName\"\r\n                      placeholder=\"Last Name\"\r\n                      value={this.state.lastName}\r\n                      //     onBlur={self.checkStudentName.bind(self, index)}\r\n                      onChange={self.handleChange.bind(self)}\r\n                      autoComplete=\"off\"\r\n                      maxLength=\"35\"\r\n                    />\r\n                    {renderMessage(\r\n                      this.props.getValidationMessages('lastName')\r\n                    )}\r\n                  </Col>\r\n                </FormGroup>\r\n                <FormGroup\r\n                  className={`centeredRightLabel ${this.getClasses('email')}`}\r\n                >\r\n                  <Col sm={4}>Email</Col>\r\n                  <Col sm={8}>\r\n                    <FormControl\r\n                      type=\"email\"\r\n                      name=\"email\"\r\n                      placeholder=\"Email \"\r\n                      value={this.state.email}\r\n                      onBlur={self.existMail.bind(self)}\r\n                      onChange={self.handleChange.bind(self)}\r\n                      autoComplete=\"off\"\r\n                    />\r\n                    {renderMessage(this.props.getValidationMessages('email'))}\r\n                  </Col>\r\n                </FormGroup>\r\n              </Col>\r\n            </Form>\r\n          </Modal.Body>\r\n          <Modal.Footer>\r\n            <Button\r\n              bsStyle=\"primary no-bold no-round mr-1\"\r\n              className=\"no-bold no-round\"\r\n              disabled={isLoading}\r\n              onClick={!isLoading ? this.validateData : null}\r\n            >\r\n              {isLoading ? 'Loading...' : 'Save'}\r\n            </Button>\r\n            <Button\r\n              bsStyle=\"default no-bold no-round\"\r\n              className=\"no-bold no-round\"\r\n              onClick={this.addStudentModelFun}\r\n            >\r\n              Close\r\n            </Button>\r\n          </Modal.Footer>\r\n        </Modal>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    user: state.User.userData,\r\n    parent: state.User.parentData\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return bindActionCreators(\r\n    { actionGetStudentList, actionSetStudentAsUser },\r\n    dispatch\r\n  );\r\n};\r\n\r\nAddMoreStudent = validation(strategy)(AddMoreStudent);\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(AddMoreStudent);\r\n"]},"metadata":{},"sourceType":"module"}