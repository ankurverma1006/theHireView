{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ankur\\\\Desktop\\\\therapidhire\\\\therapidhireui\\\\TheRapidHireUI\\\\src\\\\common\\\\authorization\\\\hrSignUp.js\";\nimport React, { Component } from 'react';\nimport { ToastContainer } from 'react-toastify';\nimport validation from 'react-validation-mixin';\nimport strategy from 'react-validatorjs-strategy';\nimport classnames from 'classnames';\nimport { bindActionCreators } from 'redux';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { Button, FormGroup, InputGroup, FormControl, Nav, NavItem } from 'react-bootstrap';\nimport { YearPicker, MonthPicker, DayPicker } from 'react-dropdown-date';\nimport * as qs from 'query-string';\nimport Select from 'react-select';\nimport { actionUserLogin } from '../core/redux/actions';\nimport Sidebar from './sideBar';\nimport theRapidHireApiService from '../core/api/apiService';\nimport { ZoomInAndOut, renderMessage, showErrorToast, encrypt, getIPAddress } from '../commonFunctions';\nimport CONSTANTS from '../core/config/appConfig';\nimport moment from 'moment';\nlet validationMessages = CONSTANTS.validationMessages;\nlet regExpressions = CONSTANTS.regExpressions;\nlet i = 0;\n\nclass HRSignup extends Component {\n  constructor(props, context) {\n    super(props);\n\n    this.setUserInfo = userId => {\n      if (userId) {\n        theRapidHireApiService('getStudentPersonalInfoBeforeLogin', {\n          userId\n        }).then(response => {\n          if (response.data.status === 'Success') {\n            let userData = response.data.result;\n            console.log(userData);\n\n            if (userData) {\n              let firstName = userData.firstName || '';\n              let lastName = userData.lastName || '';\n              let email = userData.email || '';\n              let roleId = userData.roleId === 0 ? 1 : userData.roleId;\n              let invitedRoleId = roleId;\n\n              if (userData.dob) {\n                let day = moment(userData.dob).format('D');\n                let month = Number(moment(userData.dob).format('M')) - 1;\n                let year = moment(userData.dob).format('YYYY');\n                console.log(day, month, year);\n                this.setState({\n                  day,\n                  month,\n                  year\n                });\n              }\n\n              if (this.state.invite === CONSTANTS.INVITE_0) {\n                this.setValidatorTypes(roleId);\n              }\n\n              this.setState({\n                firstName,\n                lastName,\n                email,\n                invitedRoleId,\n                roleId\n              });\n            }\n          }\n        }).catch(err => {\n          console.log(err);\n        });\n      }\n    };\n\n    this.handleChange = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n\n    this.handleSelect = tabValue => {\n      let eventKey = Number(tabValue);\n\n      if (eventKey !== this.state.roleId && this.props.location.search === '') {\n        this.setState({\n          firstName: '',\n          lastName: '',\n          email: '',\n          newPassword: '',\n          confirmNewPassword: '',\n          companyName: '' // parentEmail: '',\n          // parentFirstName: '',\n          // parentLastName: '',\n          // year: '',\n          // month: '',\n          // day: ''\n\n        });\n      }\n\n      this.setState({\n        roleId: 3,\n        eventKey: eventKey\n      });\n      this.props.clearValidations();\n      this.setValidatorTypes(eventKey);\n    };\n\n    this.handleResetForm = () => {\n      this.setState(this.initialState);\n    };\n\n    this.submitData = event => {\n      if (event.key === 'Enter') {\n        event.preventDefault();\n        this.validateData();\n      }\n    };\n\n    this.validateData = () => {\n      console.log('validateData -- ');\n      let self = this;\n      this.props.validate(function (error) {\n        if (!error) {\n          //self.setState({ isLoading: true });\n          self.handleSubmit();\n        }\n      });\n    };\n\n    this.handleCompanyChange = newValue => {\n      if (newValue.value == 1) {\n        // this.validatorTypes.rules['companyName'] = 'required|companyName';\n        // this.validatorTypes.messages['required.companyName'] =\n        //                                         'Please enter companyName';\n        this.setState({\n          otherCompanyName: true\n        });\n      } else {// this.validatorTypes.rules['companyName'] = '';\n        // this.validatorTypes.messages['required.companyName'] =\n        //                                         'Please enter companyName';\n      }\n\n      this.setState({\n        company: newValue\n      });\n    };\n\n    this.state = {\n      isLoading: false,\n      userId: '',\n      firstName: '',\n      lastName: '',\n      email: '',\n      newPassword: '',\n      confirmNewPassword: '',\n      parentEmail: '',\n      parentFirstName: '',\n      parentLastName: '',\n      year: '',\n      month: '',\n      day: '',\n      roleId: this.props.location.state && this.props.location.state.eventKey && this.props.location.state.eventKey === 2 ? 1 : 1,\n      eventKey: this.props.location.state && this.props.location.state.eventKey && this.props.location.state.eventKey === 2 ? 2 : 1,\n      parentField: false,\n      invite: CONSTANTS.INVITE_4,\n      invitedRoleId: 1,\n      otherCompanyName: false,\n      companyDetail: []\n    };\n    this.initialState = this.state;\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.getValidatorData = this.getValidatorData.bind(this);\n    this.getClasses = this.getClasses.bind(this);\n    this.setValidatorTypes = this.setValidatorTypes.bind(this);\n  }\n\n  componentWillMount() {\n    console.log('call');\n    this.setValidatorTypes(this.props.location.state && this.props.location.state.eventKey && this.props.location.state.eventKey === 2 ? 2 : 1);\n  }\n\n  componentDidMount() {\n    if (this.props.location.search) {\n      const parsed = qs.parse(this.props.location.search);\n      const invite = parsed.invite;\n      const userId = parsed.userId;\n      this.setState({\n        invite,\n        userId\n      });\n      this.setUserInfo(userId);\n\n      let _this = this;\n\n      getIPAddress(function (ip) {\n        _this.setState({\n          deviceId: ip\n        });\n      });\n    }\n\n    this.getCompanyList();\n  }\n\n  getCompanyList() {\n    theRapidHireApiService('getCompanyList').then(response => {\n      if (response.data.status === 'Success') {\n        let companyDetail = this.state.companyDetail;\n        response.data.result.forEach(function (data) {\n          companyDetail.push({\n            label: data.companyName,\n            value: data.companyId\n          });\n        });\n        this.setState({\n          companyDetail: companyDetail\n        });\n      }\n    }).catch(err => {\n      console.log(err);\n    });\n  } // type = 1 = student,   type = 2 = parent\n\n\n  setValidatorTypes(type) {\n    console.log(type);\n    type = Number(type); // Common validation for student and parent\n\n    let elementObject = {\n      firstName: ['required', 'regex:' + regExpressions.alphaOnly],\n      lastName: ['required', 'regex:' + regExpressions.alphaOnly],\n      email: 'required|email' // //   newPassword: ['required', 'regex:' + regExpressions.passwordPattern],\n      //  confirmNewPassword: 'required|same:newPassword'\n\n    };\n    let messageObject = {\n      'required.firstName': validationMessages.firstName.required,\n      'regex.firstName': validationMessages.firstName.alphaOnly,\n      'required.lastName': validationMessages.lastName.required,\n      'regex.lastName': validationMessages.lastName.alphaOnly,\n      'required.email': validationMessages.email.required,\n      'email.email': validationMessages.email.invalid //     'required.newPassword': validationMessages.password.newPassword,\n      //     'regex.newPassword': validationMessages.password.passwordPattern,\n      // 'required.confirmNewPassword':\n      //   validationMessages.password.confirmNewPassword,\n      // 'same.confirmNewPassword': validationMessages.password.same\n\n    };\n    this.validatorTypes = strategy.createSchema(elementObject, messageObject);\n  }\n\n  getValidatorData() {\n    return this.state;\n  }\n\n  getClasses(field) {\n    return classnames({\n      error: !this.props.isValid(field)\n    });\n  }\n\n  handleSubmit() {\n    let firstName = this.state.firstName.trim();\n    let lastName = this.state.lastName.trim();\n    let email = this.state.email.toLowerCase().trim(); //   let password = encrypt(this.state.newPassword.trim());\n\n    let roleId = 3;\n    let userId = this.state.userId;\n    let deviceId = this.state.deviceId;\n    console.log(this.state.company);\n    let companyName = this.state.company && this.state.company.value !== 1 ? this.state.company.label : this.state.companyName;\n    let companyId = this.state.company && this.state.company.value !== 1 ? this.state.company.value : null;\n    let students = [];\n    let self = this;\n    let data = {\n      firstName,\n      lastName,\n      email,\n      //      password,\n      //  dob,\n      //    parentEmail,\n      //   parentFirstName,\n      //   parentLastName,\n      roleId,\n      companyId,\n      companyName,\n      //    invite,\n      userId: ''\n    };\n    console.log(data);\n    theRapidHireApiService('signupHR', data).then(response => {\n      if (response.data.status === 'Success') {\n        if (self.state.invite === CONSTANTS.INVITE_1 || self.state.invite === CONSTANTS.INVITE_2 || self.state.invite === CONSTANTS.INVITE_3) {\n          let loginData = {\n            email,\n            deviceId\n          };\n          this.props.actionUserLogin(loginData).then(response => {\n            if (response.payload && response.payload.data.status === 'Success') {\n              self.setState({\n                isLoading: false\n              });\n              const userResponse = response.payload.data.result;\n\n              if (userResponse && userResponse.token) {\n                if (userResponse.roleId === 1) {}\n              }\n            }\n          }).catch(error => {\n            self.setState({\n              isLoading: false,\n              password: ''\n            });\n            console.log('err', error);\n          });\n        } else {\n          self.setState({\n            isLoading: false,\n            firstName: '',\n            lastName: '',\n            email: '',\n            newPassword: '',\n            confirmNewPassword: '' // day: '',\n            // month: '',\n            // year: '',\n            // parentFirstName: '',\n            // parentLastName: ''\n\n          });\n          setTimeout(function () {\n            self.props.history.push('/login');\n          }, 5000);\n        }\n      } else {\n        self.setState({\n          isLoading: false\n        });\n      }\n    }).catch(err => {\n      self.setState({\n        isLoading: false\n      });\n      console.log(err);\n    });\n  }\n\n  selectDate(type, value) {\n    if (this.state.roleId === CONSTANTS.STUDENT_ROLE) {\n      if (type === 'year') {\n        this.setState({\n          year: value\n        }, () => this.checkAge());\n      }\n\n      if (type === 'month') {\n        this.setState({\n          month: value\n        }, () => this.checkAge());\n      }\n\n      if (type === 'day') {\n        this.setState({\n          day: value\n        }, () => this.checkAge());\n      }\n    } else if (this.state.roleId === CONSTANTS.PARENT_ROLE) {\n      if (type === 'year') {\n        this.setState({\n          year: value\n        });\n      }\n\n      if (type === 'month') {\n        this.setState({\n          month: value\n        });\n      }\n\n      if (type === 'day') {\n        this.setState({\n          day: value\n        });\n      }\n    }\n  }\n\n  checkAge() {\n    if (this.state.year && this.state.month && this.state.day) {\n      let day = this.state.day;\n      let month = Number(this.state.month);\n      let year = this.state.year;\n      let birthDate = new Date(year, month, day);\n      var today = new Date();\n\n      if (birthDate > today) {\n        showErrorToast('Please select valid date');\n      }\n\n      let age = today.getFullYear() - birthDate.getFullYear();\n\n      if (this.state.invite === CONSTANTS.INVITE_0 || this.state.invite === CONSTANTS.INVITE_1 || this.state.invite === CONSTANTS.INVITE_2 || this.state.invite === CONSTANTS.INVITE_3) {\n        this.setState({\n          parentField: false\n        });\n      } else if (age <= 13) {\n        this.setState({\n          parentField: true\n        });\n        this.validatorTypes.rules['parentEmail'] = 'required|email';\n        this.validatorTypes.messages['required.parentEmail'] = 'Please enter parent email address';\n        this.validatorTypes.messages['email.parentEmail'] = 'Please enter a valid parent email address';\n        this.validatorTypes.rules['parentFirstName'] = 'required|regex:' + regExpressions.alphaOnly;\n        this.validatorTypes.messages['required.parentFirstName'] = validationMessages.parentName.required;\n        this.validatorTypes.messages['regex.parentFirstName'] = validationMessages.parentName.alphaOnly;\n      } else {\n        this.setState({\n          parentField: false,\n          parentFirstName: '',\n          parentEmail: ''\n        });\n        this.validatorTypes.rules['parentEmail'] = 'email';\n        this.validatorTypes.messages['required.parentEmail'] = '';\n        this.validatorTypes.messages['email.parentEmail'] = 'Please enter a valid parent email address';\n        this.validatorTypes.rules['parentFirstName'] = 'regex:' + regExpressions.alphaOnly;\n        this.validatorTypes.messages['required.parentFirstName'] = '';\n      }\n    }\n  }\n\n  render() {\n    const isLoading = this.state.isLoading;\n    var readOnly = false;\n\n    if (this.state.invite === CONSTANTS.INVITE_0 || this.state.invite === CONSTANTS.INVITE_1 || this.state.invite === CONSTANTS.INVITE_2 || this.state.invite === CONSTANTS.INVITE_3) {\n      readOnly = true;\n    } else {\n      readOnly = false;\n    }\n\n    return React.createElement(\"div\", {\n      className: \"wrapper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 483\n      },\n      __self: this\n    }, React.createElement(ToastContainer, {\n      autoClose: 5000,\n      className: \"custom-toaster-main-cls\",\n      toastClassName: \"custom-toaster-bg\",\n      transition: ZoomInAndOut,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 484\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"main-panel\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 490\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"banner\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 491\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"overlay\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 492\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"banner-content\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 493\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"login_card\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 494\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 495\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"formContent forgotPasswordForm bg-transparent\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 496\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"centeredBox p-7\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 497\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: {\n        position: 'relative'\n      },\n      className: \"flex align-center mb-1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 498\n      },\n      __self: this\n    }, React.createElement(Link, {\n      to: \"/login\",\n      className: \"md-icon mr-1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 502\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"icon-back_arrow2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 503\n      },\n      __self: this\n    })), React.createElement(\"legend\", {\n      className: \"color-blue mb-0\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 505\n      },\n      __self: this\n    }, \"Back To Login\")), React.createElement(Nav, {\n      bsStyle: \"tabs\",\n      activeKey: 4,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 509\n      },\n      __self: this\n    }, React.createElement(NavItem, {\n      eventKey: 2,\n      onClick: () => this.props.history.push({\n        pathname: '/signup',\n        state: {\n          eventKey: 2\n        }\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 510\n      },\n      __self: this\n    }, \"Interviewer SIGN UP\"), React.createElement(NavItem, {\n      eventKey: 1,\n      onClick: () => this.props.history.push({\n        pathname: '/signup',\n        state: {\n          eventKey: 1\n        }\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 523\n      },\n      __self: this\n    }, \"USER SIGN UP\"), React.createElement(NavItem, {\n      eventKey: 4,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 536\n      },\n      __self: this\n    }, \"HR SIGN UP\")), React.createElement(\"form\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 539\n      },\n      __self: this\n    }, React.createElement(FormGroup, {\n      style: {\n        position: 'relative'\n      },\n      className: this.getClasses('company'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 540\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      className: \"form-label\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 544\n      },\n      __self: this\n    }, \"Add Company\"), React.createElement(\"div\", {\n      className: \"custom-select\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 546\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"icon-down_arrow selectIcon\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 547\n      },\n      __self: this\n    }), React.createElement(Select, {\n      className: \"form-control\",\n      name: \"company\",\n      value: this.state.company,\n      onChange: this.handleCompanyChange,\n      options: this.state.companyDetail,\n      placeholder: \"Select company\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 548\n      },\n      __self: this\n    })), renderMessage(this.props.getValidationMessages('company'))), this.state.otherCompanyName === true ? React.createElement(FormGroup, {\n      style: {\n        position: 'relative'\n      },\n      className: this.getClasses('companyName'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 564\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      className: \"form-label\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 568\n      },\n      __self: this\n    }, \"Company Name\"), React.createElement(FormControl, {\n      type: \"text\",\n      placeholder: \"Company Name\",\n      name: \"companyName\",\n      value: this.state.companyName,\n      onChange: this.handleChange,\n      autoComplete: \"off\",\n      maxLength: \"35\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 570\n      },\n      __self: this\n    }), renderMessage(this.props.getValidationMessages('companyName'))) : null, React.createElement(FormGroup, {\n      style: {\n        position: 'relative'\n      },\n      className: this.getClasses('firstName'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 586\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      className: \"form-label\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 590\n      },\n      __self: this\n    }, \"First Name\"), React.createElement(FormControl, {\n      type: \"text\",\n      placeholder: \"First Name\",\n      name: \"firstName\",\n      value: this.state.firstName,\n      onChange: this.handleChange,\n      autoComplete: \"off\",\n      maxLength: \"35\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 592\n      },\n      __self: this\n    }), renderMessage(this.props.getValidationMessages('firstName'))), React.createElement(FormGroup, {\n      style: {\n        position: 'relative'\n      },\n      className: this.getClasses('lastName'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 607\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      className: \"form-label\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 611\n      },\n      __self: this\n    }, \"Last Name\"), React.createElement(FormControl, {\n      type: \"text\",\n      placeholder: \"Last Name\",\n      name: \"lastName\",\n      value: this.state.lastName,\n      onChange: this.handleChange,\n      autoComplete: \"off\",\n      maxLength: \"35\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 613\n      },\n      __self: this\n    }), renderMessage(this.props.getValidationMessages('lastName'))), React.createElement(FormGroup, {\n      style: {\n        position: 'relative'\n      },\n      className: this.getClasses('email'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 628\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      className: \"form-label\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 632\n      },\n      __self: this\n    }, \"Email\"), React.createElement(FormControl, {\n      type: \"Email\",\n      placeholder: \"Email\",\n      name: \"email\",\n      value: this.state.email,\n      onChange: this.handleChange,\n      autoComplete: \"off\",\n      onKeyPress: this.submitData,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 634\n      },\n      __self: this\n    }), renderMessage(this.props.getValidationMessages('email'))), React.createElement(FormGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 649\n      },\n      __self: this\n    }, React.createElement(Button, {\n      bsStyle: \"primary\",\n      className: \"centeredBtn btn-lg\",\n      disabled: isLoading,\n      onClick: !isLoading ? this.validateData : null,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 650\n      },\n      __self: this\n    }, isLoading ? 'In Progress...' : 'Sign Up')))), ' '))))), ' '));\n  }\n\n}\n\nconst mapDispatchToProps = dispatch => {\n  return bindActionCreators({\n    actionUserLogin\n  }, dispatch);\n};\n\nHRSignup = validation(strategy)(HRSignup);\nexport default connect(null, mapDispatchToProps)(HRSignup);","map":{"version":3,"sources":["C:\\Users\\Ankur\\Desktop\\therapidhire\\therapidhireui\\TheRapidHireUI\\src\\common\\authorization\\hrSignUp.js"],"names":["React","Component","ToastContainer","validation","strategy","classnames","bindActionCreators","Link","connect","Button","FormGroup","InputGroup","FormControl","Nav","NavItem","YearPicker","MonthPicker","DayPicker","qs","Select","actionUserLogin","Sidebar","theRapidHireApiService","ZoomInAndOut","renderMessage","showErrorToast","encrypt","getIPAddress","CONSTANTS","moment","validationMessages","regExpressions","i","HRSignup","constructor","props","context","setUserInfo","userId","then","response","data","status","userData","result","console","log","firstName","lastName","email","roleId","invitedRoleId","dob","day","format","month","Number","year","setState","state","invite","INVITE_0","setValidatorTypes","catch","err","handleChange","event","target","name","value","handleSelect","tabValue","eventKey","location","search","newPassword","confirmNewPassword","companyName","clearValidations","handleResetForm","initialState","submitData","key","preventDefault","validateData","self","validate","error","handleSubmit","handleCompanyChange","newValue","otherCompanyName","company","isLoading","parentEmail","parentFirstName","parentLastName","parentField","INVITE_4","companyDetail","bind","getValidatorData","getClasses","componentWillMount","componentDidMount","parsed","parse","_this","ip","deviceId","getCompanyList","forEach","push","label","companyId","type","elementObject","alphaOnly","messageObject","required","invalid","validatorTypes","createSchema","field","isValid","trim","toLowerCase","students","INVITE_1","INVITE_2","INVITE_3","loginData","payload","userResponse","token","password","setTimeout","history","selectDate","STUDENT_ROLE","checkAge","PARENT_ROLE","birthDate","Date","today","age","getFullYear","rules","messages","parentName","render","readOnly","position","pathname","getValidationMessages","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { ToastContainer } from 'react-toastify';\r\nimport validation from 'react-validation-mixin';\r\nimport strategy from 'react-validatorjs-strategy';\r\nimport classnames from 'classnames';\r\nimport { bindActionCreators } from 'redux';\r\nimport { Link } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport {\r\n  Button,\r\n  FormGroup,\r\n  InputGroup,\r\n  FormControl,\r\n  Nav,\r\n  NavItem\r\n} from 'react-bootstrap';\r\nimport { YearPicker, MonthPicker, DayPicker } from 'react-dropdown-date';\r\nimport * as qs from 'query-string';\r\nimport Select from 'react-select';\r\nimport { actionUserLogin } from '../core/redux/actions';\r\nimport Sidebar from './sideBar';\r\nimport theRapidHireApiService from '../core/api/apiService';\r\nimport {\r\n  ZoomInAndOut,\r\n  renderMessage,\r\n  showErrorToast,\r\n  encrypt,\r\n  getIPAddress\r\n} from '../commonFunctions';\r\nimport CONSTANTS from '../core/config/appConfig';\r\nimport moment from 'moment';\r\n\r\nlet validationMessages = CONSTANTS.validationMessages;\r\nlet regExpressions = CONSTANTS.regExpressions;\r\nlet i = 0;\r\n\r\nclass HRSignup extends Component {\r\n  constructor(props, context) {\r\n    super(props);\r\n    this.state = {\r\n      isLoading: false,\r\n      userId: '',\r\n      firstName: '',\r\n      lastName: '',\r\n      email: '',\r\n      newPassword: '',\r\n      confirmNewPassword: '',\r\n      parentEmail: '',\r\n      parentFirstName: '',\r\n      parentLastName: '',\r\n      year: '',\r\n      month: '',\r\n      day: '',\r\n      roleId:\r\n        this.props.location.state &&\r\n        this.props.location.state.eventKey &&\r\n        this.props.location.state.eventKey === 2\r\n          ? 1\r\n          : 1,\r\n      eventKey:\r\n        this.props.location.state &&\r\n        this.props.location.state.eventKey &&\r\n        this.props.location.state.eventKey === 2\r\n          ? 2\r\n          : 1,\r\n      parentField: false,\r\n      invite: CONSTANTS.INVITE_4,\r\n      invitedRoleId: 1,\r\n      otherCompanyName: false,\r\n      companyDetail: []\r\n    };\r\n\r\n    this.initialState = this.state;\r\n\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n    this.getValidatorData = this.getValidatorData.bind(this);\r\n    this.getClasses = this.getClasses.bind(this);\r\n    this.setValidatorTypes = this.setValidatorTypes.bind(this);\r\n  }\r\n\r\n  componentWillMount() {\r\n    console.log('call');\r\n    this.setValidatorTypes(\r\n      this.props.location.state &&\r\n        this.props.location.state.eventKey &&\r\n        this.props.location.state.eventKey === 2\r\n        ? 2\r\n        : 1\r\n    );\r\n  }\r\n\r\n  componentDidMount() {\r\n    if (this.props.location.search) {\r\n      const parsed = qs.parse(this.props.location.search);\r\n      const invite = parsed.invite;\r\n      const userId = parsed.userId;\r\n      this.setState({\r\n        invite,\r\n        userId\r\n      });\r\n      this.setUserInfo(userId);\r\n      let _this = this;\r\n      getIPAddress(function(ip) {\r\n        _this.setState({\r\n          deviceId: ip\r\n        });\r\n      });\r\n    }\r\n    this.getCompanyList();\r\n  }\r\n\r\n  setUserInfo = userId => {\r\n    if (userId) {\r\n      theRapidHireApiService('getStudentPersonalInfoBeforeLogin', { userId })\r\n        .then(response => {\r\n          if (response.data.status === 'Success') {\r\n            let userData = response.data.result;\r\n            console.log(userData);\r\n            if (userData) {\r\n              let firstName = userData.firstName || '';\r\n              let lastName = userData.lastName || '';\r\n              let email = userData.email || '';\r\n              let roleId = userData.roleId === 0 ? 1 : userData.roleId;\r\n              let invitedRoleId = roleId;\r\n              if (userData.dob) {\r\n                let day = moment(userData.dob).format('D');\r\n                let month = Number(moment(userData.dob).format('M')) - 1;\r\n                let year = moment(userData.dob).format('YYYY');\r\n                console.log(day, month, year);\r\n                this.setState({\r\n                  day,\r\n                  month,\r\n                  year\r\n                });\r\n              }\r\n\r\n              if (this.state.invite === CONSTANTS.INVITE_0) {\r\n                this.setValidatorTypes(roleId);\r\n              }\r\n              this.setState({\r\n                firstName,\r\n                lastName,\r\n                email,\r\n                invitedRoleId,\r\n                roleId\r\n              });\r\n            }\r\n          }\r\n        })\r\n        .catch(err => {\r\n          console.log(err);\r\n        });\r\n    }\r\n  };\r\n\r\n  getCompanyList() {\r\n    theRapidHireApiService('getCompanyList')\r\n      .then(response => {\r\n        if (response.data.status === 'Success') {\r\n          let companyDetail = this.state.companyDetail;\r\n          response.data.result.forEach(function(data) {\r\n            companyDetail.push({\r\n              label: data.companyName,\r\n              value: data.companyId\r\n            });\r\n          });\r\n          this.setState({ companyDetail: companyDetail });\r\n        }\r\n      })\r\n      .catch(err => {\r\n        console.log(err);\r\n      });\r\n  }\r\n\r\n  // type = 1 = student,   type = 2 = parent\r\n  setValidatorTypes(type) {\r\n    console.log(type);\r\n    type = Number(type);\r\n\r\n    // Common validation for student and parent\r\n    let elementObject = {\r\n      firstName: ['required', 'regex:' + regExpressions.alphaOnly],\r\n      lastName: ['required', 'regex:' + regExpressions.alphaOnly],\r\n      email: 'required|email'\r\n      // //   newPassword: ['required', 'regex:' + regExpressions.passwordPattern],\r\n      //  confirmNewPassword: 'required|same:newPassword'\r\n    };\r\n\r\n    let messageObject = {\r\n      'required.firstName': validationMessages.firstName.required,\r\n      'regex.firstName': validationMessages.firstName.alphaOnly,\r\n      'required.lastName': validationMessages.lastName.required,\r\n      'regex.lastName': validationMessages.lastName.alphaOnly,\r\n      'required.email': validationMessages.email.required,\r\n      'email.email': validationMessages.email.invalid\r\n      //     'required.newPassword': validationMessages.password.newPassword,\r\n      //     'regex.newPassword': validationMessages.password.passwordPattern,\r\n      // 'required.confirmNewPassword':\r\n      //   validationMessages.password.confirmNewPassword,\r\n      // 'same.confirmNewPassword': validationMessages.password.same\r\n    };\r\n    this.validatorTypes = strategy.createSchema(elementObject, messageObject);\r\n  }\r\n\r\n  getValidatorData() {\r\n    return this.state;\r\n  }\r\n\r\n  getClasses(field) {\r\n    return classnames({\r\n      error: !this.props.isValid(field)\r\n    });\r\n  }\r\n\r\n  handleChange = event => {\r\n    this.setState({ [event.target.name]: event.target.value });\r\n  };\r\n\r\n  handleSelect = tabValue => {\r\n    let eventKey = Number(tabValue);\r\n    if (eventKey !== this.state.roleId && this.props.location.search === '') {\r\n      this.setState({\r\n        firstName: '',\r\n        lastName: '',\r\n        email: '',\r\n        newPassword: '',\r\n        confirmNewPassword: '',\r\n        companyName: ''\r\n        // parentEmail: '',\r\n        // parentFirstName: '',\r\n        // parentLastName: '',\r\n        // year: '',\r\n        // month: '',\r\n        // day: ''\r\n      });\r\n    }\r\n\r\n    this.setState({\r\n      roleId: 3,\r\n      eventKey: eventKey\r\n    });\r\n    this.props.clearValidations();\r\n    this.setValidatorTypes(eventKey);\r\n  };\r\n\r\n  handleResetForm = () => {\r\n    this.setState(this.initialState);\r\n  };\r\n\r\n  submitData = event => {\r\n    if (event.key === 'Enter') {\r\n      event.preventDefault();\r\n      this.validateData();\r\n    }\r\n  };\r\n\r\n  validateData = () => {\r\n    console.log('validateData -- ');\r\n    let self = this;\r\n    this.props.validate(function(error) {\r\n      if (!error) {\r\n        //self.setState({ isLoading: true });\r\n        self.handleSubmit();\r\n      }\r\n    });\r\n  };\r\n\r\n  handleCompanyChange = newValue => {\r\n    if (newValue.value == 1) {\r\n      // this.validatorTypes.rules['companyName'] = 'required|companyName';\r\n      // this.validatorTypes.messages['required.companyName'] =\r\n      //                                         'Please enter companyName';\r\n      this.setState({ otherCompanyName: true });\r\n    } else {\r\n      // this.validatorTypes.rules['companyName'] = '';\r\n      // this.validatorTypes.messages['required.companyName'] =\r\n      //                                         'Please enter companyName';\r\n    }\r\n    this.setState({\r\n      company: newValue\r\n    });\r\n  };\r\n\r\n  handleSubmit() {\r\n    let firstName = this.state.firstName.trim();\r\n    let lastName = this.state.lastName.trim();\r\n    let email = this.state.email.toLowerCase().trim();\r\n    //   let password = encrypt(this.state.newPassword.trim());\r\n    let roleId = 3;\r\n    let userId = this.state.userId;\r\n    let deviceId = this.state.deviceId;\r\n    console.log(this.state.company);\r\n    let companyName =\r\n      this.state.company && this.state.company.value !== 1\r\n        ? this.state.company.label\r\n        : this.state.companyName;\r\n    let companyId =\r\n      this.state.company && this.state.company.value !== 1\r\n        ? this.state.company.value\r\n        : null;\r\n    let students = [];\r\n    let self = this;\r\n\r\n    let data = {\r\n      firstName,\r\n      lastName,\r\n      email,\r\n      //      password,\r\n      //  dob,\r\n      //    parentEmail,\r\n      //   parentFirstName,\r\n      //   parentLastName,\r\n      roleId,\r\n      companyId,\r\n      companyName,\r\n      //    invite,\r\n      userId: ''\r\n    };\r\n\r\n    console.log(data);\r\n\r\n    theRapidHireApiService('signupHR', data)\r\n      .then(response => {\r\n        if (response.data.status === 'Success') {\r\n          if (\r\n            self.state.invite === CONSTANTS.INVITE_1 ||\r\n            self.state.invite === CONSTANTS.INVITE_2 ||\r\n            self.state.invite === CONSTANTS.INVITE_3\r\n          ) {\r\n            let loginData = {\r\n              email,\r\n              deviceId\r\n            };\r\n\r\n            this.props\r\n              .actionUserLogin(loginData)\r\n              .then(response => {\r\n                if (\r\n                  response.payload &&\r\n                  response.payload.data.status === 'Success'\r\n                ) {\r\n                  self.setState({\r\n                    isLoading: false\r\n                  });\r\n                  const userResponse = response.payload.data.result;\r\n                  if (userResponse && userResponse.token) {\r\n                    if (userResponse.roleId === 1) {\r\n                    }\r\n                  }\r\n                }\r\n              })\r\n              .catch(error => {\r\n                self.setState({\r\n                  isLoading: false,\r\n                  password: ''\r\n                });\r\n                console.log('err', error);\r\n              });\r\n          } else {\r\n            self.setState({\r\n              isLoading: false,\r\n              firstName: '',\r\n              lastName: '',\r\n              email: '',\r\n              newPassword: '',\r\n              confirmNewPassword: ''\r\n              // day: '',\r\n              // month: '',\r\n              // year: '',\r\n              // parentFirstName: '',\r\n              // parentLastName: ''\r\n            });\r\n            setTimeout(function() {\r\n              self.props.history.push('/login');\r\n            }, 5000);\r\n          }\r\n        } else {\r\n          self.setState({ isLoading: false });\r\n        }\r\n      })\r\n      .catch(err => {\r\n        self.setState({ isLoading: false });\r\n        console.log(err);\r\n      });\r\n  }\r\n\r\n  selectDate(type, value) {\r\n    if (this.state.roleId === CONSTANTS.STUDENT_ROLE) {\r\n      if (type === 'year') {\r\n        this.setState({ year: value }, () => this.checkAge());\r\n      }\r\n      if (type === 'month') {\r\n        this.setState({ month: value }, () => this.checkAge());\r\n      }\r\n      if (type === 'day') {\r\n        this.setState({ day: value }, () => this.checkAge());\r\n      }\r\n    } else if (this.state.roleId === CONSTANTS.PARENT_ROLE) {\r\n      if (type === 'year') {\r\n        this.setState({ year: value });\r\n      }\r\n      if (type === 'month') {\r\n        this.setState({ month: value });\r\n      }\r\n      if (type === 'day') {\r\n        this.setState({ day: value });\r\n      }\r\n    }\r\n  }\r\n\r\n  checkAge() {\r\n    if (this.state.year && this.state.month && this.state.day) {\r\n      let day = this.state.day;\r\n      let month = Number(this.state.month);\r\n      let year = this.state.year;\r\n\r\n      let birthDate = new Date(year, month, day);\r\n      var today = new Date();\r\n\r\n      if (birthDate > today) {\r\n        showErrorToast('Please select valid date');\r\n      }\r\n\r\n      let age = today.getFullYear() - birthDate.getFullYear();\r\n\r\n      if (\r\n        this.state.invite === CONSTANTS.INVITE_0 ||\r\n        this.state.invite === CONSTANTS.INVITE_1 ||\r\n        this.state.invite === CONSTANTS.INVITE_2 ||\r\n        this.state.invite === CONSTANTS.INVITE_3\r\n      ) {\r\n        this.setState({\r\n          parentField: false\r\n        });\r\n      } else if (age <= 13) {\r\n        this.setState({\r\n          parentField: true\r\n        });\r\n        this.validatorTypes.rules['parentEmail'] = 'required|email';\r\n        this.validatorTypes.messages['required.parentEmail'] =\r\n          'Please enter parent email address';\r\n        this.validatorTypes.messages['email.parentEmail'] =\r\n          'Please enter a valid parent email address';\r\n\r\n        this.validatorTypes.rules['parentFirstName'] =\r\n          'required|regex:' + regExpressions.alphaOnly;\r\n        this.validatorTypes.messages['required.parentFirstName'] =\r\n          validationMessages.parentName.required;\r\n        this.validatorTypes.messages['regex.parentFirstName'] =\r\n          validationMessages.parentName.alphaOnly;\r\n      } else {\r\n        this.setState({\r\n          parentField: false,\r\n          parentFirstName: '',\r\n          parentEmail: ''\r\n        });\r\n        this.validatorTypes.rules['parentEmail'] = 'email';\r\n        this.validatorTypes.messages['required.parentEmail'] = '';\r\n        this.validatorTypes.messages['email.parentEmail'] =\r\n          'Please enter a valid parent email address';\r\n\r\n        this.validatorTypes.rules['parentFirstName'] =\r\n          'regex:' + regExpressions.alphaOnly;\r\n        this.validatorTypes.messages['required.parentFirstName'] = '';\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { isLoading } = this.state;\r\n    var readOnly = false;\r\n    if (\r\n      this.state.invite === CONSTANTS.INVITE_0 ||\r\n      this.state.invite === CONSTANTS.INVITE_1 ||\r\n      this.state.invite === CONSTANTS.INVITE_2 ||\r\n      this.state.invite === CONSTANTS.INVITE_3\r\n    ) {\r\n      readOnly = true;\r\n    } else {\r\n      readOnly = false;\r\n    }\r\n    return (\r\n      <div className=\"wrapper\">\r\n        <ToastContainer\r\n          autoClose={5000}\r\n          className=\"custom-toaster-main-cls\"\r\n          toastClassName=\"custom-toaster-bg\"\r\n          transition={ZoomInAndOut}\r\n        />\r\n        <div className=\"main-panel\">\r\n          <div className=\"banner\">\r\n            <div className=\"overlay\"></div>\r\n            <div className=\"banner-content\">\r\n              <div className=\"login_card\">\r\n                <div className=\"header\">\r\n                  <div className=\"formContent forgotPasswordForm bg-transparent\">\r\n                    <div className=\"centeredBox p-7\">\r\n                      <div\r\n                        style={{ position: 'relative' }}\r\n                        className=\"flex align-center mb-1\"\r\n                      >\r\n                        <Link to=\"/login\" className=\"md-icon mr-1\">\r\n                          <span className=\"icon-back_arrow2\" />\r\n                        </Link>\r\n                        <legend className=\"color-blue mb-0\">\r\n                          Back To Login\r\n                        </legend>\r\n                      </div>\r\n                      <Nav bsStyle=\"tabs\" activeKey={4}>\r\n                        <NavItem\r\n                          eventKey={2}\r\n                          onClick={() =>\r\n                            this.props.history.push({\r\n                              pathname: '/signup',\r\n                              state: {\r\n                                eventKey: 2\r\n                              }\r\n                            })\r\n                          }\r\n                        >\r\n                          Interviewer SIGN UP\r\n                        </NavItem>\r\n                        <NavItem\r\n                          eventKey={1}\r\n                          onClick={() =>\r\n                            this.props.history.push({\r\n                              pathname: '/signup',\r\n                              state: {\r\n                                eventKey: 1\r\n                              }\r\n                            })\r\n                          }\r\n                        >\r\n                          USER SIGN UP\r\n                        </NavItem>\r\n                        <NavItem eventKey={4}>HR SIGN UP</NavItem>\r\n                      </Nav>\r\n\r\n                      <form>\r\n                        <FormGroup\r\n                          style={{ position: 'relative' }}\r\n                          className={this.getClasses('company')}\r\n                        >\r\n                          <label className=\"form-label\">Add Company</label>\r\n\r\n                          <div className=\"custom-select\">\r\n                            <span className=\"icon-down_arrow selectIcon\" />\r\n                            <Select\r\n                              className=\"form-control\"\r\n                              name=\"company\"\r\n                              value={this.state.company}\r\n                              onChange={this.handleCompanyChange}\r\n                              options={this.state.companyDetail}\r\n                              placeholder=\"Select company\"\r\n                            />\r\n                          </div>\r\n\r\n                          {renderMessage(\r\n                            this.props.getValidationMessages('company')\r\n                          )}\r\n                        </FormGroup>\r\n\r\n                        {this.state.otherCompanyName === true ? (\r\n                          <FormGroup\r\n                            style={{ position: 'relative' }}\r\n                            className={this.getClasses('companyName')}\r\n                          >\r\n                            <label className=\"form-label\">Company Name</label>\r\n\r\n                            <FormControl\r\n                              type=\"text\"\r\n                              placeholder=\"Company Name\"\r\n                              name=\"companyName\"\r\n                              value={this.state.companyName}\r\n                              onChange={this.handleChange}\r\n                              autoComplete=\"off\"\r\n                              maxLength=\"35\"\r\n                            />\r\n\r\n                            {renderMessage(\r\n                              this.props.getValidationMessages('companyName')\r\n                            )}\r\n                          </FormGroup>\r\n                        ) : null}\r\n\r\n                        <FormGroup\r\n                          style={{ position: 'relative' }}\r\n                          className={this.getClasses('firstName')}\r\n                        >\r\n                          <label className=\"form-label\">First Name</label>\r\n\r\n                          <FormControl\r\n                            type=\"text\"\r\n                            placeholder=\"First Name\"\r\n                            name=\"firstName\"\r\n                            value={this.state.firstName}\r\n                            onChange={this.handleChange}\r\n                            autoComplete=\"off\"\r\n                            maxLength=\"35\"\r\n                          />\r\n\r\n                          {renderMessage(\r\n                            this.props.getValidationMessages('firstName')\r\n                          )}\r\n                        </FormGroup>\r\n\r\n                        <FormGroup\r\n                          style={{ position: 'relative' }}\r\n                          className={this.getClasses('lastName')}\r\n                        >\r\n                          <label className=\"form-label\">Last Name</label>\r\n\r\n                          <FormControl\r\n                            type=\"text\"\r\n                            placeholder=\"Last Name\"\r\n                            name=\"lastName\"\r\n                            value={this.state.lastName}\r\n                            onChange={this.handleChange}\r\n                            autoComplete=\"off\"\r\n                            maxLength=\"35\"\r\n                          />\r\n\r\n                          {renderMessage(\r\n                            this.props.getValidationMessages('lastName')\r\n                          )}\r\n                        </FormGroup>\r\n\r\n                        <FormGroup\r\n                          style={{ position: 'relative' }}\r\n                          className={this.getClasses('email')}\r\n                        >\r\n                          <label className=\"form-label\">Email</label>\r\n\r\n                          <FormControl\r\n                            type=\"Email\"\r\n                            placeholder=\"Email\"\r\n                            name=\"email\"\r\n                            value={this.state.email}\r\n                            onChange={this.handleChange}\r\n                            autoComplete=\"off\"\r\n                            onKeyPress={this.submitData}\r\n                          />\r\n\r\n                          {renderMessage(\r\n                            this.props.getValidationMessages('email')\r\n                          )}\r\n                        </FormGroup>\r\n\r\n                        <FormGroup>\r\n                          <Button\r\n                            bsStyle=\"primary\"\r\n                            className=\"centeredBtn btn-lg\"\r\n                            disabled={isLoading}\r\n                            onClick={!isLoading ? this.validateData : null}\r\n                          >\r\n                            {isLoading ? 'In Progress...' : 'Sign Up'}\r\n                          </Button>\r\n                        </FormGroup>\r\n                      </form>\r\n                    </div>{' '}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>{' '}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return bindActionCreators({ actionUserLogin }, dispatch);\r\n};\r\n\r\nHRSignup = validation(strategy)(HRSignup);\r\nexport default connect(\r\n  null,\r\n  mapDispatchToProps\r\n)(HRSignup);\r\n"]},"metadata":{},"sourceType":"module"}