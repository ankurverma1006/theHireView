{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ankur\\\\Desktop\\\\therapidhire\\\\therapidhireui\\\\TheRapidHireUI\\\\src\\\\videoChat\\\\js\\\\CallWindow.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'proptypes';\nimport { connect } from 'react-redux';\nimport classnames from 'classnames';\nimport _ from 'lodash'; //import { Player } from 'video-react';\n//import 'video-react/dist/video-react.css'; // import css\n\nclass CallWindow extends Component {\n  constructor(props, context) {\n    super(props, context);\n    this.state = {\n      Video: true,\n      Audio: true,\n      Audio: {\n        echoCancellation: true\n      },\n      tasks: [{\n        id: \"1\",\n        taskName: \"Read book\",\n        type: \"inProgress\",\n        backgroundColor: \"red\"\n      }, {\n        id: \"2\",\n        taskName: \"Pay bills\",\n        type: \"inProgress\",\n        backgroundColor: \"green\"\n      }, {\n        id: \"3\",\n        taskName: \"Go to the gym\",\n        type: \"Done\",\n        backgroundColor: \"blue\"\n      }, {\n        id: \"4\",\n        taskName: \"Play baseball\",\n        type: \"Done\",\n        backgroundColor: \"green\"\n      }]\n    };\n    this.btns = [{\n      type: 'Video',\n      icon: 'fa-video-camera'\n    }, {\n      type: 'Audio',\n      icon: 'fa-microphone'\n    }];\n  }\n\n  componentDidMount() {\n    this.setMediaStream();\n  }\n\n  componentWillReceiveProps(nextProps) {\n    const currentConfig = this.props.config; // Initialize when the call started\n\n    if (!currentConfig && nextProps.config) {\n      const config = nextProps.config,\n            mediaDevice = nextProps.mediaDevice;\n\n      _.forEach(config, (conf, type) => mediaDevice.toggle(_.capitalize(type), conf));\n\n      this.setState({\n        Video: config.video,\n        Audio: config.audio\n      });\n    }\n  }\n\n  componentDidUpdate() {\n    this.setMediaStream();\n  }\n\n  setMediaStream() {\n    const _this$props = this.props,\n          peerSrc = _this$props.peerSrc,\n          localSrc = _this$props.localSrc;\n    if (this.peerVideo && peerSrc) this.peerVideo.srcObject = peerSrc;\n    if (this.localVideo && localSrc) this.localVideo.srcObject = localSrc;\n  }\n  /**\r\n   * Turn on/off a media device\r\n   * @param {String} deviceType - Type of the device eg: Video, Audio\r\n   */\n\n\n  toggleMediaDevice(deviceType) {\n    const mediaDevice = this.props.mediaDevice;\n\n    const deviceState = _.get(this.state, deviceType);\n\n    this.setState({\n      [deviceType]: !deviceState\n    });\n    mediaDevice.toggle(deviceType);\n  }\n\n  renderControlButtons() {\n    const getClass = (icon, type) => classnames(\"btn-action fa \".concat(icon), {\n      disable: !_.get(this.state, type)\n    });\n\n    return this.btns.map(btn => React.createElement(\"button\", {\n      key: \"btn\".concat(btn.type),\n      type: \"button\",\n      className: getClass(btn.icon, btn.type),\n      onClick: () => this.toggleMediaDevice(btn.type),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }));\n  }\n\n  render() {\n    var tasks = {\n      inProgress: [],\n      Done: []\n    };\n    const _this$props2 = this.props,\n          status = _this$props2.status,\n          endCall = _this$props2.endCall,\n          startCallInterviewer = _this$props2.startCallInterviewer;\n    return React.createElement(\"div\", {\n      className: classnames('call-window', status),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, React.createElement(\"video\", {\n      id: \"peerVideo\",\n      ref: el => this.peerVideo = el,\n      autoPlay: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }), \" */}\", React.createElement(\"video\", {\n      id: \"localVideo\",\n      ref: el => this.localVideo = el,\n      autoPlay: true,\n      muted: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"video-control\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, this.renderControlButtons(), React.createElement(\"button\", {\n      type: \"button\",\n      className: \"btn-action hangup fa fa-phone\",\n      onClick: () => endCall(true),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }), this.props.user && this.props.user.roleId == 2 ? React.createElement(\"button\", {\n      type: \"button\",\n      className: \"btn-action startup fa fa-phone\",\n      onClick: () => startCallInterviewer(true),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }) : null));\n  }\n\n}\n\nCallWindow.propTypes = {\n  status: PropTypes.string.isRequired,\n  localSrc: PropTypes.object,\n  // eslint-disable-line\n  peerSrc: PropTypes.object,\n  // eslint-disable-line\n  config: PropTypes.object,\n  // eslint-disable-line\n  mediaDevice: PropTypes.object,\n  // eslint-disable-line\n  endCall: PropTypes.func.isRequired,\n  startCallInterviewer: PropTypes.func.isRequired\n}; // export default CallWindow;\n\nconst mapStateToProps = state => {\n  return {\n    user: state.User.userData\n  };\n};\n\nexport default connect(mapStateToProps, null)(CallWindow);","map":{"version":3,"sources":["C:\\Users\\Ankur\\Desktop\\therapidhire\\therapidhireui\\TheRapidHireUI\\src\\videoChat\\js\\CallWindow.js"],"names":["React","Component","PropTypes","connect","classnames","_","CallWindow","constructor","props","context","state","Video","Audio","echoCancellation","tasks","id","taskName","type","backgroundColor","btns","icon","componentDidMount","setMediaStream","componentWillReceiveProps","nextProps","currentConfig","config","mediaDevice","forEach","conf","toggle","capitalize","setState","video","audio","componentDidUpdate","peerSrc","localSrc","peerVideo","srcObject","localVideo","toggleMediaDevice","deviceType","deviceState","get","renderControlButtons","getClass","disable","map","btn","render","inProgress","Done","status","endCall","startCallInterviewer","el","user","roleId","propTypes","string","isRequired","object","func","mapStateToProps","User","userData"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport PropTypes from 'proptypes';\r\nimport { connect } from 'react-redux';\r\nimport classnames from 'classnames';\r\nimport _ from 'lodash';\r\n//import { Player } from 'video-react';\r\n//import 'video-react/dist/video-react.css'; // import css\r\n\r\n\r\nclass CallWindow extends Component {\r\n  constructor(props, context) {\r\n    super(props, context);\r\n    this.state = {\r\n      Video: true,\r\n      Audio: true,\r\n      Audio: {echoCancellation:true},\r\n      tasks: [\r\n        {id: \"1\", taskName:\"Read book\",type:\"inProgress\", backgroundColor: \"red\"},\r\n        {id: \"2\", taskName:\"Pay bills\", type:\"inProgress\", backgroundColor:\"green\"},\r\n        {id: \"3\", taskName:\"Go to the gym\", type:\"Done\", backgroundColor:\"blue\"},\r\n        {id: \"4\", taskName:\"Play baseball\", type:\"Done\", backgroundColor:\"green\"}\r\n    ]          \r\n    };\r\n\r\n    this.btns = [\r\n      { type: 'Video', icon: 'fa-video-camera' },\r\n      { type: 'Audio', icon: 'fa-microphone' }\r\n    ];  \r\n  }\r\n\r\n\r\n\r\n\r\n  componentDidMount() {\r\n    this.setMediaStream();   \r\n   }\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n    const { config: currentConfig } = this.props;\r\n    // Initialize when the call started\r\n    if (!currentConfig && nextProps.config) {\r\n      const { config, mediaDevice } = nextProps;\r\n      _.forEach(config, (conf, type) => mediaDevice.toggle(_.capitalize(type), conf));\r\n\r\n      this.setState({\r\n        Video: config.video,\r\n        Audio: config.audio\r\n      });\r\n    }\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    this.setMediaStream();\r\n  }\r\n \r\n  setMediaStream() {\r\n    const { peerSrc, localSrc } = this.props;\r\n    if (this.peerVideo && peerSrc) this.peerVideo.srcObject = peerSrc;\r\n    if (this.localVideo && localSrc) this.localVideo.srcObject = localSrc; \r\n  }\r\n\r\n  /**\r\n   * Turn on/off a media device\r\n   * @param {String} deviceType - Type of the device eg: Video, Audio\r\n   */\r\n  toggleMediaDevice(deviceType) {\r\n    const { mediaDevice } = this.props;\r\n    const deviceState = _.get(this.state, deviceType);\r\n    this.setState({ [deviceType]: !deviceState });\r\n    mediaDevice.toggle(deviceType);\r\n  }\r\n\r\n  renderControlButtons() {\r\n    const getClass = (icon, type) => classnames(`btn-action fa ${icon}`, {\r\n      disable: !_.get(this.state, type)\r\n    });\r\n\r\n    return this.btns.map(btn => (\r\n      <button\r\n        key={`btn${btn.type}`}\r\n        type=\"button\"\r\n        className={getClass(btn.icon, btn.type)}\r\n        onClick={() => this.toggleMediaDevice(btn.type)}\r\n      />\r\n    ));\r\n  }\r\n\r\n  render() {\r\n    var tasks = {\r\n      inProgress: [],\r\n      Done: []\r\n    }\r\n    const { status, endCall,startCallInterviewer } = this.props;\r\n    return (\r\n      <div className={classnames('call-window', status)}>\r\n        <video id=\"peerVideo\" ref={el => this.peerVideo = el} autoPlay /> */}\r\n        {/* <Player\r\n          ref={player => {\r\n            this.player = player;\r\n          }}\r\n          autoPlay\r\n        >\r\n          <source src={this.state.source} /></Player> */}\r\n\r\n        <video id=\"localVideo\" ref={el => this.localVideo = el} autoPlay muted />\r\n        <div className=\"video-control\">\r\n          {this.renderControlButtons()}\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn-action hangup fa fa-phone\"\r\n            onClick={() => endCall(true)}\r\n          />\r\n    {this.props.user && this.props.user.roleId == 2 ?\r\n           <button\r\n            type=\"button\"\r\n            className=\"btn-action startup fa fa-phone\"\r\n            onClick={() => startCallInterviewer(true)}\r\n          ></button>: null}\r\n        </div> \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nCallWindow.propTypes = {\r\n  status: PropTypes.string.isRequired,\r\n  localSrc: PropTypes.object, // eslint-disable-line\r\n  peerSrc: PropTypes.object, // eslint-disable-line\r\n  config: PropTypes.object, // eslint-disable-line\r\n  mediaDevice: PropTypes.object, // eslint-disable-line\r\n  endCall: PropTypes.func.isRequired,\r\n  startCallInterviewer: PropTypes.func.isRequired\r\n};\r\n\r\n// export default CallWindow;\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    user: state.User.userData    \r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  null\r\n)(CallWindow);"]},"metadata":{},"sourceType":"module"}