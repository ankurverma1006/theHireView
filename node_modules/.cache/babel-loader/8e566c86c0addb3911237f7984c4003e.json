{"ast":null,"code":"import _ from 'lodash';\nimport Emitter from './Emitter';\n/**\r\n * Manage all media devices\r\n */\n\nclass MediaDevice extends Emitter {\n  /**\r\n   * Start media devices and send stream\r\n   */\n  start() {\n    const constraints = {\n      video: {\n        facingMode: 'user',\n        height: {\n          min: 360,\n          ideal: 720,\n          max: 1080\n        }\n      },\n      audio: true\n    };\n    navigator.mediaDevices.getUserMedia(constraints).then(stream => {\n      this.stream = stream;\n      this.emit('stream', stream);\n    }).catch(err => {\n      if (err instanceof DOMException) {\n        alert('Cannot open webcam and/or microphone');\n      } else {\n        console.log(err);\n      }\n    });\n    return this;\n  }\n  /**\r\n   * Turn on/off a device\r\n   * @param {String} type - Type of the device\r\n   * @param {Boolean} [on] - State of the device\r\n   */\n\n\n  toggle(type, on) {\n    const len = arguments.length;\n\n    if (this.stream) {\n      this.stream[\"get\".concat(type, \"Tracks\")]().forEach(track => {\n        const state = len === 2 ? on : !track.enabled;\n\n        _.set(track, 'enabled', state);\n      });\n    }\n\n    return this;\n  }\n  /**\r\n   * Stop all media track of devices\r\n   */\n\n\n  stop() {\n    if (this.stream) {\n      this.stream.getTracks().forEach(track => track.stop());\n    }\n\n    return this;\n  }\n\n}\n\nexport default MediaDevice;","map":{"version":3,"sources":["C:\\Users\\Ankur\\Desktop\\therapidhire\\therapidhireui\\TheRapidHireUI\\src\\videoChat\\js\\MediaDevice.js"],"names":["_","Emitter","MediaDevice","start","constraints","video","facingMode","height","min","ideal","max","audio","navigator","mediaDevices","getUserMedia","then","stream","emit","catch","err","DOMException","alert","console","log","toggle","type","on","len","arguments","length","forEach","track","state","enabled","set","stop","getTracks"],"mappings":"AAAA,OAAOA,CAAP,MAAc,QAAd;AACA,OAAOC,OAAP,MAAoB,WAApB;AAEA;;;;AAGA,MAAMC,WAAN,SAA0BD,OAA1B,CAAkC;AAChC;;;AAGAE,EAAAA,KAAK,GAAG;AACN,UAAMC,WAAW,GAAG;AAClBC,MAAAA,KAAK,EAAE;AACLC,QAAAA,UAAU,EAAE,MADP;AAELC,QAAAA,MAAM,EAAE;AAAEC,UAAAA,GAAG,EAAE,GAAP;AAAYC,UAAAA,KAAK,EAAE,GAAnB;AAAwBC,UAAAA,GAAG,EAAE;AAA7B;AAFH,OADW;AAKlBC,MAAAA,KAAK,EAAE;AALW,KAApB;AAQAC,IAAAA,SAAS,CAACC,YAAV,CACGC,YADH,CACgBV,WADhB,EAEGW,IAFH,CAESC,MAAD,IAAY;AAChB,WAAKA,MAAL,GAAcA,MAAd;AACA,WAAKC,IAAL,CAAU,QAAV,EAAoBD,MAApB;AACD,KALH,EAMGE,KANH,CAMUC,GAAD,IAAS;AACd,UAAIA,GAAG,YAAYC,YAAnB,EAAiC;AAC/BC,QAAAA,KAAK,CAAC,sCAAD,CAAL;AACD,OAFD,MAEO;AACLC,QAAAA,OAAO,CAACC,GAAR,CAAYJ,GAAZ;AACD;AACF,KAZH;AAcA,WAAO,IAAP;AACD;AAED;;;;;;;AAKAK,EAAAA,MAAM,CAACC,IAAD,EAAOC,EAAP,EAAW;AACf,UAAMC,GAAG,GAAGC,SAAS,CAACC,MAAtB;;AACA,QAAI,KAAKb,MAAT,EAAiB;AACf,WAAKA,MAAL,cAAkBS,IAAlB,eAAkCK,OAAlC,CAA2CC,KAAD,IAAW;AACnD,cAAMC,KAAK,GAAGL,GAAG,KAAK,CAAR,GAAYD,EAAZ,GAAiB,CAACK,KAAK,CAACE,OAAtC;;AACAjC,QAAAA,CAAC,CAACkC,GAAF,CAAMH,KAAN,EAAa,SAAb,EAAwBC,KAAxB;AACD,OAHD;AAID;;AACD,WAAO,IAAP;AACD;AAED;;;;;AAGAG,EAAAA,IAAI,GAAG;AACL,QAAI,KAAKnB,MAAT,EAAiB;AACf,WAAKA,MAAL,CAAYoB,SAAZ,GAAwBN,OAAxB,CAAgCC,KAAK,IAAIA,KAAK,CAACI,IAAN,EAAzC;AACD;;AACD,WAAO,IAAP;AACD;;AAtD+B;;AAyDlC,eAAejC,WAAf","sourcesContent":["import _ from 'lodash';\r\nimport Emitter from './Emitter';\r\n\r\n/**\r\n * Manage all media devices\r\n */\r\nclass MediaDevice extends Emitter {\r\n  /**\r\n   * Start media devices and send stream\r\n   */\r\n  start() {\r\n    const constraints = {\r\n      video: {\r\n        facingMode: 'user',\r\n        height: { min: 360, ideal: 720, max: 1080 }\r\n      },\r\n      audio: true\r\n    };\r\n\r\n    navigator.mediaDevices\r\n      .getUserMedia(constraints)\r\n      .then((stream) => {\r\n        this.stream = stream;\r\n        this.emit('stream', stream);\r\n      })\r\n      .catch((err) => {\r\n        if (err instanceof DOMException) {\r\n          alert('Cannot open webcam and/or microphone');\r\n        } else {\r\n          console.log(err);\r\n        }\r\n      });\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Turn on/off a device\r\n   * @param {String} type - Type of the device\r\n   * @param {Boolean} [on] - State of the device\r\n   */\r\n  toggle(type, on) {\r\n    const len = arguments.length;\r\n    if (this.stream) {\r\n      this.stream[`get${type}Tracks`]().forEach((track) => {\r\n        const state = len === 2 ? on : !track.enabled;\r\n        _.set(track, 'enabled', state);\r\n      });\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Stop all media track of devices\r\n   */\r\n  stop() {\r\n    if (this.stream) {\r\n      this.stream.getTracks().forEach(track => track.stop());\r\n    }\r\n    return this;\r\n  }\r\n}\r\n\r\nexport default MediaDevice;\r\n"]},"metadata":{},"sourceType":"module"}