{"ast":null,"code":"var _jsxFileName = \"/home/ank/Desktop/therapidhiregit/therapidhireui/TheRapidHireUI/src/recruiter/jobDescription/addJobDescription.js\";\nimport React, { Component } from 'react';\nimport { ToastContainer } from 'react-toastify';\nimport { Portal } from 'react-overlays';\nimport { Button, Modal, Form, FormGroup, Checkbox, Col, ControlLabel, FormControl, InputGroup, Radio } from 'react-bootstrap';\nimport Header from '../header/header';\nimport Select from 'react-select';\nimport 'react-select/dist/react-select.css';\nimport { YearPicker, MonthPicker, DayPicker } from 'react-dropdown-date'; //import DatePicker from 'react-datepicker';\n//import DatePicker from '../../../../assets/react-datepicker/es/index';\n\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { actionGetStudentList } from '../../common/core/redux/actions';\nimport { actionSetStudentAsUser } from '../../common/core/redux/actions';\nimport moment from 'moment';\nimport validation from 'react-validation-mixin';\nimport strategy from 'react-validatorjs-strategy';\nimport classnames from 'classnames';\nimport ImageCropper from '../../common/cropper/imageCropper';\nimport achievementDefaultImage from '../../assets/img/default_achievement.jpg';\nimport _ from 'lodash';\nimport CONSTANTS from '../../common/core/config/appConfig';\nimport { renderMessage, isValidURL, ZoomInAndOut, generateTimestamp, showSuccessToast } from '../../common/commonFunctions';\nimport theRapidHireApiService from '../../common/core/api/apiService'; //import MediaList from '../mediaList';\n\nlet validationMessages = CONSTANTS.validationMessages;\nlet regExpressions = CONSTANTS.regExpressions;\nlet badgeImgArray = [];\nlet badgeImgPreview = [];\nlet certificateImgArray = [];\nlet certificateImgPreview = [];\nlet mediaImgArray = [];\nlet mediaImgPreview = [];\nconst emptyToDate = '10000000';\n\nclass AddJobDescription extends Component {\n  constructor(props) {\n    super(props);\n\n    this.setProfileData = data => {\n      //console.log(data);\n      if (data) {\n        let userId = data.userId;\n        let summary = data.summary;\n        let firstName = data.firstName;\n        let lastName = data.lastName; // let tagline = data.tagline.trim();\n        // let editTag = data.tagline.trim();\n\n        let tagline = data.tagline ? data.tagline.trim() : null;\n        let editTag = data.tagline ? data.tagline.trim() : null;\n        let name = (data.firstName ? data.firstName : '') + ' ' + (data.lastName ? data.lastName : '');\n        let profileImage = data.profilePicture;\n\n        if (profileImage) {\n          profileImage = profileImage;\n        }\n\n        let coverImage = data.coverImage;\n\n        if (coverImage) {\n          coverImage = coverImage;\n        }\n\n        let isActive = data.isActive;\n        this.setState({\n          editTag,\n          summary,\n          firstName,\n          lastName,\n          userId,\n          profileImage,\n          coverImage,\n          tagline,\n          isActive,\n          name\n        });\n      }\n    };\n\n    this.closeAchievementyModal = status => {\n      this.setState({});\n    };\n\n    this.getValidatorData = () => {\n      return this.state;\n    };\n\n    this.getClasses = field => {\n      return classnames({\n        error: !this.props.isValid(field)\n      });\n    };\n\n    this.setJobDescriptionData = data => {\n      if (data) {\n        this.setState({\n          recruiterId: data.recruiterId,\n          title: data.title,\n          companyId: data.companyId,\n          description: data.description,\n          noOfPosition: data.noOfPosition,\n          minExperience: data.minExperience,\n          maxExperience: data.maxExperience,\n          location: data.location,\n          skills: data.skills,\n          postedBy: data.postedBy,\n          jobDescId: data.jobDescId\n        });\n      }\n\n      ;\n    };\n\n    this.handleChange = event => {\n      const target = event.target;\n      const value = target.type === 'checkbox' ? target.checked : target.value;\n      const name = target.name;\n      this.setState({\n        [name]: value\n      });\n    };\n\n    this.handleChangeStart = startDate => {\n      this.handleDateChange({\n        startDate\n      });\n    };\n\n    this.handleChangeEnd = endDate => {\n      this.handleDateChange({\n        endDate\n      });\n    };\n\n    this.handleDateChange = ({\n      startDate,\n      endDate\n    }) => {\n      console.log(endDate);\n      startDate = startDate || this.state.startDate;\n      endDate = endDate || this.state.endDate;\n\n      if (startDate && endDate) {\n        if (startDate.isAfter(endDate)) {\n          endDate = startDate;\n        }\n      }\n\n      this.setState({\n        startDate,\n        endDate\n      });\n    };\n\n    this.validateData = () => {\n      let self = this;\n      this.props.validate(function (error) {\n        let imageObject = {\n          media: self.state.mediaImgArray || []\n        };\n\n        if (!error) {\n          self.setState({\n            isLoading: true\n          });\n          self.handleSubmit();\n        } else {\n          self.handleSubmit();\n        }\n      });\n    };\n\n    this.closeImageModal = () => {\n      this.setState({\n        imagesModal: !this.state.imagesModal\n      });\n    };\n\n    this.handleProfileRoleChange = newValue => {\n      if (newValue.label == CONSTANTS.OTHER) {\n        this.setState({\n          titleNotAvailable: true\n        });\n      } else {\n        this.setState({\n          titleNotAvailable: false\n        });\n      }\n\n      this.setState({\n        profileRole: newValue\n      });\n    };\n\n    this.handleLocationChange = newValue => {\n      this.setState({\n        location: newValue\n      });\n    };\n\n    this.handleSkillsChange = newValue => {\n      this.setState({\n        skills: newValue\n      });\n    };\n\n    this.closeJobDescriptionModal = status => {\n      this.setState({\n        jobDescriptionModal: false\n      });\n      this.props.closeJobDescriptionComponent();\n    };\n\n    this.state = {\n      isLoading: false,\n      startDate: '',\n      endDate: '',\n      promptRecommendation: false,\n      userId: '',\n      todaysDate: false,\n      jobDescriptionDetail: {},\n      jobDescriptionListData: [],\n      designation: '',\n      organisation: '',\n      profileRoleList: [],\n      titleNotAvailable: false,\n      jobDescriptionModal: true,\n      jobDescId: '',\n      associateList: [],\n      skillsList: [],\n      locationList: [{\n        value: 1,\n        label: 'Indore'\n      }, {\n        value: 2,\n        label: 'Bhopal'\n      }, {\n        value: 2,\n        label: 'Dewas'\n      }]\n    };\n    this.getValidatorData = this.getValidatorData.bind(this);\n    this.getClasses = this.getClasses.bind(this);\n    this.validatorTypes = strategy.createSchema({//  projectName: 'required'\n      // level3Competency: 'required',\n      // skills: 'required',\n      // importance: 'required',\n      // //   startDate: 'required',\n      // //  endDate: 'required',\n      // firstName: ['regex:' + regExpressions.alphaOnly],\n      // lastName: ['regex:' + regExpressions.alphaOnly],\n      // email: 'email'\n    }, {//     'required.designation': validationMessages.designation.required\n      // 'required.level3Competency': validationMessages.competency.required\n      // 'required.skills': validationMessages.skills.required,\n      // 'required.importance': validationMessages.importance.required,\n      // //  'required.startDate': validationMessages.startDate.required,\n      // //  'required.endDate': validationMessages.endDate.required,\n      // 'email.email': validationMessages.email.invalid,\n      // 'regex.firstName': validationMessages.firstName.alphaOnly,\n      // 'regex.lastName': validationMessages.lastName.alphaOnly\n    });\n    this.getKeySkillsList();\n    this.getProfileRoleList();\n  }\n\n  getProfileRoleList() {\n    theRapidHireApiService('getProfileRoleList').then(response => {\n      console.log(response);\n\n      if (response.data.status === 'Success') {\n        let profileRoleList = this.state.profileRoleList;\n        response.data.result.forEach(function (data) {\n          profileRoleList.push({\n            label: data.profileRole,\n            value: data.profileRoleId\n          });\n        });\n        this.setState({\n          profileRoleList: profileRoleList\n        });\n      }\n    }).catch(err => {\n      console.log(err);\n    });\n  }\n\n  getKeySkillsList() {\n    theRapidHireApiService('getKeySkillsList').then(response => {\n      if (response.data.status === 'Success') {\n        let skillsList = this.state.skillsList;\n        response.data.result.forEach(function (data) {\n          skillsList.push({\n            label: data.skillName,\n            value: data.skillId\n          });\n        });\n        this.setState({\n          skillsList: skillsList\n        });\n      }\n    }).catch(err => {\n      console.log(err);\n    });\n  }\n\n  componentDidMount() {\n    // if(this.props.user){\n    let userId = this.props.userData.userId;\n    this.setState({\n      userId: userId\n    }); // }  \n\n    console.log('this.props.employmentDetail ', this.props.jobDescriptionDetail);\n    this.setJobDescriptionData(this.props.jobDescriptionDetail);\n    this.getKeySkillsList();\n    this.getJobDescriptionDetails(userId);\n  }\n\n  getJobDescriptionDetails(userId) {\n    theRapidHireApiService('getJobDescriptonListById', {\n      userId\n    }).then(response => {\n      if (response.data.status === 'Success') {\n        let jobDescriptionListData = this.state.jobDescriptionListData;\n        jobDescriptionListData = response.data.result[0];\n        this.setState({\n          jobDescriptionListData: jobDescriptionListData\n        });\n      }\n    }).catch(err => {\n      console.log(err);\n    });\n  }\n\n  generateSASToken() {\n    theRapidHireApiService('getSASToken').then(response => {\n      if (response.data.status === 'Success') {\n        let sasToken = response.data.result.sasToken;\n        this.setState({\n          sasToken\n        });\n      }\n    }).catch(err => {\n      console.log(err);\n    });\n  }\n\n  handleSubmit() {\n    let description = this.state.description;\n    let noOfPosition = parseInt(this.state.noOfPosition, 10);\n    let minExperience = parseInt(this.state.minExperience, 10);\n    let maxExperience = parseInt(this.state.maxExperience, 10);\n    let location = [];\n    this.state.location.forEach(function (item) {\n      location.push(item.label);\n    });\n    let skills = [];\n    this.state.skills.forEach(function (item) {\n      skills.push({\n        skillId: item.value,\n        skillName: item.label\n      });\n    });\n    let title = this.state.profileRole && this.state.profileRole.label !== CONSTANTS.OTHER ? this.state.profileRole.label : this.state.title;\n    let titleId = this.state.profileRole && this.state.profileRole.label !== CONSTANTS.OTHER ? this.state.profileRole.value : null;\n    let userId = this.state.userId;\n    let postedBy = this.props.user.userId;\n    let jobDescId = this.state.jobDescId;\n    let data = {\n      title,\n      titleId,\n      userId,\n      description,\n      jobDescId,\n      noOfPosition,\n      minExperience,\n      maxExperience,\n      location,\n      postedBy,\n      skills\n    };\n    let self = this;\n\n    if (!this.state.jobDescId || this.state.jobDescId === '') {\n      theRapidHireApiService('addJobDescription', data).then(response => {\n        if (response.data.status === 'Success') {\n          self.setState({\n            isLoading: false\n          });\n          showSuccessToast('Job Description added');\n          self.closeJobDescriptionModal('save');\n        }\n      }).catch(error => {\n        self.setState({\n          isLoading: false\n        });\n        console.log(error);\n      });\n    } else {\n      theRapidHireApiService('getJobDescriptonListById', data).then(response => {\n        if (response.data.status === 'Success') {\n          self.closeJobDescriptionModal('save');\n          self.setState({\n            isLoading: false\n          });\n        }\n      }).catch(error => {\n        self.setState({\n          isLoading: false\n        });\n        console.log(error);\n      });\n    }\n  }\n\n  render() {\n    let self = this;\n    const isLoading = this.state.isLoading;\n    const cssClasses = {\n      root: 'input-group mb-1',\n      input: 'form-control'\n    };\n    const inputProps = {\n      value: this.state.streetAddress1,\n      onChange: this.onChange,\n      placeholder: 'Street Address1',\n      type: 'text'\n    };\n    const defaultStyles = {\n      root: {\n        position: 'relative',\n        paddingBottom: '0px'\n      },\n      input: {\n        display: 'inline-block',\n        width: '100%',\n        padding: '10px'\n      },\n      autocompleteContainer: {\n        position: 'absolute',\n        top: '100%',\n        backgroundColor: 'white',\n        border: '1px solid #555555',\n        width: '100%'\n      },\n      autocompleteItem: {\n        backgroundColor: '#ffffff',\n        padding: '10px',\n        color: '#555555',\n        cursor: 'pointer'\n      },\n      autocompleteItemActive: {\n        backgroundColor: '#fafafa'\n      }\n    };\n\n    const CalendarContainer = ({\n      children\n    }) => {\n      const el = document.getElementById('calendar-portal');\n      return React.createElement(Portal, {\n        container: el,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 465\n        },\n        __self: this\n      }, children);\n    };\n\n    return React.createElement(Modal, {\n      bsSize: \"large\",\n      show: this.state.jobDescriptionModal,\n      onHide: this.closeJobDescriptionModal.bind(this, 'close'),\n      backdrop: \"static\",\n      keyboard: false,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 469\n      },\n      __self: this\n    }, React.createElement(ToastContainer, {\n      autoClose: 5000,\n      className: \"custom-toaster-main-cls\",\n      toastClassName: \"custom-toaster-bg\",\n      transition: ZoomInAndOut,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 476\n      },\n      __self: this\n    }), React.createElement(Modal.Header, {\n      closeButton: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 482\n      },\n      __self: this\n    }, React.createElement(Modal.Title, {\n      className: \"subtitle text-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 483\n      },\n      __self: this\n    }, \"Add Job Description\")), React.createElement(Modal.Body, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 487\n      },\n      __self: this\n    }, React.createElement(Form, {\n      horizontal: true,\n      className: \"lightBgForm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 488\n      },\n      __self: this\n    }, React.createElement(Col, {\n      sm: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 489\n      },\n      __self: this\n    }, React.createElement(FormGroup, {\n      className: this.getClasses('profileRole'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 491\n      },\n      __self: this\n    }, React.createElement(Col, {\n      componentClass: ControlLabel,\n      sm: 3,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 492\n      },\n      __self: this\n    }, \"select title\"), React.createElement(Col, {\n      sm: 9,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 495\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"custom-select\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 496\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"icon-down_arrow selectIcon\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 497\n      },\n      __self: this\n    }), React.createElement(Select, {\n      className: \"form-control\",\n      name: \"location\",\n      value: this.state.profileRole,\n      onChange: this.handleProfileRoleChange,\n      options: this.state.profileRoleList,\n      placeholder: \"Select all the location that you used along the way\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 498\n      },\n      __self: this\n    })), renderMessage(this.props.getValidationMessages('profileRole')))), this.state.titleNotAvailable == true ? React.createElement(FormGroup, {\n      controlId: \"formControlsTextarea\",\n      className: this.getClasses('title'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 511\n      },\n      __self: this\n    }, React.createElement(Col, {\n      componentClass: ControlLabel,\n      sm: 3,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 515\n      },\n      __self: this\n    }, React.createElement(ControlLabel, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 516\n      },\n      __self: this\n    }, \"Title\")), React.createElement(Col, {\n      sm: 9,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 518\n      },\n      __self: this\n    }, React.createElement(FormControl, {\n      placeholder: \"Add a title\",\n      name: \"title\",\n      value: this.state.title,\n      onChange: this.handleChange,\n      autoComplete: \"off\",\n      maxLength: \"100\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 519\n      },\n      __self: this\n    }), renderMessage(this.props.getValidationMessages('tile')))) : null, React.createElement(FormGroup, {\n      controlId: \"formControlsTextarea\",\n      className: this.getClasses('description'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 531\n      },\n      __self: this\n    }, React.createElement(Col, {\n      componentClass: ControlLabel,\n      sm: 3,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 535\n      },\n      __self: this\n    }, React.createElement(ControlLabel, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 536\n      },\n      __self: this\n    }, \"Description\")), React.createElement(Col, {\n      sm: 9,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 538\n      },\n      __self: this\n    }, React.createElement(FormControl, {\n      componentClass: \"textarea\",\n      placeholder: \"Add a description\",\n      name: \"description\",\n      value: this.state.description,\n      onChange: this.handleChange,\n      autoComplete: \"off\",\n      maxLength: \"100\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 539\n      },\n      __self: this\n    }), renderMessage(this.props.getValidationMessages('description')))), React.createElement(FormGroup, {\n      className: this.getClasses('skills'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 552\n      },\n      __self: this\n    }, React.createElement(Col, {\n      componentClass: ControlLabel,\n      sm: 3,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 553\n      },\n      __self: this\n    }, \"Skills\"), React.createElement(Col, {\n      sm: 9,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 556\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"custom-select\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 557\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"icon-down_arrow selectIcon\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 558\n      },\n      __self: this\n    }), React.createElement(Select, {\n      multi: true,\n      className: \"form-control\",\n      name: \"skills\",\n      value: this.state.skills,\n      onChange: this.handleSkillsChange,\n      options: this.state.skillsList,\n      placeholder: \"Select skill\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 559\n      },\n      __self: this\n    })), renderMessage(this.props.getValidationMessages('skills')))), React.createElement(FormGroup, {\n      className: this.getClasses('location'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 573\n      },\n      __self: this\n    }, React.createElement(Col, {\n      componentClass: ControlLabel,\n      sm: 3,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 574\n      },\n      __self: this\n    }, \"Desired Location\"), React.createElement(Col, {\n      sm: 9,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 577\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"custom-select\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 578\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"icon-down_arrow selectIcon\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 579\n      },\n      __self: this\n    }), React.createElement(Select, {\n      className: \"form-control\",\n      multi: true,\n      name: \"location\",\n      value: this.state.location,\n      onChange: this.handleLocationChange,\n      options: this.state.locationList,\n      placeholder: \"Select all the location that you used along the way\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 580\n      },\n      __self: this\n    })), renderMessage(this.props.getValidationMessages('location')))), React.createElement(FormGroup, {\n      className: \"addDateInput\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 594\n      },\n      __self: this\n    }, React.createElement(Col, {\n      componentClass: ControlLabel,\n      sm: 3,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 595\n      },\n      __self: this\n    }, \"Experience\"), React.createElement(Col, {\n      sm: 9,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 598\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"dob\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 599\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 600\n      },\n      __self: this\n    }, React.createElement(FormControl, {\n      componentClass: \"select\",\n      placeholder: \"minExperience\",\n      name: \"minExperience\",\n      value: this.state.minExperience,\n      onChange: this.handleChange,\n      autoComplete: \"off\",\n      maxLength: \"1000\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 601\n      },\n      __self: this\n    }, React.createElement(\"option\", {\n      value: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 610\n      },\n      __self: this\n    }, \"min exp\"), React.createElement(\"option\", {\n      value: 1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 611\n      },\n      __self: this\n    }, \"1\"), React.createElement(\"option\", {\n      value: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 612\n      },\n      __self: this\n    }, \"2\"), React.createElement(\"option\", {\n      value: 3,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 613\n      },\n      __self: this\n    }, \"3\"), React.createElement(\"option\", {\n      value: 4,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 614\n      },\n      __self: this\n    }, \"4\"), React.createElement(\"option\", {\n      value: 5,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 615\n      },\n      __self: this\n    }, \"5\"), React.createElement(\"option\", {\n      value: 6,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 616\n      },\n      __self: this\n    }, \"6\"), React.createElement(\"option\", {\n      value: 7,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 617\n      },\n      __self: this\n    }, \"7\"), React.createElement(\"option\", {\n      value: 8,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 618\n      },\n      __self: this\n    }, \"8\"), React.createElement(\"option\", {\n      value: 9,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 619\n      },\n      __self: this\n    }, \"9\"), React.createElement(\"option\", {\n      value: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 620\n      },\n      __self: this\n    }, \"10\"), React.createElement(\"option\", {\n      value: 11,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 621\n      },\n      __self: this\n    }, \"11\"), React.createElement(\"option\", {\n      value: 12,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 622\n      },\n      __self: this\n    }, \"12\")), renderMessage(this.props.getValidationMessages('expectedSalaryInlakh'))), React.createElement(\"div\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 628\n      },\n      __self: this\n    }, React.createElement(FormControl, {\n      componentClass: \"select\",\n      placeholder: \"maxExperience\",\n      name: \"maxExperience\",\n      value: this.state.maxExperience,\n      onChange: this.handleChange,\n      autoComplete: \"off\",\n      maxLength: \"1000\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 629\n      },\n      __self: this\n    }, React.createElement(\"option\", {\n      value: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 638\n      },\n      __self: this\n    }, \"max exp\"), React.createElement(\"option\", {\n      value: 1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 639\n      },\n      __self: this\n    }, \"1\"), React.createElement(\"option\", {\n      value: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 640\n      },\n      __self: this\n    }, \"2\"), React.createElement(\"option\", {\n      value: 3,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 641\n      },\n      __self: this\n    }, \"3\"), React.createElement(\"option\", {\n      value: 4,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 642\n      },\n      __self: this\n    }, \"4\"), React.createElement(\"option\", {\n      value: 5,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 643\n      },\n      __self: this\n    }, \"5\"), React.createElement(\"option\", {\n      value: 6,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 644\n      },\n      __self: this\n    }, \"6\"), React.createElement(\"option\", {\n      value: 7,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 645\n      },\n      __self: this\n    }, \"7\"), React.createElement(\"option\", {\n      value: 8,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 646\n      },\n      __self: this\n    }, \"8\"), React.createElement(\"option\", {\n      value: 9,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 647\n      },\n      __self: this\n    }, \"9\"), React.createElement(\"option\", {\n      value: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 648\n      },\n      __self: this\n    }, \"10\"), React.createElement(\"option\", {\n      value: 11,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 649\n      },\n      __self: this\n    }, \"11\"), React.createElement(\"option\", {\n      value: 12,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 650\n      },\n      __self: this\n    }, \"12\")))))), React.createElement(FormGroup, {\n      controlId: \"formControlsTextarea\",\n      className: this.getClasses('noOfPosition'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 659\n      },\n      __self: this\n    }, React.createElement(Col, {\n      componentClass: ControlLabel,\n      sm: 3,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 663\n      },\n      __self: this\n    }, React.createElement(ControlLabel, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 664\n      },\n      __self: this\n    }, \"No Of position needed\")), React.createElement(Col, {\n      sm: 9,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 666\n      },\n      __self: this\n    }, React.createElement(FormControl, {\n      placeholder: \"No. of Positions\",\n      name: \"noOfPosition\",\n      value: this.state.noOfPosition,\n      onChange: this.handleChange,\n      autoComplete: \"off\",\n      maxLength: \"100\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 667\n      },\n      __self: this\n    }), renderMessage(this.props.getValidationMessages('noOfPosition'))))), \"      \")), React.createElement(Modal.Footer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 681\n      },\n      __self: this\n    }, React.createElement(Button, {\n      bsStyle: \"primary\",\n      className: \"no-bold no-round\",\n      disabled: this.state.isLoading,\n      onClick: !this.state.isLoading ? this.validateData : null,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 683\n      },\n      __self: this\n    }, this.state.isLoading ? 'In Progress...' : 'Save'), React.createElement(Button, {\n      bsStyle: \"default\",\n      className: \"no-bold no-round\",\n      onClick: this.closeJobDescriptionModal.bind(this, 'close'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 691\n      },\n      __self: this\n    }, \"Close\")));\n  }\n\n}\n\nAddJobDescription = validation(strategy)(AddJobDescription);\n\nconst mapStateToProps = state => {\n  return {\n    user: state.User.userData,\n    parent: state.User.parentData\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return bindActionCreators({\n    actionGetStudentList,\n    actionSetStudentAsUser\n  }, dispatch);\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddJobDescription);","map":{"version":3,"sources":["/home/ank/Desktop/therapidhiregit/therapidhireui/TheRapidHireUI/src/recruiter/jobDescription/addJobDescription.js"],"names":["React","Component","ToastContainer","Portal","Button","Modal","Form","FormGroup","Checkbox","Col","ControlLabel","FormControl","InputGroup","Radio","Header","Select","YearPicker","MonthPicker","DayPicker","connect","bindActionCreators","actionGetStudentList","actionSetStudentAsUser","moment","validation","strategy","classnames","ImageCropper","achievementDefaultImage","_","CONSTANTS","renderMessage","isValidURL","ZoomInAndOut","generateTimestamp","showSuccessToast","theRapidHireApiService","validationMessages","regExpressions","badgeImgArray","badgeImgPreview","certificateImgArray","certificateImgPreview","mediaImgArray","mediaImgPreview","emptyToDate","AddJobDescription","constructor","props","setProfileData","data","userId","summary","firstName","lastName","tagline","trim","editTag","name","profileImage","profilePicture","coverImage","isActive","setState","closeAchievementyModal","status","getValidatorData","state","getClasses","field","error","isValid","setJobDescriptionData","recruiterId","title","companyId","description","noOfPosition","minExperience","maxExperience","location","skills","postedBy","jobDescId","handleChange","event","target","value","type","checked","handleChangeStart","startDate","handleDateChange","handleChangeEnd","endDate","console","log","isAfter","validateData","self","validate","imageObject","media","isLoading","handleSubmit","closeImageModal","imagesModal","handleProfileRoleChange","newValue","label","OTHER","titleNotAvailable","profileRole","handleLocationChange","handleSkillsChange","closeJobDescriptionModal","jobDescriptionModal","closeJobDescriptionComponent","promptRecommendation","todaysDate","jobDescriptionDetail","jobDescriptionListData","designation","organisation","profileRoleList","associateList","skillsList","locationList","bind","validatorTypes","createSchema","getKeySkillsList","getProfileRoleList","then","response","result","forEach","push","profileRoleId","catch","err","skillName","skillId","componentDidMount","userData","getJobDescriptionDetails","generateSASToken","sasToken","parseInt","item","titleId","user","render","cssClasses","root","input","inputProps","streetAddress1","onChange","placeholder","defaultStyles","position","paddingBottom","display","width","padding","autocompleteContainer","top","backgroundColor","border","autocompleteItem","color","cursor","autocompleteItemActive","CalendarContainer","children","el","document","getElementById","getValidationMessages","mapStateToProps","User","parent","parentData","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { ToastContainer } from 'react-toastify';\r\nimport { Portal } from 'react-overlays';\r\nimport {\r\n  Button,\r\n  Modal,\r\n  Form,\r\n  FormGroup,\r\n  Checkbox,\r\n  Col,\r\n  ControlLabel,\r\n  FormControl,\r\n  InputGroup,\r\n  Radio\r\n} from 'react-bootstrap';\r\nimport Header from '../header/header';\r\nimport Select from 'react-select';\r\nimport 'react-select/dist/react-select.css';\r\nimport { YearPicker, MonthPicker, DayPicker } from 'react-dropdown-date';\r\n//import DatePicker from 'react-datepicker';\r\n//import DatePicker from '../../../../assets/react-datepicker/es/index';\r\nimport { connect } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\nimport { actionGetStudentList } from '../../common/core/redux/actions';\r\nimport { actionSetStudentAsUser } from '../../common/core/redux/actions';\r\nimport moment from 'moment';\r\nimport validation from 'react-validation-mixin';\r\nimport strategy from 'react-validatorjs-strategy';\r\nimport classnames from 'classnames';\r\nimport ImageCropper from '../../common/cropper/imageCropper';\r\nimport achievementDefaultImage from '../../assets/img/default_achievement.jpg';\r\nimport _ from 'lodash';\r\n\r\nimport CONSTANTS from '../../common/core/config/appConfig';\r\nimport {\r\n  renderMessage,\r\n  isValidURL,\r\n  ZoomInAndOut,\r\n  generateTimestamp,\r\n  showSuccessToast\r\n} from '../../common/commonFunctions';\r\nimport theRapidHireApiService from '../../common/core/api/apiService';\r\n//import MediaList from '../mediaList';\r\n\r\nlet validationMessages = CONSTANTS.validationMessages;\r\nlet regExpressions = CONSTANTS.regExpressions;\r\nlet badgeImgArray = [];\r\nlet badgeImgPreview = [];\r\nlet certificateImgArray = [];\r\nlet certificateImgPreview = [];\r\nlet mediaImgArray = [];\r\nlet mediaImgPreview = [];\r\nconst emptyToDate = '10000000';\r\n\r\n\r\n\r\nclass AddJobDescription extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      isLoading: false,     \r\n      startDate: '',\r\n      endDate: '',\r\n      promptRecommendation: false,    \r\n      userId: '',     \r\n      todaysDate: false,    \r\n      jobDescriptionDetail: {},     \r\n      jobDescriptionListData: [],     \r\n      designation:'',\r\n      organisation:'',\r\n      profileRoleList:[],\r\n      titleNotAvailable:false,\r\n      jobDescriptionModal:true,\r\n      jobDescId:'',\r\n      associateList: [],\r\n      skillsList:[],\r\n      locationList: [{\r\n              value: 1 ,\r\n              label: 'Indore'},\r\n              {\r\n                value: 2 ,\r\n                label: 'Bhopal'},\r\n                {\r\n                  value: 2 ,\r\n                  label: 'Dewas'}\r\n              ]              \r\n         \r\n    };\r\n\r\n    this.getValidatorData = this.getValidatorData.bind(this);\r\n    this.getClasses = this.getClasses.bind(this);\r\n    this.validatorTypes = strategy.createSchema(\r\n      {\r\n      //  projectName: 'required'\r\n       \r\n        // level3Competency: 'required',\r\n        // skills: 'required',\r\n        // importance: 'required',\r\n        // //   startDate: 'required',\r\n        // //  endDate: 'required',\r\n        // firstName: ['regex:' + regExpressions.alphaOnly],\r\n        // lastName: ['regex:' + regExpressions.alphaOnly],\r\n        // email: 'email'\r\n      },\r\n      {\r\n   //     'required.designation': validationMessages.designation.required\r\n        \r\n        // 'required.level3Competency': validationMessages.competency.required\r\n        // 'required.skills': validationMessages.skills.required,\r\n        // 'required.importance': validationMessages.importance.required,\r\n        // //  'required.startDate': validationMessages.startDate.required,\r\n        // //  'required.endDate': validationMessages.endDate.required,\r\n        // 'email.email': validationMessages.email.invalid,\r\n        // 'regex.firstName': validationMessages.firstName.alphaOnly,\r\n        // 'regex.lastName': validationMessages.lastName.alphaOnly\r\n      }\r\n    );\r\n    this.getKeySkillsList();\r\n    this.getProfileRoleList();\r\n  }\r\n\r\n\r\n  getProfileRoleList(){\r\n    theRapidHireApiService('getProfileRoleList')\r\n    .then(response => {     \r\n      console.log(response);\r\n      if (response.data.status === 'Success') {\r\n        let profileRoleList= this.state.profileRoleList;\r\n        response.data.result.forEach(function(data){       \r\n           profileRoleList.push({label: data.profileRole,value:data.profileRoleId })\r\n        })  \r\n       \r\n        this.setState({profileRoleList: profileRoleList});\r\n          }\r\n        })\r\n    .catch(err => {\r\n      console.log(err);\r\n    });\r\n  }\r\n\r\n  getKeySkillsList(){\r\n    theRapidHireApiService('getKeySkillsList')\r\n    .then(response => {     \r\n      if (response.data.status === 'Success') {\r\n         let skillsList= this.state.skillsList;      \r\n         response.data.result.forEach(function(data){        \r\n            skillsList.push({label: data.skillName,value:data.skillId })\r\n        })   \r\n       \r\n         this.setState({skillsList: skillsList});\r\n      }\r\n    })\r\n    .catch(err => {\r\n      console.log(err);\r\n    });\r\n  }\r\n\r\n  setProfileData = data => {\r\n    //console.log(data);\r\n    if (data) {\r\n      let userId = data.userId;\r\n      let summary = data.summary;\r\n      let firstName = data.firstName;\r\n      let lastName = data.lastName;\r\n      // let tagline = data.tagline.trim();\r\n      // let editTag = data.tagline.trim();\r\n      let tagline = data.tagline ? data.tagline.trim() : null;\r\n      let editTag = data.tagline ? data.tagline.trim() : null;\r\n\r\n      let name =\r\n        (data.firstName ? data.firstName : '') +\r\n        ' ' +\r\n        (data.lastName ? data.lastName : '');\r\n      let profileImage = data.profilePicture;\r\n      if (profileImage) {\r\n        profileImage =  profileImage;\r\n      }\r\n      let coverImage = data.coverImage;\r\n      if (coverImage) {\r\n        coverImage =  coverImage;\r\n      }\r\n      let isActive = data.isActive;\r\n      this.setState({\r\n        editTag,\r\n        summary,\r\n        firstName,\r\n        lastName,\r\n        userId,\r\n        profileImage,\r\n        coverImage,\r\n        tagline,\r\n        isActive,\r\n        name\r\n      });\r\n    }\r\n  };  \r\n\r\n  closeAchievementyModal = status => {\r\n    \r\n    this.setState({      \r\n    });\r\n    \r\n  };\r\n\r\n  getValidatorData = () => {\r\n    return this.state;\r\n  };\r\n\r\n  getClasses = field => {\r\n    return classnames({\r\n      error: !this.props.isValid(field)\r\n    });\r\n  };\r\n\r\n  componentDidMount() {\r\n    // if(this.props.user){\r\n     let userId = this.props.userData.userId;\r\n     this.setState({userId:userId})\r\n    // }  \r\n    console.log('this.props.employmentDetail ',this.props.jobDescriptionDetail);\r\n    this.setJobDescriptionData(this.props.jobDescriptionDetail);\r\n    this.getKeySkillsList();\r\n    this.getJobDescriptionDetails(userId);\r\n  }\r\n\r\n  getJobDescriptionDetails(userId){\r\n    theRapidHireApiService('getJobDescriptonListById',{userId})\r\n    .then(response => {     \r\n      if (response.data.status === 'Success') {\r\n         let jobDescriptionListData= this.state.jobDescriptionListData;\r\n         jobDescriptionListData= response.data.result[0];         \r\n         this.setState({jobDescriptionListData: jobDescriptionListData});\r\n      }\r\n    })\r\n    .catch(err => {\r\n      console.log(err);\r\n    });\r\n  }\r\n\r\n  setJobDescriptionData = data => { \r\n    if(data){ \r\n      this.setState({      \r\n           recruiterId:data.recruiterId  ,\r\n           title : data.title,\r\n           companyId:data.companyId,\r\n           description : data.description,\r\n           noOfPosition : data.noOfPosition,\r\n           minExperience : data.minExperience,                \r\n           maxExperience : data.maxExperience,    \r\n           location :data.location,      \r\n           skills:data.skills,\r\n           postedBy:data.postedBy,\r\n           jobDescId:data.jobDescId                   \r\n        })       \r\n      }; \r\n  }\r\n\r\n  handleChange = event => {\r\n    const target = event.target;\r\n    const value = target.type === 'checkbox' ? target.checked : target.value;\r\n    const name = target.name;\r\n\r\n    this.setState({\r\n      [name]: value\r\n    });\r\n  };\r\n\r\n  handleChangeStart = startDate => {\r\n    this.handleDateChange({ startDate });\r\n  };\r\n\r\n  handleChangeEnd = endDate => {\r\n    this.handleDateChange({ endDate });\r\n  };\r\n\r\n  handleDateChange = ({ startDate, endDate }) => {\r\n    console.log(endDate);\r\n    startDate = startDate || this.state.startDate;\r\n    endDate = endDate || this.state.endDate;\r\n    if (startDate && endDate) {\r\n      if (startDate.isAfter(endDate)) {\r\n        endDate = startDate;\r\n      }\r\n    }\r\n    this.setState({ startDate, endDate });\r\n  };\r\n\r\n  generateSASToken() {\r\n    theRapidHireApiService('getSASToken')\r\n      .then(response => {\r\n        if (response.data.status === 'Success') {\r\n          let sasToken = response.data.result.sasToken;\r\n          this.setState({ sasToken });\r\n        }\r\n      })\r\n      .catch(err => {\r\n        console.log(err);\r\n      });\r\n  }\r\n\r\n  validateData = () => {\r\n    let self = this;\r\n    this.props.validate(function(error) {\r\n      let imageObject = {\r\n        media: self.state.mediaImgArray || []\r\n      };\r\n\r\n      if (!error) {\r\n        self.setState({ isLoading: true });       \r\n            self.handleSubmit();        \r\n        } else {\r\n          self.handleSubmit();\r\n        }      \r\n    });\r\n  };  \r\n\r\n  handleSubmit() {     \r\n   let description = this.state.description;\r\n   let noOfPosition = parseInt(this.state.noOfPosition,10);\r\n   let minExperience = parseInt(this.state.minExperience,10);   \r\n   let maxExperience = parseInt(this.state.maxExperience,10);    \r\n   let location= [];\r\n   this.state.location.forEach(function(item){\r\n    location.push(item.label);\r\n   })    \r\n   let skills = [];     \r\n   this.state.skills.forEach(function(item){\r\n    skills.push({skillId:item.value,skillName:item.label});\r\n   })   \r\n\r\n   let title = this.state.profileRole && this.state.profileRole.label !== CONSTANTS.OTHER? this.state.profileRole.label: this.state.title;\r\n   let titleId= this.state.profileRole && this.state.profileRole.label !== CONSTANTS.OTHER ? this.state.profileRole.value: null\r\n   \r\n    let userId = this.state.userId;\r\n    let postedBy = this.props.user.userId;\r\n    let jobDescId=  this.state.jobDescId;   \r\n\r\n   \r\n    let data = {\r\n      title,\r\n      titleId,\r\n      userId,\r\n      description,\r\n      jobDescId,    \r\n      noOfPosition,\r\n      minExperience,\r\n      maxExperience,\r\n      location,\r\n      postedBy,\r\n      skills\r\n    };\r\n\r\n    let self = this;\r\n   \r\n    if (!this.state.jobDescId || this.state.jobDescId === '') {\r\n      theRapidHireApiService('addJobDescription', data)\r\n        .then(response => {\r\n          if (response.data.status === 'Success') {      \r\n            self.setState({ isLoading: false });\r\n            showSuccessToast('Job Description added');\r\n            self.closeJobDescriptionModal('save');\r\n          } \r\n        })\r\n        .catch(error => {\r\n          self.setState({ isLoading: false });\r\n          console.log(error);\r\n        });\r\n    } else {\r\n      theRapidHireApiService('getJobDescriptonListById', data)\r\n        .then(response => {\r\n          if (response.data.status === 'Success') {        \r\n            self.closeJobDescriptionModal('save');\r\n            self.setState({ isLoading: false });\r\n          }\r\n        })\r\n        .catch(error => {\r\n          self.setState({ isLoading: false });\r\n          console.log(error);\r\n        });\r\n    }\r\n  }\r\n\r\n  closeImageModal = () => {\r\n    this.setState({\r\n      imagesModal: !this.state.imagesModal\r\n    });\r\n  };\r\n\r\n\r\n  handleProfileRoleChange = newValue => {\r\n    if(newValue.label == CONSTANTS.OTHER){      \r\n        this.setState({titleNotAvailable: true});\r\n    }else{\r\n      this.setState({titleNotAvailable: false});\r\n    }\r\n    this.setState({\r\n      profileRole: newValue\r\n    });    \r\n  };\r\n\r\n \r\n  handleLocationChange = newValue => {\r\n    this.setState({\r\n      location: newValue\r\n    });\r\n  };\r\n\r\n  handleSkillsChange = newValue => {\r\n    this.setState({\r\n      skills: newValue\r\n    });\r\n  };\r\n  \r\n\r\n  closeJobDescriptionModal = status => {   \r\n    this.setState({\r\n      jobDescriptionModal: false\r\n      \r\n    });   \r\n    this.props.closeJobDescriptionComponent();\r\n  };\r\n\r\n  render() {\r\n    let self = this;\r\n    const { isLoading } = this.state;\r\n    const cssClasses = {\r\n      root: 'input-group mb-1',\r\n      input: 'form-control'\r\n    };\r\n    const inputProps = {\r\n      value: this.state.streetAddress1,\r\n      onChange: this.onChange,\r\n      placeholder: 'Street Address1',\r\n      type: 'text'\r\n    };\r\n    const defaultStyles = {\r\n      root: {\r\n        position: 'relative',\r\n        paddingBottom: '0px'\r\n      },\r\n      input: {\r\n        display: 'inline-block',\r\n        width: '100%',\r\n        padding: '10px'\r\n      },\r\n      autocompleteContainer: {\r\n        position: 'absolute',\r\n        top: '100%',\r\n        backgroundColor: 'white',\r\n        border: '1px solid #555555',\r\n        width: '100%'\r\n      },\r\n      autocompleteItem: {\r\n        backgroundColor: '#ffffff',\r\n        padding: '10px',\r\n        color: '#555555',\r\n        cursor: 'pointer'\r\n      },\r\n      autocompleteItemActive: {\r\n        backgroundColor: '#fafafa'\r\n      }\r\n    };\r\n    const CalendarContainer = ({ children }) => {\r\n      const el = document.getElementById('calendar-portal');\r\n      return <Portal container={el}>{children}</Portal>;\r\n    };\r\n\r\n    return (\r\n      <Modal\r\n      bsSize=\"large\"\r\n      show={this.state.jobDescriptionModal}\r\n      onHide={this.closeJobDescriptionModal.bind(this, 'close')}\r\n      backdrop=\"static\"\r\n      keyboard={false}\r\n    >\r\n      <ToastContainer\r\n        autoClose={5000}\r\n        className=\"custom-toaster-main-cls\"\r\n        toastClassName=\"custom-toaster-bg\"\r\n        transition={ZoomInAndOut}\r\n      />\r\n      <Modal.Header closeButton>\r\n        <Modal.Title className=\"subtitle text-center\">\r\n          Add Job Description           \r\n        </Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n      <Form horizontal className=\"lightBgForm\">\r\n              <Col sm={10}> \r\n\r\n               <FormGroup className={this.getClasses('profileRole')}>\r\n                  <Col componentClass={ControlLabel} sm={3}>\r\n                  select title\r\n                  </Col>\r\n                  <Col sm={9}>\r\n                    <div className=\"custom-select\">\r\n                      <span className=\"icon-down_arrow selectIcon\" />\r\n                      <Select\r\n                        className=\"form-control\"                        \r\n                        name=\"location\"\r\n                        value={this.state.profileRole}\r\n                        onChange={this.handleProfileRoleChange}\r\n                        options={this.state.profileRoleList}\r\n                        placeholder=\"Select all the location that you used along the way\"\r\n                      />\r\n                    </div>\r\n                    {renderMessage(this.props.getValidationMessages('profileRole'))}\r\n                  </Col>\r\n                </FormGroup>             \r\n              {this.state.titleNotAvailable == true ?\r\n                  <FormGroup\r\n                      controlId=\"formControlsTextarea\"\r\n                      className={this.getClasses('title')}\r\n                    >\r\n                      <Col componentClass={ControlLabel} sm={3}>\r\n                        <ControlLabel>Title</ControlLabel>\r\n                      </Col>\r\n                      <Col sm={9}>\r\n                        <FormControl\r\n                          placeholder=\"Add a title\"\r\n                          name=\"title\"\r\n                          value={this.state.title}\r\n                          onChange={this.handleChange}\r\n                          autoComplete=\"off\"\r\n                          maxLength=\"100\"\r\n                        />\r\n                        {renderMessage(this.props.getValidationMessages('tile'))}\r\n                      </Col>\r\n                    </FormGroup>:\r\n                null}\r\n                <FormGroup\r\n                  controlId=\"formControlsTextarea\"\r\n                  className={this.getClasses('description')}\r\n                >\r\n                  <Col componentClass={ControlLabel} sm={3}>\r\n                    <ControlLabel>Description</ControlLabel>\r\n                  </Col>\r\n                  <Col sm={9}>\r\n                    <FormControl\r\n                      componentClass=\"textarea\"\r\n                      placeholder=\"Add a description\"\r\n                      name=\"description\"\r\n                      value={this.state.description}\r\n                      onChange={this.handleChange}\r\n                      autoComplete=\"off\"\r\n                      maxLength=\"100\"\r\n                    />\r\n                    {renderMessage(this.props.getValidationMessages('description'))}\r\n                  </Col>\r\n                </FormGroup>\r\n\r\n                <FormGroup className={this.getClasses('skills')}>\r\n                  <Col componentClass={ControlLabel} sm={3}>\r\n                   Skills\r\n                  </Col>\r\n                  <Col sm={9}>\r\n                    <div className=\"custom-select\">\r\n                      <span className=\"icon-down_arrow selectIcon\" />\r\n                      <Select\r\n                        multi\r\n                        className=\"form-control\"                        \r\n                        name=\"skills\"\r\n                        value={this.state.skills}\r\n                        onChange={this.handleSkillsChange}\r\n                        options={this.state.skillsList}\r\n                        placeholder=\"Select skill\"\r\n                      />\r\n                    </div>\r\n                    {renderMessage(this.props.getValidationMessages('skills'))}\r\n                  </Col>\r\n                </FormGroup>\r\n\r\n                 <FormGroup className={this.getClasses('location')}>\r\n                  <Col componentClass={ControlLabel} sm={3}>\r\n                    Desired Location\r\n                  </Col>\r\n                  <Col sm={9}>\r\n                    <div className=\"custom-select\">\r\n                      <span className=\"icon-down_arrow selectIcon\" />\r\n                      <Select\r\n                        className=\"form-control\"\r\n                        multi\r\n                        name=\"location\"\r\n                        value={this.state.location}\r\n                        onChange={this.handleLocationChange}\r\n                        options={this.state.locationList}\r\n                        placeholder=\"Select all the location that you used along the way\"\r\n                      />\r\n                    </div>\r\n                    {renderMessage(this.props.getValidationMessages('location'))}\r\n                  </Col>\r\n                </FormGroup>\r\n\r\n              <FormGroup className=\"addDateInput\"> \r\n                <Col componentClass={ControlLabel} sm={3}>\r\n                       Experience\r\n                </Col>                \r\n                  <Col sm={9}>\r\n                    <div className=\"dob\">\r\n                      <div className=\"form-group\">\r\n                      <FormControl\r\n                          componentClass=\"select\"\r\n                          placeholder=\"minExperience\"\r\n                          name=\"minExperience\"\r\n                          value={this.state.minExperience}                          \r\n                          onChange={this.handleChange}\r\n                          autoComplete=\"off\"\r\n                          maxLength=\"1000\"\r\n                        >                        \r\n                       <option value=\"\">min exp</option>\r\n                       <option value={1}>1</option>\r\n                       <option value={2}>2</option>\r\n                       <option value={3}>3</option>\r\n                       <option value={4}>4</option>\r\n                       <option value={5}>5</option>    \r\n                       <option value={6}>6</option>        \r\n                       <option value={7}>7</option>\r\n                       <option value={8}>8</option>\r\n                       <option value={9}>9</option>\r\n                       <option value={10}>10</option>\r\n                       <option value={11}>11</option>    \r\n                       <option value={12}>12</option>                                      \r\n                      </FormControl>\r\n                        {renderMessage(\r\n                          this.props.getValidationMessages('expectedSalaryInlakh')\r\n                        )}\r\n                      </div>\r\n                      <div className=\"form-group\">\r\n                      <FormControl\r\n                          componentClass=\"select\"\r\n                          placeholder=\"maxExperience\"\r\n                          name=\"maxExperience\"\r\n                          value={this.state.maxExperience}\r\n                          onChange={this.handleChange}\r\n                          autoComplete=\"off\"\r\n                          maxLength=\"1000\"\r\n                        >      \r\n                        <option value=\"\">max exp</option>\r\n                       <option value={1}>1</option>\r\n                       <option value={2}>2</option>\r\n                       <option value={3}>3</option>\r\n                       <option value={4}>4</option>\r\n                       <option value={5}>5</option>    \r\n                       <option value={6}>6</option>        \r\n                       <option value={7}>7</option>\r\n                       <option value={8}>8</option>\r\n                       <option value={9}>9</option>\r\n                       <option value={10}>10</option>\r\n                       <option value={11}>11</option>    \r\n                       <option value={12}>12</option>                                      \r\n                      </FormControl>                 \r\n                      </div>                     \r\n                    </div>                   \r\n                    {/* {renderMessage(this.props.getValidationMessages('endDate'))} */}\r\n                  </Col>\r\n                </FormGroup>        \r\n    \r\n\r\n                <FormGroup\r\n                  controlId=\"formControlsTextarea\"\r\n                  className={this.getClasses('noOfPosition')}\r\n                >\r\n                  <Col componentClass={ControlLabel} sm={3}>\r\n                    <ControlLabel>No Of position needed</ControlLabel>\r\n                  </Col>\r\n                  <Col sm={9}>\r\n                    <FormControl\r\n                      placeholder=\"No. of Positions\"\r\n                      name=\"noOfPosition\"\r\n                      value={this.state.noOfPosition}\r\n                      onChange={this.handleChange}\r\n                      autoComplete=\"off\"\r\n                      maxLength=\"100\"\r\n                    />\r\n                    {renderMessage(this.props.getValidationMessages('noOfPosition'))}\r\n                  </Col>\r\n                </FormGroup>        \r\n               \r\n              </Col>      </Form>      \r\n              </Modal.Body>\r\n          <Modal.Footer>\r\n       \r\n            <Button\r\n              bsStyle=\"primary\"\r\n              className=\"no-bold no-round\"\r\n              disabled={this.state.isLoading}\r\n              onClick={!this.state.isLoading ? this.validateData : null}\r\n            >\r\n              {this.state.isLoading ? 'In Progress...' : 'Save'}\r\n            </Button>\r\n            <Button\r\n              bsStyle=\"default\"\r\n              className=\"no-bold no-round\"\r\n              onClick={this.closeJobDescriptionModal.bind(this, 'close')}              \r\n            >\r\n              Close\r\n            </Button>\r\n           \r\n           </Modal.Footer>\r\n           </Modal>          \r\n            \r\n     \r\n    );\r\n  }\r\n}\r\nAddJobDescription = validation(strategy)(AddJobDescription);\r\nconst mapStateToProps = state => {\r\n  return {\r\n    user: state.User.userData,\r\n    parent: state.User.parentData\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return bindActionCreators(\r\n    { actionGetStudentList, actionSetStudentAsUser },\r\n    dispatch\r\n  );\r\n};\r\n\r\n\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(AddJobDescription);\r\n"]},"metadata":{},"sourceType":"module"}