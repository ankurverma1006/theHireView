{"ast":null,"code":"/*global console*/\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if ('value' in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    'default': obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError('Cannot call a class as a function');\n  }\n}\n\nvar _crypto = require('crypto');\n\nvar _crypto2 = _interopRequireDefault(_crypto);\n\nvar _bl = require('bl');\n/**\n * CrossPlatform CryptLib\n   * This cross platform CryptLib uses AES 256 for encryption. This library can\n   * be used for encryptoion and de-cryption of string on iOS, Android, Windows\n   * and Node platform.\n   * Features:\n   * 1. 256 bit AES encryption\n   * 2. Random IV generation.\n   * 3. Provision for SHA256 hashing of key.\n */\n\n\nvar _bl2 = _interopRequireDefault(_bl);\n\nvar CryptLib = function () {\n  function CryptLib() {\n    _classCallCheck(this, CryptLib);\n\n    this._maxKeySize = 32;\n    this._maxIVSize = 16;\n    this._algorithm = 'AES-256-CBC';\n    this._charset = 'utf8';\n    this._encoding = 'base64';\n    this._hashAlgo = 'sha256';\n    this._digestEncoding = 'hex';\n    this._characterMatrixForRandomIVStringGeneration = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '-', '_'];\n  }\n  /**\n   * private function: _encryptDecrypt\n   * encryptes or decrypts to or from text or encrypted text given an iv and key\n   * @param  {string}  text        can be plain text or encrypted text\n   * @param  {string}  key         the key used to encrypt or decrypt\n   * @param  {string}  initVector  the initialization vector to encrypt or\n   *                               decrypt\n   * @param  {bool}    isEncrypt   true = encryption, false = decryption\n   * @return {string}              encryted text or plain text\n   */\n\n\n  _createClass(CryptLib, [{\n    key: '_encryptDecrypt',\n    value: function _encryptDecrypt(text, key, initVector, isEncrypt) {\n      if (!text || !key) {\n        throw 'cryptLib._encryptDecrypt: -> key and plain or encrypted text ' + 'required';\n      }\n\n      var ivBl = new _bl2['default'](),\n          keyBl = new _bl2['default'](),\n          keyCharArray = key.split(''),\n          ivCharArray = [],\n          encryptor = undefined,\n          decryptor = undefined,\n          clearText = undefined;\n\n      if (initVector && initVector.length > 0) {\n        ivCharArray = initVector.split('');\n      }\n\n      for (var i = 0; i < this._maxIVSize; i++) {\n        ivBl.append(ivCharArray.shift() || [null]);\n      }\n\n      for (var i = 0; i < this._maxKeySize; i++) {\n        keyBl.append(keyCharArray.shift() || [null]);\n      }\n\n      if (isEncrypt) {\n        encryptor = _crypto2['default'].createCipheriv(this._algorithm, keyBl.toString(), ivBl.toString());\n        encryptor.setEncoding(this._encoding);\n        encryptor.write(text);\n        encryptor.end();\n        return encryptor.read();\n      }\n\n      decryptor = _crypto2['default'].createDecipheriv(this._algorithm, keyBl.toString(), ivBl.toString());\n      var dec = decryptor.update(text, this._encoding, this._charset);\n      dec += decryptor.final(this._charset);\n      return dec;\n    }\n    /**\n     * private function: _isCorrectLength\n     * checks if length is preset and is a whole number and > 0\n     * @param  {int}  length\n     * @return {bool}\n    */\n\n  }, {\n    key: '_isCorrectLength',\n    value: function _isCorrectLength(length) {\n      return length && /^\\d+$/.test(length) && parseInt(length, 10) !== 0;\n    }\n    /**\n     * generates random initaliztion vector given a length\n     * @param  {int}  length  the length of the iv to be generated\n     */\n\n  }, {\n    key: 'generateRandomIV',\n    value: function generateRandomIV(length) {\n      if (!this._isCorrectLength(length)) {\n        throw 'cryptLib.generateRandomIV() -> needs length or in wrong format';\n      }\n\n      var randomBytes = _crypto2['default'].randomBytes(length),\n          _iv = [];\n\n      for (var i = 0; i < length; i++) {\n        var ptr = randomBytes[i] % this._characterMatrixForRandomIVStringGeneration.length;\n        _iv[i] = this._characterMatrixForRandomIVStringGeneration[ptr];\n      }\n\n      return _iv.join('');\n    }\n    /**\n     * Creates a hash of a key using SHA-256 algorithm\n     * @param  {string} key     the key that will be hashed\n     * @param  {int}    length  the length of the SHA-256 hash\n     * @return {string}         the output hash generated given a key and length\n     */\n\n  }, {\n    key: 'getHashSha256',\n    value: function getHashSha256(key, length) {\n      if (!key) {\n        throw 'cryptLib.getHashSha256() -> needs key';\n      }\n\n      if (!this._isCorrectLength(length)) {\n        throw 'cryptLib.getHashSha256() -> needs length or in wrong format';\n      }\n\n      return _crypto2['default'].createHash(this._hashAlgo).update(key).digest(this._digestEncoding).substring(0, length);\n    }\n    /**\n     * encryptes plain text given a key and initialization vector\n     * @param  {string}  text        can be plain text or encrypted text\n     * @param  {string}  key         the key used to encrypt or decrypt\n     * @param  {string}  initVector  the initialization vector to encrypt or\n     *                               decrypt\n     * @return {string}              encryted text or plain text\n     */\n\n  }, {\n    key: 'encrypt',\n    value: function encrypt(plainText, key, initVector) {\n      return this._encryptDecrypt(plainText, key, initVector, true);\n    }\n    /**\n     * decrypts encrypted text given a key and initialization vector\n     * @param  {string}  text        can be plain text or encrypted text\n     * @param  {string}  key         the key used to encrypt or decrypt\n     * @param  {string}  initVector  the initialization vector to encrypt or\n     *                               decrypt\n     * @return {string}              encryted text or plain text\n     */\n\n  }, {\n    key: 'decrypt',\n    value: function decrypt(encryptedText, key, initVector) {\n      return this._encryptDecrypt(encryptedText, key, initVector, false);\n    }\n  }]);\n\n  return CryptLib;\n}();\n\nexports['default'] = new CryptLib();\nmodule.exports = exports['default'];","map":null,"metadata":{},"sourceType":"script"}