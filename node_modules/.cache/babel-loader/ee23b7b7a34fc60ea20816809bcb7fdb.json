{"ast":null,"code":"// handle user media capture\nexport function captureUserMedia(callback) {\n  var params = {\n    audio: false,\n    video: true\n  };\n  navigator.getUserMedia(params, callback, error => {\n    alert(JSON.stringify(error));\n  });\n}\n; // handle S3 upload\n\nfunction getSignedUrl(file) {\n  let queryString = '?objectName=' + file.id + '&contentType=' + encodeURIComponent(file.type);\n  return fetch('/s3/sign' + queryString).then(response => {\n    return response.json();\n  }).catch(err => {\n    console.log('error: ', err);\n  });\n}\n\nfunction createCORSRequest(method, url) {\n  var xhr = new XMLHttpRequest();\n\n  if (xhr.withCredentials != null) {\n    xhr.open(method, url, true);\n  } else if (typeof XDomainRequest !== \"undefined\") {\n    xhr = new XDomainRequest();\n    xhr.open(method, url);\n  } else {\n    xhr = null;\n  }\n\n  return xhr;\n}\n\n;\nexport function S3Upload(fileInfo) {\n  //parameters: { type, data, id }\n  return new Promise((resolve, reject) => {\n    getSignedUrl(fileInfo).then(s3Info => {\n      // upload to S3\n      var xhr = createCORSRequest('PUT', s3Info.signedUrl);\n\n      xhr.onload = function () {\n        if (xhr.status === 200) {\n          console.log(xhr.status);\n          resolve(true);\n        } else {\n          console.log(xhr.status);\n          reject(xhr.status);\n        }\n      };\n\n      xhr.setRequestHeader('Content-Type', fileInfo.type);\n      xhr.setRequestHeader('x-amz-acl', 'public-read');\n      return xhr.send(fileInfo.data);\n    });\n  });\n}","map":{"version":3,"sources":["/home/ank/Desktop/therapidhiregit/therapidhireui/TheRapidHireUI/src/video/AppUtils.js"],"names":["captureUserMedia","callback","params","audio","video","navigator","getUserMedia","error","alert","JSON","stringify","getSignedUrl","file","queryString","id","encodeURIComponent","type","fetch","then","response","json","catch","err","console","log","createCORSRequest","method","url","xhr","XMLHttpRequest","withCredentials","open","XDomainRequest","S3Upload","fileInfo","Promise","resolve","reject","s3Info","signedUrl","onload","status","setRequestHeader","send","data"],"mappings":"AAAA;AACA,OAAO,SAASA,gBAAT,CAA0BC,QAA1B,EAAoC;AACzC,MAAIC,MAAM,GAAG;AAAEC,IAAAA,KAAK,EAAE,KAAT;AAAgBC,IAAAA,KAAK,EAAE;AAAvB,GAAb;AAEAC,EAAAA,SAAS,CAACC,YAAV,CAAuBJ,MAAvB,EAA+BD,QAA/B,EAA0CM,KAAD,IAAW;AAClDC,IAAAA,KAAK,CAACC,IAAI,CAACC,SAAL,CAAeH,KAAf,CAAD,CAAL;AACD,GAFD;AAGD;AAAA,C,CAED;;AACA,SAASI,YAAT,CAAsBC,IAAtB,EAA4B;AAC1B,MAAIC,WAAW,GAAG,iBAAiBD,IAAI,CAACE,EAAtB,GAA2B,eAA3B,GAA6CC,kBAAkB,CAACH,IAAI,CAACI,IAAN,CAAjF;AACA,SAAOC,KAAK,CAAC,aAAaJ,WAAd,CAAL,CACNK,IADM,CACAC,QAAD,IAAc;AAClB,WAAOA,QAAQ,CAACC,IAAT,EAAP;AACD,GAHM,EAINC,KAJM,CAICC,GAAD,IAAS;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBF,GAAvB;AACD,GANM,CAAP;AAOD;;AAED,SAASG,iBAAT,CAA2BC,MAA3B,EAAmCC,GAAnC,EAAwC;AACtC,MAAIC,GAAG,GAAG,IAAIC,cAAJ,EAAV;;AAEA,MAAID,GAAG,CAACE,eAAJ,IAAuB,IAA3B,EAAiC;AAC/BF,IAAAA,GAAG,CAACG,IAAJ,CAASL,MAAT,EAAiBC,GAAjB,EAAsB,IAAtB;AACD,GAFD,MAEO,IAAI,OAAOK,cAAP,KAA0B,WAA9B,EAA2C;AAChDJ,IAAAA,GAAG,GAAG,IAAII,cAAJ,EAAN;AACAJ,IAAAA,GAAG,CAACG,IAAJ,CAASL,MAAT,EAAiBC,GAAjB;AACD,GAHM,MAGA;AACLC,IAAAA,GAAG,GAAG,IAAN;AACD;;AAED,SAAOA,GAAP;AACD;;AAAA;AAED,OAAO,SAASK,QAAT,CAAkBC,QAAlB,EAA4B;AAAE;AACnC,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC1B,IAAAA,YAAY,CAACuB,QAAD,CAAZ,CACChB,IADD,CACOoB,MAAD,IAAY;AAChB;AACA,UAAIV,GAAG,GAAGH,iBAAiB,CAAC,KAAD,EAAQa,MAAM,CAACC,SAAf,CAA3B;;AAEAX,MAAAA,GAAG,CAACY,MAAJ,GAAa,YAAW;AACtB,YAAIZ,GAAG,CAACa,MAAJ,KAAe,GAAnB,EAAwB;AACtBlB,UAAAA,OAAO,CAACC,GAAR,CAAYI,GAAG,CAACa,MAAhB;AACAL,UAAAA,OAAO,CAAC,IAAD,CAAP;AACD,SAHD,MAGO;AACLb,UAAAA,OAAO,CAACC,GAAR,CAAYI,GAAG,CAACa,MAAhB;AAEAJ,UAAAA,MAAM,CAACT,GAAG,CAACa,MAAL,CAAN;AACD;AACF,OATD;;AAWAb,MAAAA,GAAG,CAACc,gBAAJ,CAAqB,cAArB,EAAqCR,QAAQ,CAAClB,IAA9C;AACAY,MAAAA,GAAG,CAACc,gBAAJ,CAAqB,WAArB,EAAkC,aAAlC;AAEA,aAAOd,GAAG,CAACe,IAAJ,CAAST,QAAQ,CAACU,IAAlB,CAAP;AACD,KApBD;AAqBD,GAtBM,CAAP;AAuBD","sourcesContent":["// handle user media capture\nexport function captureUserMedia(callback) {\n  var params = { audio: false, video: true };\n\n  navigator.getUserMedia(params, callback, (error) => {\n    alert(JSON.stringify(error));\n  });\n};\n\n// handle S3 upload\nfunction getSignedUrl(file) {\n  let queryString = '?objectName=' + file.id + '&contentType=' + encodeURIComponent(file.type);\n  return fetch('/s3/sign' + queryString)\n  .then((response) => {\n    return response.json();\n  })\n  .catch((err) => {\n    console.log('error: ', err)\n  })\n}\n\nfunction createCORSRequest(method, url) {\n  var xhr = new XMLHttpRequest();\n\n  if (xhr.withCredentials != null) {\n    xhr.open(method, url, true);\n  } else if (typeof XDomainRequest !== \"undefined\") {\n    xhr = new XDomainRequest();\n    xhr.open(method, url);\n  } else {\n    xhr = null;\n  }\n\n  return xhr;\n};\n\nexport function S3Upload(fileInfo) { //parameters: { type, data, id }\n  return new Promise((resolve, reject) => {\n    getSignedUrl(fileInfo)\n    .then((s3Info) => {\n      // upload to S3\n      var xhr = createCORSRequest('PUT', s3Info.signedUrl);\n\n      xhr.onload = function() {\n        if (xhr.status === 200) {\n          console.log(xhr.status)\n          resolve(true);\n        } else {\n          console.log(xhr.status)\n          \n          reject(xhr.status);\n        }\n      };\n\n      xhr.setRequestHeader('Content-Type', fileInfo.type);\n      xhr.setRequestHeader('x-amz-acl', 'public-read');\n\n      return xhr.send(fileInfo.data);\n    })\n  })\n}\n\n"]},"metadata":{},"sourceType":"module"}