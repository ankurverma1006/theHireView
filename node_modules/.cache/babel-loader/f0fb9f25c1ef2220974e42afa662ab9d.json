{"ast":null,"code":"var _jsxFileName = \"/home/ank/Desktop/therapidhiregit/therapidhireui/TheRapidHireUI/src/common/authorization/hrSignUp.js\";\nimport React, { Component } from 'react';\nimport { ToastContainer } from 'react-toastify';\nimport validation from 'react-validation-mixin';\nimport strategy from 'react-validatorjs-strategy';\nimport classnames from 'classnames';\nimport { bindActionCreators } from 'redux';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { Button, FormGroup, InputGroup, FormControl, Nav, NavItem } from 'react-bootstrap';\nimport { YearPicker, MonthPicker, DayPicker } from 'react-dropdown-date';\nimport * as qs from 'query-string';\nimport Select from 'react-select';\nimport { actionUserLogin } from '../core/redux/actions';\nimport Sidebar from './sideBar';\nimport theRapidHireApiService from '../core/api/apiService';\nimport { ZoomInAndOut, renderMessage, showErrorToast, encrypt, getIPAddress } from '../commonFunctions';\nimport CONSTANTS from '../core/config/appConfig';\nimport moment from 'moment';\nlet validationMessages = CONSTANTS.validationMessages;\nlet regExpressions = CONSTANTS.regExpressions;\nlet i = 0;\n\nclass HRSignup extends Component {\n  constructor(props, context) {\n    super(props);\n\n    this.setUserInfo = userId => {\n      if (userId) {\n        theRapidHireApiService('getStudentPersonalInfoBeforeLogin', {\n          userId\n        }).then(response => {\n          if (response.data.status === 'Success') {\n            let userData = response.data.result;\n            console.log(userData);\n\n            if (userData) {\n              let firstName = userData.firstName || '';\n              let lastName = userData.lastName || '';\n              let email = userData.email || '';\n              let roleId = userData.roleId === 0 ? 1 : userData.roleId;\n              let invitedRoleId = roleId;\n\n              if (userData.dob) {\n                let day = moment(userData.dob).format('D');\n                let month = Number(moment(userData.dob).format('M')) - 1;\n                let year = moment(userData.dob).format('YYYY');\n                console.log(day, month, year);\n                this.setState({\n                  day,\n                  month,\n                  year\n                });\n              }\n\n              if (this.state.invite === CONSTANTS.INVITE_0) {\n                this.setValidatorTypes(roleId);\n              }\n\n              this.setState({\n                firstName,\n                lastName,\n                email,\n                invitedRoleId,\n                roleId\n              });\n            }\n          }\n        }).catch(err => {\n          console.log(err);\n        });\n      }\n    };\n\n    this.handleChange = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n\n    this.handleSelect = tabValue => {\n      let eventKey = Number(tabValue);\n\n      if (eventKey !== this.state.roleId && this.props.location.search === '') {\n        this.setState({\n          firstName: '',\n          lastName: '',\n          email: '',\n          newPassword: '',\n          confirmNewPassword: '',\n          companyName: '' // parentEmail: '',\n          // parentFirstName: '',\n          // parentLastName: '',\n          // year: '',\n          // month: '',\n          // day: ''\n\n        });\n      }\n\n      this.setState({\n        roleId: 3,\n        eventKey: eventKey\n      });\n      this.props.clearValidations();\n      this.setValidatorTypes(eventKey);\n    };\n\n    this.handleResetForm = () => {\n      this.setState(this.initialState);\n    };\n\n    this.submitData = event => {\n      if (event.key === 'Enter') {\n        event.preventDefault();\n        this.validateData();\n      }\n    };\n\n    this.validateData = () => {\n      console.log('validateData -- ');\n      let self = this;\n      this.props.validate(function (error) {\n        if (!error) {\n          //self.setState({ isLoading: true });\n          self.handleSubmit();\n        }\n      });\n    };\n\n    this.handleCompanyChange = newValue => {\n      if (newValue.value == 1) {\n        // this.validatorTypes.rules['companyName'] = 'required|companyName';\n        // this.validatorTypes.messages['required.companyName'] =\n        //                                         'Please enter companyName';\n        this.setState({\n          otherCompanyName: true\n        });\n      } else {// this.validatorTypes.rules['companyName'] = '';\n        // this.validatorTypes.messages['required.companyName'] =\n        //                                         'Please enter companyName';\n      }\n\n      this.setState({\n        company: newValue\n      });\n    };\n\n    this.state = {\n      isLoading: false,\n      userId: '',\n      firstName: '',\n      lastName: '',\n      email: '',\n      newPassword: '',\n      confirmNewPassword: '',\n      parentEmail: '',\n      parentFirstName: '',\n      parentLastName: '',\n      year: '',\n      month: '',\n      day: '',\n      roleId: this.props.location.state && this.props.location.state.eventKey && this.props.location.state.eventKey === 2 ? 1 : 1,\n      eventKey: this.props.location.state && this.props.location.state.eventKey && this.props.location.state.eventKey === 2 ? 2 : 1,\n      parentField: false,\n      invite: CONSTANTS.INVITE_4,\n      invitedRoleId: 1,\n      otherCompanyName: false,\n      companyDetail: []\n    };\n    this.initialState = this.state;\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.getValidatorData = this.getValidatorData.bind(this);\n    this.getClasses = this.getClasses.bind(this);\n    this.setValidatorTypes = this.setValidatorTypes.bind(this);\n  }\n\n  componentWillMount() {\n    console.log('call');\n    this.setValidatorTypes(this.props.location.state && this.props.location.state.eventKey && this.props.location.state.eventKey === 2 ? 2 : 1);\n  }\n\n  componentDidMount() {\n    if (this.props.location.search) {\n      const parsed = qs.parse(this.props.location.search);\n      const invite = parsed.invite;\n      const userId = parsed.userId;\n      this.setState({\n        invite,\n        userId\n      });\n      this.setUserInfo(userId);\n\n      let _this = this;\n\n      getIPAddress(function (ip) {\n        _this.setState({\n          deviceId: ip\n        });\n      });\n    }\n\n    this.getCompanyList();\n  }\n\n  getCompanyList() {\n    theRapidHireApiService('getCompanyList').then(response => {\n      if (response.data.status === 'Success') {\n        let companyDetail = this.state.companyDetail;\n        response.data.result.forEach(function (data) {\n          companyDetail.push({\n            label: data.companyName,\n            value: data.companyId\n          });\n        });\n        this.setState({\n          companyDetail: companyDetail\n        });\n      }\n    }).catch(err => {\n      console.log(err);\n    });\n  } // type = 1 = student,   type = 2 = parent\n\n\n  setValidatorTypes(type) {\n    console.log(type);\n    type = Number(type); // Common validation for student and parent\n\n    let elementObject = {\n      firstName: ['required', 'regex:' + regExpressions.alphaOnly],\n      lastName: ['required', 'regex:' + regExpressions.alphaOnly],\n      email: 'required|email' // //   newPassword: ['required', 'regex:' + regExpressions.passwordPattern],\n      //  confirmNewPassword: 'required|same:newPassword'\n\n    };\n    let messageObject = {\n      'required.firstName': validationMessages.firstName.required,\n      'regex.firstName': validationMessages.firstName.alphaOnly,\n      'required.lastName': validationMessages.lastName.required,\n      'regex.lastName': validationMessages.lastName.alphaOnly,\n      'required.email': validationMessages.email.required,\n      'email.email': validationMessages.email.invalid //     'required.newPassword': validationMessages.password.newPassword,\n      //     'regex.newPassword': validationMessages.password.passwordPattern,\n      // 'required.confirmNewPassword':\n      //   validationMessages.password.confirmNewPassword,\n      // 'same.confirmNewPassword': validationMessages.password.same\n\n    };\n    this.validatorTypes = strategy.createSchema(elementObject, messageObject);\n  }\n\n  getValidatorData() {\n    return this.state;\n  }\n\n  getClasses(field) {\n    return classnames({\n      error: !this.props.isValid(field)\n    });\n  }\n\n  handleSubmit() {\n    let firstName = this.state.firstName.trim();\n    let lastName = this.state.lastName.trim();\n    let email = this.state.email.toLowerCase().trim(); //   let password = encrypt(this.state.newPassword.trim());\n\n    let roleId = 3;\n    let userId = this.state.userId;\n    let deviceId = this.state.deviceId;\n    console.log(this.state.company);\n    let companyName = this.state.company && this.state.company.value !== 1 ? this.state.company.label : this.state.companyName;\n    let companyId = this.state.company && this.state.company.value !== 1 ? this.state.company.value : null;\n    let students = [];\n    let self = this;\n    let data = {\n      firstName,\n      lastName,\n      email,\n      //      password,\n      //  dob,\n      //    parentEmail,\n      //   parentFirstName,\n      //   parentLastName,\n      roleId,\n      companyId,\n      companyName,\n      //    invite,\n      userId: ''\n    };\n    console.log(data);\n    theRapidHireApiService('signupHR', data).then(response => {\n      if (response.data.status === 'Success') {\n        if (self.state.invite === CONSTANTS.INVITE_1 || self.state.invite === CONSTANTS.INVITE_2 || self.state.invite === CONSTANTS.INVITE_3) {\n          let loginData = {\n            email,\n            deviceId\n          };\n          this.props.actionUserLogin(loginData).then(response => {\n            if (response.payload && response.payload.data.status === 'Success') {\n              self.setState({\n                isLoading: false\n              });\n              const userResponse = response.payload.data.result;\n\n              if (userResponse && userResponse.token) {\n                if (userResponse.roleId === 1) {}\n              }\n            }\n          }).catch(error => {\n            self.setState({\n              isLoading: false,\n              password: ''\n            });\n            console.log('err', error);\n          });\n        } else {\n          self.setState({\n            isLoading: false,\n            firstName: '',\n            lastName: '',\n            email: '',\n            newPassword: '',\n            confirmNewPassword: '' // day: '',\n            // month: '',\n            // year: '',\n            // parentFirstName: '',\n            // parentLastName: ''\n\n          });\n          setTimeout(function () {\n            self.props.history.push('/login');\n          }, 5000);\n        }\n      } else {\n        self.setState({\n          isLoading: false\n        });\n      }\n    }).catch(err => {\n      self.setState({\n        isLoading: false\n      });\n      console.log(err);\n    });\n  }\n\n  selectDate(type, value) {\n    if (this.state.roleId === CONSTANTS.STUDENT_ROLE) {\n      if (type === 'year') {\n        this.setState({\n          year: value\n        }, () => this.checkAge());\n      }\n\n      if (type === 'month') {\n        this.setState({\n          month: value\n        }, () => this.checkAge());\n      }\n\n      if (type === 'day') {\n        this.setState({\n          day: value\n        }, () => this.checkAge());\n      }\n    } else if (this.state.roleId === CONSTANTS.PARENT_ROLE) {\n      if (type === 'year') {\n        this.setState({\n          year: value\n        });\n      }\n\n      if (type === 'month') {\n        this.setState({\n          month: value\n        });\n      }\n\n      if (type === 'day') {\n        this.setState({\n          day: value\n        });\n      }\n    }\n  }\n\n  checkAge() {\n    if (this.state.year && this.state.month && this.state.day) {\n      let day = this.state.day;\n      let month = Number(this.state.month);\n      let year = this.state.year;\n      let birthDate = new Date(year, month, day);\n      var today = new Date();\n\n      if (birthDate > today) {\n        showErrorToast('Please select valid date');\n      }\n\n      let age = today.getFullYear() - birthDate.getFullYear();\n\n      if (this.state.invite === CONSTANTS.INVITE_0 || this.state.invite === CONSTANTS.INVITE_1 || this.state.invite === CONSTANTS.INVITE_2 || this.state.invite === CONSTANTS.INVITE_3) {\n        this.setState({\n          parentField: false\n        });\n      } else if (age <= 13) {\n        this.setState({\n          parentField: true\n        });\n        this.validatorTypes.rules['parentEmail'] = 'required|email';\n        this.validatorTypes.messages['required.parentEmail'] = 'Please enter parent email address';\n        this.validatorTypes.messages['email.parentEmail'] = 'Please enter a valid parent email address';\n        this.validatorTypes.rules['parentFirstName'] = 'required|regex:' + regExpressions.alphaOnly;\n        this.validatorTypes.messages['required.parentFirstName'] = validationMessages.parentName.required;\n        this.validatorTypes.messages['regex.parentFirstName'] = validationMessages.parentName.alphaOnly;\n      } else {\n        this.setState({\n          parentField: false,\n          parentFirstName: '',\n          parentEmail: ''\n        });\n        this.validatorTypes.rules['parentEmail'] = 'email';\n        this.validatorTypes.messages['required.parentEmail'] = '';\n        this.validatorTypes.messages['email.parentEmail'] = 'Please enter a valid parent email address';\n        this.validatorTypes.rules['parentFirstName'] = 'regex:' + regExpressions.alphaOnly;\n        this.validatorTypes.messages['required.parentFirstName'] = '';\n      }\n    }\n  }\n\n  render() {\n    const isLoading = this.state.isLoading;\n    var readOnly = false;\n\n    if (this.state.invite === CONSTANTS.INVITE_0 || this.state.invite === CONSTANTS.INVITE_1 || this.state.invite === CONSTANTS.INVITE_2 || this.state.invite === CONSTANTS.INVITE_3) {\n      readOnly = true;\n    } else {\n      readOnly = false;\n    }\n\n    return React.createElement(\"div\", {\n      className: \"wrapper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 483\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"main-panel\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 484\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"login_card\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 485\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 486\n      },\n      __self: this\n    }, React.createElement(ToastContainer, {\n      autoClose: 5000,\n      className: \"custom-toaster-main-cls\",\n      toastClassName: \"custom-toaster-bg\",\n      transition: ZoomInAndOut,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 488\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"formContent forgotPasswordForm bg-transparent\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 495\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"centeredBox p-7\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 496\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"flex align-center mb-1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 497\n      },\n      __self: this\n    }, React.createElement(Link, {\n      to: \"/login\",\n      className: \"md-icon mr-1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 498\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"icon-back_arrow2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 499\n      },\n      __self: this\n    })), React.createElement(\"legend\", {\n      className: \"color-blue mb-0\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 501\n      },\n      __self: this\n    }, \"Back To Login\")), React.createElement(Nav, {\n      bsStyle: \"tabs\",\n      activeKey: 4,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 503\n      },\n      __self: this\n    }, React.createElement(NavItem, {\n      eventKey: 2,\n      onClick: () => this.props.history.push({\n        pathname: '/signup',\n        state: {\n          eventKey: 2\n        }\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 504\n      },\n      __self: this\n    }, \"Interviewer SIGN UP\"), React.createElement(NavItem, {\n      eventKey: 1,\n      onClick: () => this.props.history.push({\n        pathname: '/signup',\n        state: {\n          eventKey: 1\n        }\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 517\n      },\n      __self: this\n    }, \"USER SIGN UP\"), React.createElement(NavItem, {\n      eventKey: 4,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 530\n      },\n      __self: this\n    }, \"HR SIGN UP\")), React.createElement(\"form\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 538\n      },\n      __self: this\n    }, React.createElement(FormGroup, {\n      className: this.getClasses('company'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 540\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      className: \"form-label\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 541\n      },\n      __self: this\n    }, \"Add Company\"), React.createElement(\"div\", {\n      className: \"custom-select\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 543\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"icon-down_arrow selectIcon\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 544\n      },\n      __self: this\n    }), React.createElement(Select, {\n      className: \"form-control\",\n      name: \"company\",\n      value: this.state.company,\n      onChange: this.handleCompanyChange,\n      options: this.state.companyDetail,\n      placeholder: \"Select company\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 545\n      },\n      __self: this\n    })), renderMessage(this.props.getValidationMessages('company'))), this.state.otherCompanyName === true ? React.createElement(FormGroup, {\n      className: this.getClasses('companyName'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 560\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      className: \"form-label\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 561\n      },\n      __self: this\n    }, \"Company Name\"), React.createElement(FormControl, {\n      type: \"text\",\n      placeholder: \"Company Name\",\n      name: \"companyName\",\n      value: this.state.companyName,\n      onChange: this.handleChange,\n      autoComplete: \"off\",\n      maxLength: \"35\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 563\n      },\n      __self: this\n    }), renderMessage(this.props.getValidationMessages('companyName'))) : null, React.createElement(FormGroup, {\n      className: this.getClasses('firstName'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 576\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      className: \"form-label\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 577\n      },\n      __self: this\n    }, \"First Name\"), React.createElement(FormControl, {\n      type: \"text\",\n      placeholder: \"First Name\",\n      name: \"firstName\",\n      value: this.state.firstName,\n      onChange: this.handleChange,\n      autoComplete: \"off\",\n      maxLength: \"35\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 579\n      },\n      __self: this\n    }), renderMessage(this.props.getValidationMessages('firstName'))), React.createElement(FormGroup, {\n      className: this.getClasses('lastName'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 592\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      className: \"form-label\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 593\n      },\n      __self: this\n    }, \"Last Name\"), React.createElement(FormControl, {\n      type: \"text\",\n      placeholder: \"Last Name\",\n      name: \"lastName\",\n      value: this.state.lastName,\n      onChange: this.handleChange,\n      autoComplete: \"off\",\n      maxLength: \"35\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 595\n      },\n      __self: this\n    }), renderMessage(this.props.getValidationMessages('lastName'))), React.createElement(FormGroup, {\n      className: this.getClasses('email'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 608\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      className: \"form-label\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 609\n      },\n      __self: this\n    }, \"Email\"), React.createElement(FormControl, {\n      type: \"Email\",\n      placeholder: \"Email\",\n      name: \"email\",\n      value: this.state.email,\n      onChange: this.handleChange,\n      autoComplete: \"off\",\n      onKeyPress: this.submitData,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 611\n      },\n      __self: this\n    }), renderMessage(this.props.getValidationMessages('email'))), React.createElement(FormGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 657\n      },\n      __self: this\n    }, React.createElement(Button, {\n      bsStyle: \"primary\",\n      className: \"centeredBtn btn-lg\",\n      disabled: isLoading,\n      onClick: !isLoading ? this.validateData : null,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 658\n      },\n      __self: this\n    }, isLoading ? 'In Progress...' : 'Sign Up')))), \" \")))));\n  }\n\n}\n\nconst mapDispatchToProps = dispatch => {\n  return bindActionCreators({\n    actionUserLogin\n  }, dispatch);\n};\n\nHRSignup = validation(strategy)(HRSignup);\nexport default connect(null, mapDispatchToProps)(HRSignup);","map":{"version":3,"sources":["/home/ank/Desktop/therapidhiregit/therapidhireui/TheRapidHireUI/src/common/authorization/hrSignUp.js"],"names":["React","Component","ToastContainer","validation","strategy","classnames","bindActionCreators","Link","connect","Button","FormGroup","InputGroup","FormControl","Nav","NavItem","YearPicker","MonthPicker","DayPicker","qs","Select","actionUserLogin","Sidebar","theRapidHireApiService","ZoomInAndOut","renderMessage","showErrorToast","encrypt","getIPAddress","CONSTANTS","moment","validationMessages","regExpressions","i","HRSignup","constructor","props","context","setUserInfo","userId","then","response","data","status","userData","result","console","log","firstName","lastName","email","roleId","invitedRoleId","dob","day","format","month","Number","year","setState","state","invite","INVITE_0","setValidatorTypes","catch","err","handleChange","event","target","name","value","handleSelect","tabValue","eventKey","location","search","newPassword","confirmNewPassword","companyName","clearValidations","handleResetForm","initialState","submitData","key","preventDefault","validateData","self","validate","error","handleSubmit","handleCompanyChange","newValue","otherCompanyName","company","isLoading","parentEmail","parentFirstName","parentLastName","parentField","INVITE_4","companyDetail","bind","getValidatorData","getClasses","componentWillMount","componentDidMount","parsed","parse","_this","ip","deviceId","getCompanyList","forEach","push","label","companyId","type","elementObject","alphaOnly","messageObject","required","invalid","validatorTypes","createSchema","field","isValid","trim","toLowerCase","students","INVITE_1","INVITE_2","INVITE_3","loginData","payload","userResponse","token","password","setTimeout","history","selectDate","STUDENT_ROLE","checkAge","PARENT_ROLE","birthDate","Date","today","age","getFullYear","rules","messages","parentName","render","readOnly","pathname","getValidationMessages","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { ToastContainer } from 'react-toastify';\nimport validation from 'react-validation-mixin';\nimport strategy from 'react-validatorjs-strategy';\nimport classnames from 'classnames';\nimport { bindActionCreators } from 'redux';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport {\n  Button,\n  FormGroup,\n  InputGroup,\n  FormControl,\n  Nav,\n  NavItem\n} from 'react-bootstrap';\nimport { YearPicker, MonthPicker, DayPicker } from 'react-dropdown-date';\nimport * as qs from 'query-string';\nimport Select from 'react-select';\nimport { actionUserLogin } from '../core/redux/actions';\nimport Sidebar from './sideBar';\nimport theRapidHireApiService from '../core/api/apiService';\nimport {\n  ZoomInAndOut,\n  renderMessage,\n  showErrorToast,\n  encrypt,\n  getIPAddress\n} from '../commonFunctions';\nimport CONSTANTS from '../core/config/appConfig';\nimport moment from 'moment';\n\nlet validationMessages = CONSTANTS.validationMessages;\nlet regExpressions = CONSTANTS.regExpressions;\nlet i = 0;\n\nclass HRSignup extends Component {\n  constructor(props, context) {\n    super(props);\n    this.state = {\n      isLoading: false,\n      userId: '',\n      firstName: '',\n      lastName: '',\n      email: '',\n      newPassword: '',\n      confirmNewPassword: '',\n      parentEmail: '',\n      parentFirstName: '',\n      parentLastName: '',\n      year: '',\n      month: '',\n      day: '',\n      roleId:\n        this.props.location.state &&\n        this.props.location.state.eventKey &&\n        this.props.location.state.eventKey === 2\n          ? 1\n          : 1,\n      eventKey:\n        this.props.location.state &&\n        this.props.location.state.eventKey &&\n        this.props.location.state.eventKey === 2\n          ? 2\n          : 1,\n      parentField: false,\n      invite: CONSTANTS.INVITE_4,\n      invitedRoleId: 1,\n      otherCompanyName:false,\n      companyDetail:[]\n    };\n\n    this.initialState = this.state;\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.getValidatorData = this.getValidatorData.bind(this);\n    this.getClasses = this.getClasses.bind(this);\n    this.setValidatorTypes = this.setValidatorTypes.bind(this);\n  }\n\n  componentWillMount() {\n    console.log('call');\n    this.setValidatorTypes(\n      this.props.location.state &&\n      this.props.location.state.eventKey &&\n      this.props.location.state.eventKey === 2\n        ? 2\n        : 1\n    );\n  }\n\n  componentDidMount() {\n    if (this.props.location.search) {\n      const parsed = qs.parse(this.props.location.search);\n      const invite = parsed.invite;\n      const userId = parsed.userId;\n      this.setState({\n        invite,\n        userId\n      });\n      this.setUserInfo(userId);\n      let _this = this;\n      getIPAddress(function(ip) {\n        _this.setState({\n          deviceId: ip\n        });\n      });\n    }\n    this.getCompanyList();\n  }\n\n  setUserInfo = userId => {\n    if (userId) {\n      theRapidHireApiService('getStudentPersonalInfoBeforeLogin', { userId })\n        .then(response => {\n          if (response.data.status === 'Success') {\n            let userData = response.data.result;\n            console.log(userData);\n            if (userData) {\n              let firstName = userData.firstName || '';\n              let lastName = userData.lastName || '';\n              let email = userData.email || '';\n              let roleId = userData.roleId === 0 ? 1 : userData.roleId;\n              let invitedRoleId = roleId;\n              if (userData.dob) {\n                let day = moment(userData.dob).format('D');\n                let month = Number(moment(userData.dob).format('M')) - 1;\n                let year = moment(userData.dob).format('YYYY');\n                console.log(day, month, year);\n                this.setState({\n                  day,\n                  month,\n                  year\n                });\n              }\n\n              if (this.state.invite === CONSTANTS.INVITE_0) {\n                this.setValidatorTypes(roleId);\n              }\n              this.setState({\n                firstName,\n                lastName,\n                email,\n                invitedRoleId,\n                roleId\n              });\n            }\n          }\n        })\n        .catch(err => {\n          console.log(err);\n        });\n    }\n  };\n\n  getCompanyList(){\n    theRapidHireApiService('getCompanyList')\n    .then(response => {     \n      if (response.data.status === 'Success') {\n         let companyDetail= this.state.companyDetail;\n         response.data.result.forEach(function(data){         \n         \n            companyDetail.push({label: data.companyName,value:data.companyId })\n        })     \n         this.setState({companyDetail: companyDetail});\n      }\n    })\n    .catch(err => {\n      console.log(err);\n    });\n  }\n\n\n  // type = 1 = student,   type = 2 = parent\n  setValidatorTypes(type) {\n    console.log(type);\n    type = Number(type);\n\n    // Common validation for student and parent\n    let elementObject = {\n      firstName: ['required', 'regex:' + regExpressions.alphaOnly],\n      lastName: ['required', 'regex:' + regExpressions.alphaOnly],\n      email: 'required|email',\n  // //   newPassword: ['required', 'regex:' + regExpressions.passwordPattern],\n    //  confirmNewPassword: 'required|same:newPassword'\n     \n    };\n\n    let messageObject = {\n      'required.firstName': validationMessages.firstName.required,\n      'regex.firstName': validationMessages.firstName.alphaOnly,\n      'required.lastName': validationMessages.lastName.required,\n      'regex.lastName': validationMessages.lastName.alphaOnly,\n      'required.email': validationMessages.email.required,\n      'email.email': validationMessages.email.invalid,\n //     'required.newPassword': validationMessages.password.newPassword,\n //     'regex.newPassword': validationMessages.password.passwordPattern,\n      // 'required.confirmNewPassword':\n      //   validationMessages.password.confirmNewPassword,\n      // 'same.confirmNewPassword': validationMessages.password.same\n     \n    };   \n    this.validatorTypes = strategy.createSchema(elementObject, messageObject);\n  }\n\n  getValidatorData() {\n    return this.state;\n  }\n\n  getClasses(field) {\n    return classnames({\n      error: !this.props.isValid(field)\n    });\n  }\n\n  handleChange = event => {\n    this.setState({ [event.target.name]: event.target.value });\n  };\n\n  handleSelect = tabValue => {\n    let eventKey = Number(tabValue);\n    if (eventKey !== this.state.roleId && this.props.location.search === '') {\n      this.setState({\n        firstName: '',\n        lastName: '',\n        email: '',\n        newPassword: '',\n        confirmNewPassword: '',\n        companyName:''\n        // parentEmail: '',\n        // parentFirstName: '',\n        // parentLastName: '',\n        // year: '',\n        // month: '',\n        // day: ''\n      });\n    }\n\n    this.setState({\n      roleId: 3,\n      eventKey: eventKey\n    });\n    this.props.clearValidations();\n    this.setValidatorTypes(eventKey);\n  };\n\n  handleResetForm = () => {\n    this.setState(this.initialState);\n  };\n\n  submitData = event => {\n    if (event.key === 'Enter') {\n      event.preventDefault();\n      this.validateData();\n    }\n  };\n\n  validateData = () => {\n    console.log('validateData -- ');\n    let self = this;\n    this.props.validate(function(error) {\n      if (!error) {       \n          //self.setState({ isLoading: true });\n          self.handleSubmit();        \n      }\n    });\n  };\n\n  handleCompanyChange = newValue => {\n    if(newValue.value == 1){\n       \n        // this.validatorTypes.rules['companyName'] = 'required|companyName';\n        // this.validatorTypes.messages['required.companyName'] =\n        //                                         'Please enter companyName';\n        this.setState({otherCompanyName: true});\n    }else{\n        // this.validatorTypes.rules['companyName'] = '';\n        // this.validatorTypes.messages['required.companyName'] =\n        //                                         'Please enter companyName';\n    }\n        this.setState({\n        company: newValue\n        });\n    \n  };\n\n  handleSubmit() {\n    let firstName = this.state.firstName.trim();\n    let lastName = this.state.lastName.trim();\n    let email = this.state.email.toLowerCase().trim();\n //   let password = encrypt(this.state.newPassword.trim());\n    let roleId = 3;\n    let userId = this.state.userId;\n    let deviceId = this.state.deviceId;\n    console.log(this.state.company);\n    let companyName = this.state.company && this.state.company.value !== 1? this.state.company.label: this.state.companyName;\n    let companyId= this.state.company && this.state.company.value !== 1 ? this.state.company.value: null\n    let students = [];    \n    let self = this;\n\n      let data = {\n        firstName,\n        lastName,\n        email,\n  //      password,\n      //  dob,\n    //    parentEmail,\n     //   parentFirstName,\n     //   parentLastName,\n        roleId,\n        companyId,\n        companyName,\n    //    invite,\n         userId:''\n      };\n\n      console.log(data);\n\n      theRapidHireApiService('signupHR', data)\n        .then(response => {\n          if (response.data.status === 'Success') {\n            if (\n              self.state.invite === CONSTANTS.INVITE_1 ||\n              self.state.invite === CONSTANTS.INVITE_2 ||\n              self.state.invite === CONSTANTS.INVITE_3\n            ) {\n              let loginData = {\n                email,                \n                deviceId\n              };\n\n              this.props\n                .actionUserLogin(loginData)\n                .then(response => {\n                  if (\n                    response.payload &&\n                    response.payload.data.status === 'Success'\n                  ) {\n                    self.setState({\n                      isLoading: false\n                    });\n                    const userResponse = response.payload.data.result;\n                    if (userResponse && userResponse.token) {\n                      if (userResponse.roleId === 1) {                     \n                      \n                      }\n                    }\n                  }\n                })\n                .catch(error => {\n                  self.setState({\n                    isLoading: false,\n                    password: ''\n                  });\n                  console.log('err', error);\n                });\n            } else {\n              self.setState({\n                isLoading: false,\n                firstName: '',\n                lastName: '',\n                email: '',\n                newPassword: '',\n                confirmNewPassword: '',\n                // day: '',\n                // month: '',\n                // year: '',\n                // parentFirstName: '',\n                // parentLastName: ''\n              });\n              setTimeout(function() {\n                self.props.history.push('/login');\n              }, 5000);\n            }\n          } else {\n            self.setState({ isLoading: false });\n          }\n        })\n        .catch(err => {\n          self.setState({ isLoading: false });\n          console.log(err);\n        }); \n  \n  }\n\n  selectDate(type, value) {\n    if (this.state.roleId === CONSTANTS.STUDENT_ROLE) {\n      if (type === 'year') {\n        this.setState({ year: value }, () => this.checkAge());\n      }\n      if (type === 'month') {\n        this.setState({ month: value }, () => this.checkAge());\n      }\n      if (type === 'day') {\n        this.setState({ day: value }, () => this.checkAge());\n      }\n    } else if (this.state.roleId === CONSTANTS.PARENT_ROLE) {\n      if (type === 'year') {\n        this.setState({ year: value });\n      }\n      if (type === 'month') {\n        this.setState({ month: value });\n      }\n      if (type === 'day') {\n        this.setState({ day: value });\n      }\n    }\n  }\n\n  checkAge() {\n    if (this.state.year && this.state.month && this.state.day) {\n      let day = this.state.day;\n      let month = Number(this.state.month);\n      let year = this.state.year;\n\n      let birthDate = new Date(year, month, day);\n      var today = new Date();\n\n      if (birthDate > today) {\n        showErrorToast('Please select valid date');\n      }\n\n      let age = today.getFullYear() - birthDate.getFullYear();\n\n      if (\n        this.state.invite === CONSTANTS.INVITE_0 ||\n        this.state.invite === CONSTANTS.INVITE_1 ||\n        this.state.invite === CONSTANTS.INVITE_2 ||\n        this.state.invite === CONSTANTS.INVITE_3\n      ) {\n        this.setState({\n          parentField: false\n        });\n      } else if (age <= 13) {\n        this.setState({\n          parentField: true\n        });\n        this.validatorTypes.rules['parentEmail'] = 'required|email';\n        this.validatorTypes.messages['required.parentEmail'] =\n          'Please enter parent email address';\n        this.validatorTypes.messages['email.parentEmail'] =\n          'Please enter a valid parent email address';\n\n        this.validatorTypes.rules['parentFirstName'] =\n          'required|regex:' + regExpressions.alphaOnly;\n        this.validatorTypes.messages['required.parentFirstName'] =\n          validationMessages.parentName.required;\n        this.validatorTypes.messages['regex.parentFirstName'] =\n          validationMessages.parentName.alphaOnly;\n      } else {\n        this.setState({\n          parentField: false,\n          parentFirstName: '',\n          parentEmail: ''\n        });\n        this.validatorTypes.rules['parentEmail'] = 'email';\n        this.validatorTypes.messages['required.parentEmail'] = '';\n        this.validatorTypes.messages['email.parentEmail'] =\n          'Please enter a valid parent email address';\n\n        this.validatorTypes.rules['parentFirstName'] =\n          'regex:' + regExpressions.alphaOnly;\n        this.validatorTypes.messages['required.parentFirstName'] = '';\n      }\n    }\n  }  \n\n\n  render() {\n    const { isLoading } = this.state;\n    var readOnly = false;\n    if (\n      this.state.invite === CONSTANTS.INVITE_0 ||\n      this.state.invite === CONSTANTS.INVITE_1 ||\n      this.state.invite === CONSTANTS.INVITE_2 ||\n      this.state.invite === CONSTANTS.INVITE_3\n    ) {\n      readOnly = true;\n    } else {\n      readOnly = false;\n    }\n    return (\n    <div className=\"wrapper\">        \n      <div className=\"main-panel\">     \n        <div className=\"login_card\">\n           <div className=\"header\">\n       \n        <ToastContainer\n          autoClose={5000}\n          className=\"custom-toaster-main-cls\"\n          toastClassName=\"custom-toaster-bg\"\n          transition={ZoomInAndOut}\n        />\n          \n        <div className=\"formContent forgotPasswordForm bg-transparent\">\n          <div className=\"centeredBox p-7\">      \n          <div className=\"flex align-center mb-1\">\n                  <Link to=\"/login\" className=\"md-icon mr-1\">\n                    <span className=\"icon-back_arrow2\" />\n                  </Link>\n                  <legend className=\"color-blue mb-0\">Back To Login</legend>\n                </div>     \n                <Nav bsStyle=\"tabs\" activeKey={4}>               \n                <NavItem\n                  eventKey={2}\n                  onClick={() =>\n                    this.props.history.push({\n                      pathname: '/signup',\n                      state: {\n                        eventKey: 2\n                      }\n                    })\n                  }\n                >\n                  Interviewer SIGN UP\n                </NavItem>\n                <NavItem\n                  eventKey={1}\n                  onClick={() =>\n                    this.props.history.push({\n                      pathname: '/signup',\n                      state: {\n                        eventKey: 1\n                      }\n                    })\n                  }\n                >\n                  USER SIGN UP\n                </NavItem>\n                <NavItem\n                  eventKey={4}                 \n                >\n                  HR SIGN UP\n                </NavItem>\n              </Nav>\n           \n\n            <form>\n                      \n              <FormGroup className={this.getClasses('company')}>\n              <label className=\"form-label\">Add Company</label>\n              \n                    <div className=\"custom-select\">\n                      <span className=\"icon-down_arrow selectIcon\" />\n                      <Select\n                        className=\"form-control\"                        \n                        name=\"company\"\n                        value={this.state.company}\n                        onChange={this.handleCompanyChange}\n                        options={this.state.companyDetail}\n                        placeholder=\"Select company\"\n                      />\n                    </div>                   \n                   \n                    {renderMessage(this.props.getValidationMessages('company'))}\n                </FormGroup>\n\n                {this.state.otherCompanyName === true ?\n\n                <FormGroup className={this.getClasses('companyName')}>\n                    <label className=\"form-label\">Company Name</label>\n                  \n                    <FormControl\n                        type=\"text\"\n                        placeholder=\"Company Name\"\n                        name=\"companyName\"\n                        value={this.state.companyName}\n                        onChange={this.handleChange}\n                        autoComplete=\"off\"\n                        maxLength=\"35\"\n                    />\n                  \n                    {renderMessage(this.props.getValidationMessages('companyName'))}\n                </FormGroup> : null}\n\n              <FormGroup className={this.getClasses('firstName')}>\n                <label className=\"form-label\">First Name</label>\n              \n                  <FormControl\n                    type=\"text\"\n                    placeholder=\"First Name\"\n                    name=\"firstName\"\n                    value={this.state.firstName}\n                    onChange={this.handleChange}\n                    autoComplete=\"off\"\n                    maxLength=\"35\"\n                  />\n               \n                {renderMessage(this.props.getValidationMessages('firstName'))}\n              </FormGroup>\n\n              <FormGroup className={this.getClasses('lastName')}>\n                <label className=\"form-label\">Last Name</label>\n           \n                  <FormControl\n                    type=\"text\"\n                    placeholder=\"Last Name\"\n                    name=\"lastName\"\n                    value={this.state.lastName}\n                    onChange={this.handleChange}\n                    autoComplete=\"off\"\n                    maxLength=\"35\"\n                  />\n                \n                {renderMessage(this.props.getValidationMessages('lastName'))}\n              </FormGroup>\n\n              <FormGroup className={this.getClasses('email')}>\n                <label className=\"form-label\">Email</label>\n               \n                  <FormControl\n                    type=\"Email\"\n                    placeholder=\"Email\"\n                    name=\"email\"                    \n                    value={this.state.email}\n                    onChange={this.handleChange}\n                    autoComplete=\"off\"\n                    onKeyPress={this.submitData}\n                  />\n            \n                {renderMessage(this.props.getValidationMessages('email'))}\n              </FormGroup>\n\n              {/* <FormGroup className={this.getClasses('newPassword')}>\n                <label className=\"form-label\">Password</label>\n              \n                  <FormControl\n                    type=\"password\"\n                    placeholder=\"Password\"\n                    name=\"newPassword\"\n                    value={this.state.newPassword}\n                    onChange={this.handleChange}\n                    maxLength=\"20\"\n                    autoComplete=\"new-password\"\n                  />\n                \n                {renderMessage(this.props.getValidationMessages('newPassword'))}\n              </FormGroup>\n\n              <FormGroup className={this.getClasses('confirmNewPassword')}>\n                <label className=\"form-label\">Confirm Password</label>\n              \n                  <FormControl\n                    type=\"password\"\n                    placeholder=\"Confirm password\"\n                    name=\"confirmNewPassword\"\n                    value={this.state.confirmNewPassword}\n                    onChange={this.handleChange}\n                    maxLength=\"20\"\n                  />               \n                {renderMessage(\n                  this.props.getValidationMessages('confirmNewPassword')\n                )}\n              </FormGroup>\n */}\n\n              <FormGroup>\n                <Button\n                  bsStyle=\"primary\"\n                  className=\"centeredBtn btn-lg\"\n                  disabled={isLoading}\n                  onClick={!isLoading ? this.validateData : null}\n                >\n                  {isLoading ? 'In Progress...' : 'Sign Up'}\n                </Button>\n              </FormGroup>\n            </form>\n          </div> </div>\n        </div>\n      </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return bindActionCreators({ actionUserLogin }, dispatch);\n};\n\nHRSignup = validation(strategy)(HRSignup);\nexport default connect(\n  null,\n  mapDispatchToProps\n)(HRSignup);\n"]},"metadata":{},"sourceType":"module"}