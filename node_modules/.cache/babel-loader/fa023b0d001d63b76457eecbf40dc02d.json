{"ast":null,"code":"// import React, { Component } from 'react';\n// import theRapidHireApiService from '../../common/core/api/apiService';\n// import CONSTANTS from '../../common/core/config/appConfig';\n// let Highcharts = window.Highcharts;\n// class spideChart extends Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       seriesData: [],\n//       competencyData: [],\n//       type: ''\n//     };\n//   }\n//   componentWillReceiveProps(nextProps) {\n//     let userId = nextProps.userId;\n//     let sharedId = nextProps.sharedId;\n//     let type = nextProps.type;\n//     // if (nextProps.userId !== this.props.userId) {\n//     this.getChartData(userId, sharedId);\n//     this.setState({\n//       type\n//     });\n//     //}\n//   }\n//   componentDidMount() {\n//     console.log('Ff');\n//     let userId = this.props.userId;\n//     let sharedId = this.props.sharedId;\n//     let type = this.props.type;\n//     this.getChartData(userId, sharedId);\n//     this.setState({\n//       type\n//     });\n//   }\n//   getChartData = (userId, sharedId) => { \n//     console.log('this.props.spiderChartVar',this.props.spiderChartVar);   \n//     if(this.props.spiderChartVar && this.props.spiderChartVar >= 1) return false;\n//     let self = this;\n//     if (userId && sharedId) {\n//       theRapidHireApiService('spiderGraph', { userId, sharedId })\n//         .then(response => {\n//           if (response.data.status === 'Success') {\n//             let chartData = response.data.result;\n//             this.setState({ chartData });\n//             let seriesData = [];\n//             let competencyData = [];\n//             let json = {};\n//             if (chartData.length > 0) {\n//               chartData.map((item, index) => {\n//                 let competencyName = item.name + '- ' + item.importanceTitle;\n//                 let competencyIcon =\n//                   \"<div class='iconWrapper'><i class='\" +\n//                   CONSTANTS.icons[item._id] +\n//                   ' ' +\n//                   'chartIcon' +\n//                   \"'></i></div>\";\n//                 seriesData.push(item.importance);\n//                 competencyData.push(item.name + '- ' + item.importanceTitle);\n//                 json[competencyName] = competencyIcon;\n//               });\n//               self.plotSpiderChart(competencyData, seriesData, json);\n//             }\n//           }\n//         })\n//         .catch(err => {\n//           console.log(err);\n//         });\n//     }\n//   };\n//   plotSpiderChart(competencyData, seriesData, json) {\n//     this.state.type === 'aerial'\n//       ? Highcharts.chart('container1', {\n//           chart: {\n//             polar: true,\n//             type: 'line',\n//             width: 300\n//           },\n//           title: {\n//             text: ''\n//           },\n//           pane: {\n//             size: '50%'\n//           },\n//           xAxis: {\n//             categories: competencyData,\n//             tickmarkPlacement: 'on',\n//             lineWidth: 0,\n//             labels: {\n//               useHTML: true,\n//               formatter: function() {\n//                 return json[this.value];\n//               }\n//             }\n//           },\n//           yAxis: {\n//             min: 0,\n//             max: 10,\n//             tickInterval: 1,\n//             gridLineInterpolation: 'polygon',\n//             lineWidth: 0\n//           },\n//           tooltip: {\n//             shared: true,\n//             pointFormat: '<span style=\"color:{series.color}\"><br/>'\n//           },\n//           exporting: {\n//             enabled: false\n//           },\n//           credits: {\n//             enabled: false\n//           },\n//           legend: {\n//             enabled: false\n//           },\n//           series: [\n//             {\n//               type: 'area',\n//               name: 'Importance',\n//               data: seriesData,\n//               pointPlacement: 'on'\n//             }\n//           ]\n//         })\n//       : Highcharts.chart('container1', {\n//           chart: {\n//             polar: true,\n//             type: 'line'\n//           },\n//           title: {\n//             text: ''\n//           },\n//           pane: {\n//             size: '60%'\n//           },\n//           xAxis: {\n//             categories: competencyData,\n//             tickmarkPlacement: 'on',\n//             lineWidth: 0,\n//             labels: {\n//               useHTML: true,\n//               formatter: function() {\n//                 return json[this.value];\n//               }\n//             }\n//           },\n//           yAxis: {\n//             min: 0,\n//             max: 11,\n//             tickInterval: 1,\n//             gridLineInterpolation: 'polygon',\n//             lineWidth: 0\n//           },\n//           tooltip: {\n//             shared: true,\n//             pointFormat: '<span style=\"color:{series.color}\"><br/>'\n//           },\n//           exporting: {\n//             enabled: false\n//           },\n//           credits: {\n//             enabled: false\n//           },\n//           legend: {\n//             enabled: false\n//           },\n//           series: [\n//             {\n//               type: 'area',\n//               name: 'Importance',\n//               data: seriesData,\n//               pointPlacement: 'on'\n//             }\n//           ]\n//         });\n//   }\n//   render() {\n//     return (\n//       <div\n//         id=\"container1\"\n//         style={{ width: '100%', height: '300px', margin: '0 auto' }}\n//       />\n//     );\n//   }\n// }\n// export default spideChart;","map":{"version":3,"sources":["C:\\Users\\Ankur\\Desktop\\therapidhire\\therapidhireui\\TheRapidHireUI\\src\\common\\spiderChart\\spiderChart.js"],"names":[],"mappingssourcesContent":["// import React, { Component } from 'react';\r\n// import theRapidHireApiService from '../../common/core/api/apiService';\r\n// import CONSTANTS from '../../common/core/config/appConfig';\r\n\r\n// let Highcharts = window.Highcharts;\r\n\r\n// class spideChart extends Component {\r\n//   constructor(props) {\r\n//     super(props);\r\n//     this.state = {\r\n//       seriesData: [],\r\n//       competencyData: [],\r\n//       type: ''\r\n//     };\r\n//   }\r\n\r\n//   componentWillReceiveProps(nextProps) {\r\n//     let userId = nextProps.userId;\r\n//     let sharedId = nextProps.sharedId;\r\n//     let type = nextProps.type;\r\n//     // if (nextProps.userId !== this.props.userId) {\r\n//     this.getChartData(userId, sharedId);\r\n//     this.setState({\r\n//       type\r\n//     });\r\n//     //}\r\n//   }\r\n\r\n//   componentDidMount() {\r\n//     console.log('Ff');\r\n//     let userId = this.props.userId;\r\n//     let sharedId = this.props.sharedId;\r\n//     let type = this.props.type;\r\n//     this.getChartData(userId, sharedId);\r\n//     this.setState({\r\n//       type\r\n//     });\r\n//   }\r\n\r\n//   getChartData = (userId, sharedId) => { \r\n//     console.log('this.props.spiderChartVar',this.props.spiderChartVar);   \r\n//     if(this.props.spiderChartVar && this.props.spiderChartVar >= 1) return false;\r\n\r\n//     let self = this;\r\n//     if (userId && sharedId) {\r\n//       theRapidHireApiService('spiderGraph', { userId, sharedId })\r\n//         .then(response => {\r\n//           if (response.data.status === 'Success') {\r\n//             let chartData = response.data.result;\r\n//             this.setState({ chartData });\r\n//             let seriesData = [];\r\n//             let competencyData = [];\r\n//             let json = {};\r\n//             if (chartData.length > 0) {\r\n//               chartData.map((item, index) => {\r\n//                 let competencyName = item.name + '- ' + item.importanceTitle;\r\n//                 let competencyIcon =\r\n//                   \"<div class='iconWrapper'><i class='\" +\r\n//                   CONSTANTS.icons[item._id] +\r\n//                   ' ' +\r\n//                   'chartIcon' +\r\n//                   \"'></i></div>\";\r\n\r\n//                 seriesData.push(item.importance);\r\n//                 competencyData.push(item.name + '- ' + item.importanceTitle);\r\n//                 json[competencyName] = competencyIcon;\r\n//               });\r\n\r\n//               self.plotSpiderChart(competencyData, seriesData, json);\r\n//             }\r\n//           }\r\n//         })\r\n//         .catch(err => {\r\n//           console.log(err);\r\n//         });\r\n//     }\r\n//   };\r\n\r\n//   plotSpiderChart(competencyData, seriesData, json) {\r\n//     this.state.type === 'aerial'\r\n//       ? Highcharts.chart('container1', {\r\n//           chart: {\r\n//             polar: true,\r\n//             type: 'line',\r\n//             width: 300\r\n//           },\r\n\r\n//           title: {\r\n//             text: ''\r\n//           },\r\n\r\n//           pane: {\r\n//             size: '50%'\r\n//           },\r\n\r\n//           xAxis: {\r\n//             categories: competencyData,\r\n//             tickmarkPlacement: 'on',\r\n//             lineWidth: 0,\r\n//             labels: {\r\n//               useHTML: true,\r\n//               formatter: function() {\r\n//                 return json[this.value];\r\n//               }\r\n//             }\r\n//           },\r\n\r\n//           yAxis: {\r\n//             min: 0,\r\n//             max: 10,\r\n//             tickInterval: 1,\r\n//             gridLineInterpolation: 'polygon',\r\n//             lineWidth: 0\r\n//           },\r\n\r\n//           tooltip: {\r\n//             shared: true,\r\n//             pointFormat: '<span style=\"color:{series.color}\"><br/>'\r\n//           },\r\n\r\n//           exporting: {\r\n//             enabled: false\r\n//           },\r\n\r\n//           credits: {\r\n//             enabled: false\r\n//           },\r\n\r\n//           legend: {\r\n//             enabled: false\r\n//           },\r\n\r\n//           series: [\r\n//             {\r\n//               type: 'area',\r\n//               name: 'Importance',\r\n//               data: seriesData,\r\n//               pointPlacement: 'on'\r\n//             }\r\n//           ]\r\n//         })\r\n//       : Highcharts.chart('container1', {\r\n//           chart: {\r\n//             polar: true,\r\n//             type: 'line'\r\n//           },\r\n\r\n//           title: {\r\n//             text: ''\r\n//           },\r\n\r\n//           pane: {\r\n//             size: '60%'\r\n//           },\r\n\r\n//           xAxis: {\r\n//             categories: competencyData,\r\n//             tickmarkPlacement: 'on',\r\n//             lineWidth: 0,\r\n//             labels: {\r\n//               useHTML: true,\r\n//               formatter: function() {\r\n//                 return json[this.value];\r\n//               }\r\n//             }\r\n//           },\r\n\r\n//           yAxis: {\r\n//             min: 0,\r\n//             max: 11,\r\n//             tickInterval: 1,\r\n//             gridLineInterpolation: 'polygon',\r\n//             lineWidth: 0\r\n//           },\r\n\r\n//           tooltip: {\r\n//             shared: true,\r\n//             pointFormat: '<span style=\"color:{series.color}\"><br/>'\r\n//           },\r\n\r\n//           exporting: {\r\n//             enabled: false\r\n//           },\r\n\r\n//           credits: {\r\n//             enabled: false\r\n//           },\r\n\r\n//           legend: {\r\n//             enabled: false\r\n//           },\r\n\r\n//           series: [\r\n//             {\r\n//               type: 'area',\r\n//               name: 'Importance',\r\n//               data: seriesData,\r\n//               pointPlacement: 'on'\r\n//             }\r\n//           ]\r\n//         });\r\n//   }\r\n\r\n//   render() {\r\n//     return (\r\n//       <div\r\n//         id=\"container1\"\r\n//         style={{ width: '100%', height: '300px', margin: '0 auto' }}\r\n//       />\r\n//     );\r\n//   }\r\n// }\r\n\r\n// export default spideChart;\r\n"]},"metadata":{},"sourceType":"module"}