{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nvar _height = require('dom-helpers/query/height');\n\nvar _height2 = _interopRequireDefault(_height);\n\nvar _offset = require('dom-helpers/query/offset');\n\nvar _offset2 = _interopRequireDefault(_offset);\n\nvar _offsetParent = require('dom-helpers/query/offsetParent');\n\nvar _offsetParent2 = _interopRequireDefault(_offsetParent);\n\nvar _scrollTop = require('dom-helpers/query/scrollTop');\n\nvar _scrollTop2 = _interopRequireDefault(_scrollTop);\n\nvar _requestAnimationFrame = require('dom-helpers/util/requestAnimationFrame');\n\nvar _requestAnimationFrame2 = _interopRequireDefault(_requestAnimationFrame);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactDom = require('react-dom');\n\nvar _reactDom2 = _interopRequireDefault(_reactDom);\n\nvar _addEventListener = require('./utils/addEventListener');\n\nvar _addEventListener2 = _interopRequireDefault(_addEventListener);\n\nvar _getDocumentHeight = require('./utils/getDocumentHeight');\n\nvar _getDocumentHeight2 = _interopRequireDefault(_getDocumentHeight);\n\nvar _ownerDocument = require('./utils/ownerDocument');\n\nvar _ownerDocument2 = _interopRequireDefault(_ownerDocument);\n\nvar _ownerWindow = require('./utils/ownerWindow');\n\nvar _ownerWindow2 = _interopRequireDefault(_ownerWindow);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n/**\n * The `<Affix/>` component toggles `position: fixed;` on and off, emulating\n * the effect found with `position: sticky;`.\n */\n\n\nvar Affix = function (_React$Component) {\n  _inherits(Affix, _React$Component);\n\n  function Affix(props, context) {\n    _classCallCheck(this, Affix);\n\n    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props, context));\n\n    _this.onWindowScroll = function () {\n      _this.onUpdate();\n    };\n\n    _this.onDocumentClick = function () {\n      (0, _requestAnimationFrame2.default)(function () {\n        return _this.onUpdate();\n      });\n    };\n\n    _this.onUpdate = function () {\n      if (!_this._isMounted) {\n        return;\n      }\n\n      var _this$props = _this.props,\n          offsetTop = _this$props.offsetTop,\n          viewportOffsetTop = _this$props.viewportOffsetTop;\n      var scrollTop = (0, _scrollTop2.default)((0, _ownerWindow2.default)(_this));\n      var positionTopMin = scrollTop + (viewportOffsetTop || 0);\n\n      if (positionTopMin <= offsetTop) {\n        _this.updateState('top', null, null);\n\n        return;\n      }\n\n      if (positionTopMin > _this.getPositionTopMax()) {\n        if (_this.state.affixed === 'bottom') {\n          _this.updateStateAtBottom();\n        } else {\n          // Setting position away from `fixed` can change the offset parent of\n          // the affix, so we can't calculate the correct position until after\n          // we've updated its position.\n          _this.setState({\n            affixed: 'bottom',\n            position: 'absolute',\n            top: null\n          }, function () {\n            if (!_this._isMounted) {\n              return;\n            }\n\n            _this.updateStateAtBottom();\n          });\n        }\n\n        return;\n      }\n\n      _this.updateState('affix', 'fixed', viewportOffsetTop);\n    };\n\n    _this.getPositionTopMax = function () {\n      var documentHeight = (0, _getDocumentHeight2.default)((0, _ownerDocument2.default)(_this));\n      var height = (0, _height2.default)(_reactDom2.default.findDOMNode(_this));\n      return documentHeight - height - _this.props.offsetBottom;\n    };\n\n    _this.updateState = function (affixed, position, top) {\n      if (affixed === _this.state.affixed && position === _this.state.position && top === _this.state.top) {\n        return;\n      }\n\n      var upperName = affixed === 'affix' ? '' : affixed.charAt(0).toUpperCase() + affixed.substr(1);\n\n      if (_this.props['onAffix' + upperName]) {\n        _this.props['onAffix' + upperName]();\n      }\n\n      _this.setState({\n        affixed: affixed,\n        position: position,\n        top: top\n      }, function () {\n        if (_this.props['onAffixed' + upperName]) {\n          _this.props['onAffixed' + upperName]();\n        }\n      });\n    };\n\n    _this.updateStateAtBottom = function () {\n      var positionTopMax = _this.getPositionTopMax();\n\n      var offsetParent = (0, _offsetParent2.default)(_reactDom2.default.findDOMNode(_this));\n      var parentTop = (0, _offset2.default)(offsetParent).top;\n\n      _this.updateState('bottom', 'absolute', positionTopMax - parentTop);\n    };\n\n    _this.state = {\n      affixed: 'top',\n      position: null,\n      top: null\n    };\n    _this._needPositionUpdate = false;\n    return _this;\n  }\n\n  Affix.prototype.componentDidMount = function componentDidMount() {\n    var _this2 = this;\n\n    this._isMounted = true;\n    this._windowScrollListener = (0, _addEventListener2.default)((0, _ownerWindow2.default)(this), 'scroll', function () {\n      return _this2.onWindowScroll();\n    });\n    this._documentClickListener = (0, _addEventListener2.default)((0, _ownerDocument2.default)(this), 'click', function () {\n      return _this2.onDocumentClick();\n    });\n    this.onUpdate();\n  };\n\n  Affix.prototype.componentWillReceiveProps = function componentWillReceiveProps() {\n    this._needPositionUpdate = true;\n  };\n\n  Affix.prototype.componentDidUpdate = function componentDidUpdate() {\n    if (this._needPositionUpdate) {\n      this._needPositionUpdate = false;\n      this.onUpdate();\n    }\n  };\n\n  Affix.prototype.componentWillUnmount = function componentWillUnmount() {\n    this._isMounted = false;\n\n    if (this._windowScrollListener) {\n      this._windowScrollListener.remove();\n    }\n\n    if (this._documentClickListener) {\n      this._documentClickListener.remove();\n    }\n  };\n\n  Affix.prototype.render = function render() {\n    var child = _react2.default.Children.only(this.props.children);\n\n    var _child$props = child.props,\n        className = _child$props.className,\n        style = _child$props.style;\n    var _state = this.state,\n        affixed = _state.affixed,\n        position = _state.position,\n        top = _state.top;\n    var positionStyle = {\n      position: position,\n      top: top\n    };\n    var affixClassName = void 0;\n    var affixStyle = void 0;\n\n    if (affixed === 'top') {\n      affixClassName = this.props.topClassName;\n      affixStyle = this.props.topStyle;\n    } else if (affixed === 'bottom') {\n      affixClassName = this.props.bottomClassName;\n      affixStyle = this.props.bottomStyle;\n    } else {\n      affixClassName = this.props.affixClassName;\n      affixStyle = this.props.affixStyle;\n    }\n\n    return _react2.default.cloneElement(child, {\n      className: (0, _classnames2.default)(affixClassName, className),\n      style: _extends({}, positionStyle, affixStyle, style)\n    });\n  };\n\n  return Affix;\n}(_react2.default.Component);\n\nAffix.propTypes = {\n  /**\n   * Pixels to offset from top of screen when calculating position\n   */\n  offsetTop: _propTypes2.default.number,\n\n  /**\n   * When affixed, pixels to offset from top of viewport\n   */\n  viewportOffsetTop: _propTypes2.default.number,\n\n  /**\n   * Pixels to offset from bottom of screen when calculating position\n   */\n  offsetBottom: _propTypes2.default.number,\n\n  /**\n   * CSS class or classes to apply when at top\n   */\n  topClassName: _propTypes2.default.string,\n\n  /**\n   * Style to apply when at top\n   */\n  topStyle: _propTypes2.default.object,\n\n  /**\n   * CSS class or classes to apply when affixed\n   */\n  affixClassName: _propTypes2.default.string,\n\n  /**\n   * Style to apply when affixed\n   */\n  affixStyle: _propTypes2.default.object,\n\n  /**\n   * CSS class or classes to apply when at bottom\n   */\n  bottomClassName: _propTypes2.default.string,\n\n  /**\n   * Style to apply when at bottom\n   */\n  bottomStyle: _propTypes2.default.object,\n\n  /**\n   * Callback fired when the right before the `affixStyle` and `affixStyle` props are rendered\n   */\n  onAffix: _propTypes2.default.func,\n\n  /**\n   * Callback fired after the component `affixStyle` and `affixClassName` props have been rendered.\n   */\n  onAffixed: _propTypes2.default.func,\n\n  /**\n   * Callback fired when the right before the `topStyle` and `topClassName` props are rendered\n   */\n  onAffixTop: _propTypes2.default.func,\n\n  /**\n   * Callback fired after the component `topStyle` and `topClassName` props have been rendered.\n   */\n  onAffixedTop: _propTypes2.default.func,\n\n  /**\n   * Callback fired when the right before the `bottomStyle` and `bottomClassName` props are rendered\n   */\n  onAffixBottom: _propTypes2.default.func,\n\n  /**\n   * Callback fired after the component `bottomStyle` and `bottomClassName` props have been rendered.\n   */\n  onAffixedBottom: _propTypes2.default.func\n};\nAffix.defaultProps = {\n  offsetTop: 0,\n  viewportOffsetTop: null,\n  offsetBottom: 0\n};\nexports.default = Affix;\nmodule.exports = exports['default'];","map":null,"metadata":{},"sourceType":"script"}